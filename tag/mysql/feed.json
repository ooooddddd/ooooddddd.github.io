{
    "version": "https://jsonfeed.org/version/1",
    "title": "橙熟 • All posts by \"mysql\" tag",
    "description": "我的笔记",
    "home_page_url": "https://ooooddddd.github.io",
    "items": [
        {
            "id": "https://ooooddddd.github.io/2024/01/03/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "https://ooooddddd.github.io/2024/01/03/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "MySQL面试题",
            "date_published": "2024-01-03T11:46:41.000Z",
            "content_html": "<h1 id=\"Mysql相关面经\"><a href=\"#Mysql相关面经\" class=\"headerlink\" title=\"Mysql相关面经\"></a>Mysql相关面经</h1><h3 id=\"执行一条-SQL-查询语句，期间发生了什么？\"><a href=\"#执行一条-SQL-查询语句，期间发生了什么？\" class=\"headerlink\" title=\"执行一条 SQL 查询语句，期间发生了什么？\"></a>执行一条 SQL 查询语句，期间发生了什么？</h3><ol>\n<li>连接器：客户端通过TCP请求发送连接请求到Mysql连接器，连接器会对该请求进行权限验证和连接资源分配</li>\n<li>查询缓存，命中缓存则直接返回数据，否则继续向下执行</li>\n<li>解析SQL，通过解析器对SQL语句进行词法、语法分析，检查数据表和数据列是否存在，别名是否存在歧义等</li>\n<li>优化，是否使用索引，生成执行计划</li>\n<li>交给执行器，将数据保存到结果集中，同时逐步将数据缓存到查询缓存当中，最后将结果集返回给客户端。</li>\n</ol>\n<h3 id=\"一、索引\"><a href=\"#一、索引\" class=\"headerlink\" title=\"一、索引\"></a>一、索引</h3><h4 id=\"用过哪些索引\"><a href=\"#用过哪些索引\" class=\"headerlink\" title=\"用过哪些索引\"></a>用过哪些索引</h4><h5 id=\"索引的作用\"><a href=\"#索引的作用\" class=\"headerlink\" title=\"索引的作用\"></a><strong>索引的作用</strong></h5><p>相当于书的目录，是一种可以用于快速查询和检索数据的数据结构，可以看成是一种排序好的数据结构。</p>\n<h5 id=\"优缺点：\"><a href=\"#优缺点：\" class=\"headerlink\" title=\"优缺点：\"></a><strong>优缺点</strong>：</h5><p>优点：可以加快数据的检索速度，主要是大大减少检索的数据量。通过唯一性索引，可以保证数据库表中的每一行数据的唯一性。</p>\n<p>缺点：从时间层面讲：创建和维护索引需要耗费时间，并且对表中的数据进行增删改的时候，如果存在索引，那么索引也需要动态修改，一定程度上会减低SQL的执行效率。空间上：索引也需要文件进行存储，耗费一定的空间。</p>\n<h5 id=\"索引的数据结构类型\"><a href=\"#索引的数据结构类型\" class=\"headerlink\" title=\"索引的数据结构类型\"></a>索引的数据结构类型</h5><p><strong>哈希索引：</strong>精确匹配索引所有列的查询数据，对于每一行数据，存储引擎针对所有索引列计算一个哈希码。为什么不使用这个，主要是因为hash索引不支持顺序和范围查询，只适合等值查询。</p>\n<p><strong>B-Tree和B+Tree索引的区别</strong></p>\n<ol>\n<li>B树的所有节点都会存放key和data，而B+数只有叶子节点存放key和data，其他内节点只存放key。</li>\n<li>B树的叶子节点都是独立的，而B+树的叶子结点有一条指向相邻叶子结点的引用，更加方便扫库</li>\n<li>B树进行范围查询，需要对树进行中序遍历，直到找到查找的上限，而B+树的范围查询，只需要遍历叶子结点组成的链表即可。</li>\n</ol>\n<p>综上所述，B+具备更稳定的查询效率，更低的IO次数和更适合范围查询等优势而广泛应用。</p>\n<p><strong>主键索引</strong>，一张表中只能有一个主键，并且主键不能为null，不能重复，在mysql的InnoDB表中，如果没有显示指定表的主键时，InnoDB会自动先检查表中是否有唯一索引且不允许存在null的字段，如果有，则选择该字段作为主键索引，否则会自动创建一个6Byte的自增主键</p>\n<p><strong>二级索引</strong>：普通索引，前缀索引，全文索引</p>\n<h4 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h4><p>使用多个字段同时建立一个索引，叫做联合索引，在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序进行使用，否则可能无法命中。</p>\n<h5 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a>索引失效</h5><p>在进行查询时</p>\n<ol>\n<li>遵循最左匹配原则</li>\n<li>同时遇到范围查询(&gt;、&lt;、between、like)就会停止匹配</li>\n<li>最左缀匹配原则的最重要的就是 第一个字段</li>\n<li>不推荐 select *<ol>\n<li>增加查询分析器解析成本。</li>\n<li>增减字段容易与 resultMap 配置不一致</li>\n<li>无用字段增加网络 消耗，尤其是 text 类型的字段。</li>\n<li>我们使用 B&#x3D;1 会走索引 但是 与直接查询索引字段不同 使用<code>SELECT*</code>,获取了不需要的数据，则首先通过辅助索引过滤数据，然后再通过聚集索引获取所有的列，这就多了一次 b+树查询，速度必然会慢很多，减少使用 select * 就是降低回表带来的损耗。</li>\n</ol>\n</li>\n</ol>\n<p>假如我们建立一个（a，b，c）的索引面，a，b，c在查询时的顺序可以任意调整</p>\n<p>例如查询(a,b)会走索引，（a，c）（c，a）也会走索引</p>\n<p>但是 (b,c),(c,b)之类的就不会走索引。</p>\n<p><strong>总结</strong></p>\n<ul>\n<li><p>select * 可能会走索引，不一定会造成索引失效，造成索引失效的大概率原因是where条件范围太广</p>\n</li>\n<li><p>**范围查询(&gt;、&lt;、between、like)**，范围查找有概率索引失效但是在特定的情况下会生效 范围小就会使用 也可以理解为 返回结果集小就会使用索引</p>\n</li>\n<li><p>创建了组合索引，但查询条件未遵循最左匹配原则;</p>\n</li>\n<li><p>在索引列上进行计算、函数、类型转换等操作;</p>\n</li>\n</ul>\n<p>建立索引语句</p>\n<p><code>DROP TABLE IF EXISTS student;</code><br><code>CREATE TABLE student (</code><br> <code>id int(11) NOT NULL AUTO_INCREMENT,</code><br> <code>sname varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</code><br> <code>s_code int(100) NULL DEFAULT NULL,</code><br> <code>address varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</code><br> <code>height double NULL DEFAULT NULL,</code><br> <code>classid int(11) NULL DEFAULT NULL,</code><br> <code>create_time datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),</code><br> <code>PRIMARY KEY (id) USING BTREE,</code><br> <code>INDEX 普通索引(height) USING BTREE,</code><br> <code>INDEX 联合索引(sname, s_code, address) USING BTREE</code><br><code>) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</code></p>\n<h3 id=\"二、事务\"><a href=\"#二、事务\" class=\"headerlink\" title=\"二、事务\"></a>二、事务</h3><h4 id=\"事务的特性\"><a href=\"#事务的特性\" class=\"headerlink\" title=\"事务的特性\"></a>事务的特性</h4><ol>\n<li>原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，在事务执行过程中发生错误，会被回滚到事物开始前的状态</li>\n<li>一致性：事务执行的结果必须是使数据库从一个一致性状态变化到另一个一致性状。</li>\n<li>隔离性：一个事务的执行不能被其他事务所干扰。</li>\n<li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。<ul>\n<li>持久性是通过 redo log （重做日志）来保证的；</li>\n<li>原子性是通过 undo log（回滚日志） 来保证的；</li>\n<li>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；</li>\n<li>一致性则是通过持久性+原子性+隔离性来保证；</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h4><ul>\n<li>脏读：读取到其他事务未提交的数据</li>\n<li>不可重复读：前后读取的数据不一致</li>\n<li>幻读：前后读取的记录数不一致</li>\n</ul>\n<p>针对上面几种现象，SQL标准定义了四种隔离级别来规避这些现象</p>\n<ol>\n<li>读未提交：所有事务均可看到其他事务未提交的执行结果，会导致上面三种现象的发生，因此很少应用。</li>\n<li>读已提交：一个事务只能看到其他已经提交的事务所对数据做出的改变，这个级别杜绝了脏读现象，但避免不了不可重复读和幻读</li>\n<li>可重复读：这个是Mysql InnoDB的默认事务隔离级别，指的是一个事务执行过程中所看到的数据，一直跟这个事务启动时看到的数据是一致的。可以解决脏读和不可重复读现象，但仍然可能发生幻读。</li>\n<li>串行化：会对记录加上读写锁，在多个事务对这条记录进行读写操作时，后访问的事务必须等待前一个事务执行完成，才能继续执行。在这个级别，可能会导致大量的超时现象和锁的竞争。</li>\n</ol>\n<h4 id=\"如何避免幻读现象\"><a href=\"#如何避免幻读现象\" class=\"headerlink\" title=\"如何避免幻读现象\"></a>如何避免幻读现象</h4><p>针对快照读（普通的 select 语句）：通过<strong>（MVCC）多版本并发控制实现</strong>的，开始事务后，在执行第一个查询语句后，会创建一个 Read View，后续的查询语句可以通过这个 Read View在 undo log 版本中找到事物开始时的数据，就保证了整个事务的过程中每次查询的数据都是一致的。即使中途有其他事务插入了新纪录，也是查询不出来的，很好地避免了幻读问题的发生。</p>\n<p>针对当前读（比如 update、insert、delete，这些语句），通过<strong>记录锁+间隙锁</strong>的方式解决欢度，当执行select … for update 语句时候，会加上记录锁和间隙锁，如果有其他事务在这时插入一条记录，会被阻塞，无法插入成功，能够避免幻读</p>\n<h3 id=\"三、日志\"><a href=\"#三、日志\" class=\"headerlink\" title=\"三、日志\"></a>三、日志</h3><p>更新语句的流程中会涉及到的三种日志：</p>\n<ol>\n<li><p>undo log（回滚日志）：是InnoDB存储引擎层生成的日志，实现了事务的原子性，主要用于事务回滚和MVCC（多版本并发控制）</p>\n</li>\n<li><p>redo log（重做日志）：是InnoDB存储引擎层生成的日志，实现了事务中的持久性，主要用于掉电等故障的恢复</p>\n</li>\n<li><p>binlog（归档日志）：是Server层生成的日志，主要用于数据备份和主从复制。</p>\n</li>\n</ol>\n<h5 id=\"1、undo-log（回滚日志）\"><a href=\"#1、undo-log（回滚日志）\" class=\"headerlink\" title=\"1、undo log（回滚日志）\"></a>1、undo log（回滚日志）</h5><p>每当对一条记录进行增删改操作时，需要把回滚时需要的信息记录到 undo log 里，比如：</p>\n<ul>\n<li>在<strong>插入</strong>一条记录时，需要记录主键 id ，回滚时根据 id 删除记录即可</li>\n<li>在<strong>删除</strong>一条记录时，需要将该记录中的所有内容都记录下来，回滚时再把由这些内容组成的记录插入到表中即可</li>\n<li>在<strong>更新</strong>一条记录时，也是需要记录整列的内容，然后才能在回滚时更新为旧数据即可</li>\n</ul>\n<h5 id=\"1-1、undo-log-的格式\"><a href=\"#1-1、undo-log-的格式\" class=\"headerlink\" title=\"1.1、undo log 的格式\"></a>1.1、undo log 的格式</h5><p>以更新操作为例，每一次更新操作产生的undo log都由一个 roll_pointer 指针和一个 trx_id事务id构成</p>\n<ul>\n<li>通过事务id可以知道该条记录是由哪个事务修改的。</li>\n<li>通过指针可以将这个 undo log 串成一个链表，称为版本链。</li>\n</ul>\n<h5 id=\"1-2、如何实现MVCC（多版本并发控制）\"><a href=\"#1-2、如何实现MVCC（多版本并发控制）\" class=\"headerlink\" title=\"1.2、如何实现MVCC（多版本并发控制）\"></a>1.2、如何实现MVCC（多版本并发控制）</h5><p>通过 Read View 里面的字段和undo log 记录中的 事务id（trx_id），roll_pointer指针进行对比，找到满足其条件的记录，从而控制并发事务访问同一条记录的行为。</p>\n<h5 id=\"1-3、缓冲池-Buffer-Pool\"><a href=\"#1-3、缓冲池-Buffer-Pool\" class=\"headerlink\" title=\"1.3、缓冲池(Buffer Pool)\"></a>1.3、缓冲池(Buffer Pool)</h5><p>mysql的数据都是存放在磁盘中的，如果我们要更新一条数据，需要将其从磁盘中读出来，在内存中进行修改之后，先缓存起来，并不会直接写回磁盘，会等待合适时机再写回。</p>\n<p>为了缓存这些数据，mysql设计了一个缓冲池(Buffer Pool)，来提高数据库的读写性能。</p>\n<ul>\n<li>当读取数据时，如果数据存在于缓冲池中，客户端会直接读取到缓冲池中的数据，否则再去磁盘读取。</li>\n<li>当修改数据时，如果数据存在于缓冲池中，那么直接修改缓冲池中的数据所在的页，然后将这个页设置为脏页（就是该页的内存数据与磁盘中的数据不一致），为了减少磁盘IO，不会立即将脏页写入磁盘，后续由后台的其他线程选择合适时机将脏页写入磁盘。</li>\n<li>缓冲池中处理缓存数据页和索引页，还会缓存Undo 页（存放Undo log的），插入缓存，自适应哈希缓存，锁信息等等。</li>\n</ul>\n<h4 id=\"2、redo-log（重做日志）\"><a href=\"#2、redo-log（重做日志）\" class=\"headerlink\" title=\"2、redo log（重做日志）\"></a>2、redo log（重做日志）</h4><p>redo log 是物理日志，主要是用于记录某个数据页做了什么样的修改的操作。在执行事务的过程中，产生的redo日志文件是顺序写入磁盘的，写入 redo log 的方式使用了追加操作， 使用的是顺序IO，如果没有这个日志，我们需要把缓冲池中的修改写入磁盘需要使用随机IO，性能低下，并且日志的空间占用很小，刷盘更快。之后如果数据库发生崩溃，可以根据redo log进行恢复，保证了事务四大特性中的持久性。</p>\n<p>redo log 也不是直接写入磁盘的，它也有自己的缓存——redo log buffer</p>\n<h5 id=\"redo-log-刷盘的时机\"><a href=\"#redo-log-刷盘的时机\" class=\"headerlink\" title=\"redo log 刷盘的时机\"></a>redo log 刷盘的时机</h5><ol>\n<li>Mysql正常关闭</li>\n<li>当redo log buffer 中的记录写入量大于 redo log buffer 内存空间的一半时</li>\n<li>InnoDB的后台线程每隔 1 秒，将redo log buffer 持久化到磁盘</li>\n<li>每次事务提交时，这个策略可以由innodb_flush_log_at_trx_commit 参数控制，默认是1，就是每次事务提交时，都会将 redo log buffer 持久化到磁盘中。</li>\n</ol>\n<h4 id=\"3、bin-log（归档日志）\"><a href=\"#3、bin-log（归档日志）\" class=\"headerlink\" title=\"3、bin log（归档日志）\"></a>3、bin log（归档日志）</h4><p>与redo log 类似，记录了所有数据库表结构变更和表数据修改的日志，不记录查询类的操作</p>\n<h4 id=\"4、redo-log-和-bin-log-的区别\"><a href=\"#4、redo-log-和-bin-log-的区别\" class=\"headerlink\" title=\"4、redo log 和 bin log 的区别\"></a>4、redo log 和 bin log 的区别</h4><ul>\n<li>适用对象不同，binlog是Mysql Server 层实现的日志，所有存储引擎都可以使用。redo log 是InnoDB 存储引擎实现的日志</li>\n<li>文件格式不同</li>\n<li>写入方式不同<ul>\n<li>binlog是追加写，写满一个文件，就开一个新的继续写，不会覆盖一起的日志，保存的是全量的日志</li>\n<li>redo log 是循环写，日志空间大小是固定的，全部写满就从头开始。</li>\n<li>因此，如果不小心将数据库数据删除了，应该考虑使用binlog进行恢复</li>\n</ul>\n</li>\n<li>用途不同，bin log主要用于备份恢复，主从复制，redo log用于掉电等故障的恢复</li>\n</ul>\n<h4 id=\"5、主从复制的实现\"><a href=\"#5、主从复制的实现\" class=\"headerlink\" title=\"5、主从复制的实现\"></a>5、主从复制的实现</h4><ol>\n<li>主库写入Bin log，MySQL 主库在收到客户端提交事务的请求之后，会先写入 binlog，再提交事务，更新存储引擎中的数据，</li>\n<li>从库会创建一个专门的 I&#x2F;O 线程，来接收主库的 binlog 日志，再把 binlog 信息写入 暂存日志里，再返回给主库“复制成功”的响应。</li>\n<li>从库会创建一个用于回放 binlog 的线程，去读 暂存日志，然后回放 binlog 更新存储引擎中的数据，最终实现主从的数据一致性。</li>\n</ol>\n<p>完成主从复制之后，可以写数据只写主库，读数据只读从库，减少锁资源的竞争，也不会影响读请求的执行，默认是异步复制</p>\n<h4 id=\"6、bin-log-的刷盘时机\"><a href=\"#6、bin-log-的刷盘时机\" class=\"headerlink\" title=\"6、bin log 的刷盘时机\"></a>6、bin log 的刷盘时机</h4><p>用来控制刷盘频率的参数，默认sync_binlog &#x3D; 0也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。因为一旦主机发生异常重启，还没持久化到磁盘的数据就会丢失。</p>\n<h3 id=\"四、锁\"><a href=\"#四、锁\" class=\"headerlink\" title=\"四、锁\"></a>四、锁</h3><p>根据类型：可分为：共享锁（读锁），排它锁（写锁）</p>\n<p>根据加锁的范围，可以分为<strong>全局锁、表级锁、行级锁</strong></p>\n<h4 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h4><p>使用全局锁：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\">flush <span class=\"token keyword\">tables</span> <span class=\"token keyword\">with</span> <span class=\"token keyword\">read</span> <span class=\"token keyword\">lock</span></code></pre>\n\n<p>执行之后，整个数据库都处于只读状态了，不管是对数据的增删改，或者是对表结构的更改操作都会被阻塞</p>\n<p>释放：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">unlock</span> <span class=\"token keyword\">tables</span></code></pre>\n\n<h5 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h5><p>主要用于做<strong>全库逻辑备份</strong>，防止出现备份文件的数据与预期的不同。</p>\n<p>如果备份时间过长，可能会导致业务停滞</p>\n<h5 id=\"如何避免其影响业务\"><a href=\"#如何避免其影响业务\" class=\"headerlink\" title=\"如何避免其影响业务\"></a>如何避免其影响业务</h5><p>对于使用InnoDB存储引擎的可重复读隔离级别的情况，在备份数据库之前先开启事务，会创建Read View，然后整个事务执行期间都使用这个Read View去进行数据的更新操作等。</p>\n<h4 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h4><p>表锁，元数据锁，意向锁，AUTO-INC锁</p>\n<p>表锁：对整个表加锁，不仅会限制其他线程的读写，也会限制本线程的读写操作。尽量避免在InnoDB引擎的表中使用表级锁，因为表锁的颗粒度太大，会影响并发性能，可以使用颗粒度更细的行级锁。</p>\n<h4 id=\"行级锁\"><a href=\"#行级锁\" class=\"headerlink\" title=\"行级锁\"></a>行级锁</h4><p>InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。</p>\n<ol>\n<li>记录锁，仅仅把一条记录锁上</li>\n<li>间隙锁，锁定一个范围，但不包含记录本身</li>\n<li>1+2，锁定一个范围，并且锁定记录本身。</li>\n</ol>\n",
            "tags": [
                "MySQL"
            ]
        }
    ]
}