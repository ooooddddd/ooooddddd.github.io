{
    "version": "https://jsonfeed.org/version/1",
    "title": "橙熟 • All posts by \"项目\" tag",
    "description": "我的笔记",
    "home_page_url": "https://ooooddddd.github.io",
    "items": [
        {
            "id": "https://ooooddddd.github.io/2023/12/21/API%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://ooooddddd.github.io/2023/12/21/API%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "API开放平台学习笔记",
            "date_published": "2023-12-21T08:04:14.000Z",
            "content_html": "<h1 id=\"一-项目业务流程\"><a class=\"markdownIt-Anchor\" href=\"#一-项目业务流程\">#</a> 一、项目业务流程</h1>\n<h2 id=\"体验地址http1207812874userlogin\"><a class=\"markdownIt-Anchor\" href=\"#体验地址http1207812874userlogin\">#</a> 体验地址：<a href=\"http://120.78.128.74/user/login\">http://120.78.128.74/user/login</a></h2>\n<h2 id=\"5个子系统\"><a class=\"markdownIt-Anchor\" href=\"#5个子系统\">#</a> 5 个子系统</h2>\n<h3 id=\"1模拟接口系统\"><a class=\"markdownIt-Anchor\" href=\"#1模拟接口系统\">#</a> 1. 模拟接口系统</h3>\n<h3 id=\"2后台管理系统\"><a class=\"markdownIt-Anchor\" href=\"#2后台管理系统\">#</a> 2. 后台管理系统</h3>\n<h3 id=\"3用户前台系统\"><a class=\"markdownIt-Anchor\" href=\"#3用户前台系统\">#</a> 3. 用户前台系统</h3>\n<h3 id=\"4api网关系统\"><a class=\"markdownIt-Anchor\" href=\"#4api网关系统\">#</a> 4.API 网关系统</h3>\n<h3 id=\"5第三方调用sdk系统\"><a class=\"markdownIt-Anchor\" href=\"#5第三方调用sdk系统\">#</a> 5. 第三方调用 SDK 系统</h3>\n<h1 id=\"二-前端项目初始化\"><a class=\"markdownIt-Anchor\" href=\"#二-前端项目初始化\">#</a> 二、前端项目初始化</h1>\n<h2 id=\"1-搭建脚手架\"><a class=\"markdownIt-Anchor\" href=\"#1-搭建脚手架\">#</a> 1、搭建脚手架</h2>\n<p>Ant Design Pro：<a href=\"https://pro.ant.design/zh-CN/\">官方文档</a></p>\n<h2 id=\"2-选择-umi-4\"><a class=\"markdownIt-Anchor\" href=\"#2-选择-umi-4\">#</a> 2、选择 umi 4</h2>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/1.png\" alt=\"\"></p>\n<h2 id=\"3-node版本\"><a class=\"markdownIt-Anchor\" href=\"#3-node版本\">#</a> 3、node 版本</h2>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/2.png\" alt=\"\"></p>\n<h3 id=\"4-打开项目\"><a class=\"markdownIt-Anchor\" href=\"#4-打开项目\">#</a> 4、打开项目</h3>\n<p>打开 webstorm 的终端，输入 yarn 安装依赖</p>\n<p>然后找到 package.json 中的 dev，运行项目，查看是否成功运行</p>\n<h2 id=\"5-项目瘦身\"><a class=\"markdownIt-Anchor\" href=\"#5-项目瘦身\">#</a> 5、项目瘦身</h2>\n<h3 id=\"51移除国际化\"><a class=\"markdownIt-Anchor\" href=\"#51移除国际化\">#</a> 5.1 移除国际化</h3>\n<p>在 package.json 中找到 i18n-remove，运行即可，此时遇到报错</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/3.png\" alt=\"\"></p>\n<p>在终端执行以下命令：</p>\n<p><code>yarn add eslint-config-prettier --dev yarn add eslint-plugin-unicorn --dev</code></p>\n<p>同时，需要注释掉 <code>项目目录：node_modules/@umijs/lint/dist/config/eslint/index.js</code>  文件中的 <code>es2022:true</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/4.png\" alt=\"image-20231207161536935\"></p>\n<p>之后再次执行 <code>i18n-remove</code>  即可，然后将 <code>locales目录</code> 手动删除</p>\n<p><strong>每次移除某些代码后都要重新 start 一下，防止删除有用的代码了</strong></p>\n<h1 id=\"三-后端代码初始化orangeapi-backend\"><a class=\"markdownIt-Anchor\" href=\"#三-后端代码初始化orangeapi-backend\">#</a> 三、后端代码初始化 (orangeApi-backend)</h1>\n<h2 id=\"1-使用鱼皮提供的模板\"><a class=\"markdownIt-Anchor\" href=\"#1-使用鱼皮提供的模板\">#</a> 1、使用鱼皮提供的模板</h2>\n<p>地址：<a href=\"http://gitlab.code-nav.cn/root/springboot-init-old\">springboot-init-old 项目</a></p>\n<h3 id=\"11加载maven依赖\"><a class=\"markdownIt-Anchor\" href=\"#11加载maven依赖\">#</a> 1.1 加载 maven 依赖</h3>\n<p><strong>查找所有 maven 包的仓库：<a href=\"https://mvnrepository.com/\">地址</a></strong></p>\n<h3 id=\"12连接数据库\"><a class=\"markdownIt-Anchor\" href=\"#12连接数据库\">#</a> 1.2 连接数据库</h3>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/5.png\" alt=\"image-20231207162553113\"></p>\n<h3 id=\"13数据库表设计\"><a class=\"markdownIt-Anchor\" href=\"#13数据库表设计\">#</a> 1.3 数据库表设计</h3>\n<p>用户表：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 用户表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> <span class=\"token keyword\">user</span>\n<span class=\"token punctuation\">(</span>\n    id           <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'id'</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n    userName     <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>                           <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户昵称'</span><span class=\"token punctuation\">,</span>\n    userAccount  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>                           <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'账号'</span><span class=\"token punctuation\">,</span>\n    userAvatar   <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>                          <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户头像'</span><span class=\"token punctuation\">,</span>\n    gender       <span class=\"token keyword\">tinyint</span>                                <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span>\n    userRole     <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'user'</span>            <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户角色：user / admin'</span><span class=\"token punctuation\">,</span>\n    userPassword <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                           <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">,</span>\n    createTime   <span class=\"token keyword\">datetime</span>     <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n    updateTime   <span class=\"token keyword\">datetime</span>     <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n    isDelete     <span class=\"token keyword\">tinyint</span>      <span class=\"token keyword\">default</span> <span class=\"token number\">0</span>                 <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'是否删除'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">constraint</span> uni_userAccount\n        <span class=\"token keyword\">unique</span> <span class=\"token punctuation\">(</span>userAccount<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>帖子表：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 帖子表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> post\n<span class=\"token punctuation\">(</span>\n    id            <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'id'</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n    age           <span class=\"token keyword\">int</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span>\n    gender        <span class=\"token keyword\">tinyint</span>  <span class=\"token keyword\">default</span> <span class=\"token number\">0</span>                 <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'性别（0-男, 1-女）'</span><span class=\"token punctuation\">,</span>\n    education     <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                       <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'学历'</span><span class=\"token punctuation\">,</span>\n    place         <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                       <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'地点'</span><span class=\"token punctuation\">,</span>\n    job           <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                       <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'职业'</span><span class=\"token punctuation\">,</span>\n    contact       <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                       <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'联系方式'</span><span class=\"token punctuation\">,</span>\n    loveExp       <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                       <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'感情经历'</span><span class=\"token punctuation\">,</span>\n    content       <span class=\"token keyword\">text</span>                               <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'内容（个人介绍）'</span><span class=\"token punctuation\">,</span>\n    photo         <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>                      <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'照片地址'</span><span class=\"token punctuation\">,</span>\n    reviewStatus  <span class=\"token keyword\">int</span>      <span class=\"token keyword\">default</span> <span class=\"token number\">0</span>                 <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'状态（0-待审核, 1-通过, 2-拒绝）'</span><span class=\"token punctuation\">,</span>\n    reviewMessage <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                       <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'审核信息'</span><span class=\"token punctuation\">,</span>\n    viewNum       <span class=\"token keyword\">int</span>                                <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'浏览数'</span><span class=\"token punctuation\">,</span>\n    thumbNum      <span class=\"token keyword\">int</span>                                <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'点赞数'</span><span class=\"token punctuation\">,</span>\n    userId        <span class=\"token keyword\">bigint</span>                             <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'创建用户 id'</span><span class=\"token punctuation\">,</span>\n    createTime    <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n    updateTime    <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n    isDelete      <span class=\"token keyword\">tinyint</span>  <span class=\"token keyword\">default</span> <span class=\"token number\">0</span>                 <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'是否删除'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'帖子'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>接口表：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 接口管理表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> orange_api<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>interface_info<span class=\"token punctuation\">`</span></span>\n<span class=\"token punctuation\">(</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'主键'</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'名称'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'描述'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>url<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'接口地址'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>requestHeader<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'请求头'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>responseHeader<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'响应头'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'接口状态（0-关闭，1-开启）'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>method<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'请求类型'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>userId<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'创建用户'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>isDeleted<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">tinyint</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'是否删除(0-未删, 1-已删)'</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'接口管理表'</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"14利用redis存储-session\"><a class=\"markdownIt-Anchor\" href=\"#14利用redis存储-session\">#</a> 1.4 利用 redis 存储 Session</h3>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">session</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">86400</span>\n  <span class=\"token key atrule\">store-type</span><span class=\"token punctuation\">:</span> redis</code></pre>\n<h3 id=\"15后端项目启动\"><a class=\"markdownIt-Anchor\" href=\"#15后端项目启动\">#</a> 1.5 后端项目启动</h3>\n<p>直接访问：<a href=\"http://localhost:7529/api/doc.html#/home%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E7%8E%B0%E6%88%90%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%EF%BC%8C%E5%90%8C%E6%97%B6%E5%8F%AF%E4%BB%A5%E5%9C%A8%E8%BF%99%E9%87%8C%E7%9B%B4%E6%8E%A5%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95\">http://localhost:7529/api/doc.html#/home，即可看到现成的接口文档，同时可以在这里直接对接口进行调试</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/6.png\" alt=\"image-20231207200919971\"></p>\n<h2 id=\"2-使用mybatisx插件生成代码\"><a class=\"markdownIt-Anchor\" href=\"#2-使用mybatisx插件生成代码\">#</a> 2、使用 MyBatisX 插件生成代码</h2>\n<h3 id=\"21mybatisx的使用\"><a class=\"markdownIt-Anchor\" href=\"#21mybatisx的使用\">#</a> 2.1MyBatisX 的使用</h3>\n<p>右键  <code>interface_info</code>  表，选择 <code>MyBatisX-Generator</code> 。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/7.png\" alt=\"image-20231207201451332\"></p>\n<p>点击 <code>next</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/8.png\" alt=\"image-20231207201550431\"></p>\n<p>选择相关配置，之后点击 <code>Finish</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/9.png\" alt=\"image-20231207201731884\"></p>\n<p>将 generator 文件中相关文件复制到 project 目录下，然后再修改 mapper.xml 文件</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/10.png\" alt=\"image-20231207202234533\"></p>\n<h3 id=\"22controller层编写\"><a class=\"markdownIt-Anchor\" href=\"#22controller层编写\">#</a> 2.2controller 层编写</h3>\n<h4 id=\"221复制-粘贴\"><a class=\"markdownIt-Anchor\" href=\"#221复制-粘贴\">#</a> 2.2.1 复制 粘贴</h4>\n<p>现在  <code>mapper</code> 、 <code>service</code>  层有了，还缺少一个  <code>controller</code>  层</p>\n<p>复制一个  <code>PostController</code>  层过来，改名为  <code>InterfaceInfoController</code></p>\n<p>然后  <code>ctrl+R</code>  将 <code>post</code>  全部替换成  <code>interfaceInfo</code> ，将 <code>Post</code>  全部替换为 <code>InterfaceInfo</code> ，记得区分大小写</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/11.png\" alt=\"image-20231207203640747\"></p>\n<p>然后需要将 <code>InterfaceInfoMapping</code>  替换成  <code>PostMapping</code></p>\n<h4 id=\"222编写需要前端传递的dto对象\"><a class=\"markdownIt-Anchor\" href=\"#222编写需要前端传递的dto对象\">#</a> 2.2.2 编写需要前端传递的 DTO 对象</h4>\n<p>添加接口需要传递的对象 <code>InterfaceInfoAddRequest</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/12.png\" alt=\"image-20231207203854025\"></p>\n<p>同理，还有 <code>InterfaceInfoQueryRequest</code> 、 <code>InterfaceInfoUpdateRequest</code></p>\n<p>这些对象类中填写不同的字段，需要前端传递哪些字段就写哪些字段即可。</p>\n<h4 id=\"223为什么写多个对象\"><a class=\"markdownIt-Anchor\" href=\"#223为什么写多个对象\">#</a> 2.2.3 为什么写多个对象</h4>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/13.png\" alt=\"image-20231207204058013\"></p>\n<p><strong>在  <code>isDelete</code>  字段上添加  <code>@TableLogic</code>  注解，进行逻辑删除</strong></p>\n<h4 id=\"224在用户第一次创建接口对象时需要校验几个字段不为空\"><a class=\"markdownIt-Anchor\" href=\"#224在用户第一次创建接口对象时需要校验几个字段不为空\">#</a> 2.2.4 在用户第一次创建接口对象时，需要校验几个字段不为空</h4>\n<p>传入的 ** 第二个参数 add，** 可以实现校验创建时校验哪几个字段，校验更新时又校验其他不同的字段，这个方法的第二个参数设计的很好</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validInterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterfaceInfo</span> interfaceInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interfaceInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> description <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> requestHeader <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> responseHeader <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">// 创建时，所有参数必须非空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnyBlank</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> requestHeader<span class=\"token punctuation\">,</span> responseHeader<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyNull</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"内容过长\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h1 id=\"三-前端开发\"><a class=\"markdownIt-Anchor\" href=\"#三-前端开发\">#</a> 三、前端开发</h1>\n<h2 id=\"1-前端模板优化\"><a class=\"markdownIt-Anchor\" href=\"#1-前端模板优化\">#</a> 1、前端模板优化</h2>\n<h2 id=\"11部分前端目录介绍\"><a class=\"markdownIt-Anchor\" href=\"#11部分前端目录介绍\">#</a> 1.1 部分前端目录介绍</h2>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/15.png\" alt=\"image-20231207204923849\"></p>\n<h2 id=\"2-前端代码自动生成\"><a class=\"markdownIt-Anchor\" href=\"#2-前端代码自动生成\">#</a> 2、前端代码自动生成</h2>\n<p>使用框架自带的 openapi 插件，可以帮助我们实现接口的自动生成，在 <code>config.ts</code>  中找到 <code>openapi</code>  板块</p>\n<p>修改 json 文档的地址，以及项目名称即可</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/16.png\" alt=\"image-20231208090956506\"></p>\n<p>然后打开 <code>package.json</code> ，找到 <code>openapi</code>  运行</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/17.png\" alt=\"image-20231208091149239\"></p>\n<p>然后在 <code>service目录</code> 下就会生成一个 <code>orangeApi-backend目录</code> ，里面自动生成了调用后端指定接口的方法的代码</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/18.png\" alt=\"image-20231208091356952\"></p>\n<p>并且在 <code>typings.d.s文件</code> 中可以查看接口具体的请求参数类型</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/19.png\" alt=\"image-20231208091545145\"></p>\n<h3 id=\"21修改请求配置文件\"><a class=\"markdownIt-Anchor\" href=\"#21修改请求配置文件\">#</a> 2.1 修改请求配置文件</h3>\n<p>将 <code>requestErrorConfig.ts</code>  重命名为 <code>requestConfig.ts</code>  文件，同时进入该文件，将 <code>errorConfig</code>  修改为 <code>requestConfig</code> ，然后加上请求地址与 <code>cookie</code>  验证</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/20.png\" alt=\"image-20231208092113252\"></p>\n<h3 id=\"22前后端对接\"><a class=\"markdownIt-Anchor\" href=\"#22前后端对接\">#</a> 2.2 前后端对接</h3>\n<p>启动 <code>dev模式</code> ，然后访问 (<a href=\"http://localhost:8000/user/login\">http://localhost:8000/user/login</a>)，此时点击登录请求的接口地址不正确，需要去修改 <code>handleSubmit</code>  方法</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>UserLoginRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 登录</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">userLoginUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">...</span>values<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//检查返回的 res 对象中是否包含 data 属性，如果包含则表示登陆成功</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> defaultLoginSuccessMessage <span class=\"token operator\">=</span> <span class=\"token string\">'登录成功！'</span><span class=\"token punctuation\">;</span>\n      message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>defaultLoginSuccessMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//创建一个新的 URL 对象，并获取当前 windows.location.href 的查询参数</span>\n      <span class=\"token keyword\">const</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//设置一个延迟100毫秒的定时器作用：在调用 setInitialState 后，状态可能并没有立即更新，</span>\n      <span class=\"token comment\">// 而执行 history.push，将导航到一个依赖新状态的页面。所以加一个延迟确保 setInitialState</span>\n      <span class=\"token comment\">// 在 history.push 之前完成</span>\n      <span class=\"token comment\">//定时器触发后，导航到重定向URL，如果不存在重定向的URL，则导航到根路径</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//将用户重定向到 ‘redirect’ 参数指定的 URL，如果该 redirect 参数不存在，则重定向到首页</span>\n        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>urlParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redirect'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        loginUser<span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>data\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<p>然后再将该页面生成的一些类型修改为我们自己的  <code>LoginParams</code>  =&gt;  <code>UserLoginRequest</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/21.png\" alt=\"image-20231208095727147\"></p>\n<p>通常前端从后台加载用户信息后，会将数据保存到全局状态中。先找到 <code>typings.d.ts</code> ，定义全局状态类型（ <code>InitialState</code> ）</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/22.png\" alt=\"image-20231208100247021\"></p>\n<p>然后找到全局入口文件（ <code>app.tsx</code> ），修改  <code>getInitialState</code>  方法</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>InitialState<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//当页面首次加载时，获取全局保存的信息，比如用户登录信息</span>\n    <span class=\"token keyword\">const</span> state<span class=\"token operator\">:</span> InitialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//初始化</span>\n      loginUser<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//调用 getLoginUserUsingGet() 函数，尝试获取已经登陆的用户信息</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getLoginUserUsingGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//如果后端获取的用户信息不为空，就将获取到的用户数据赋值给 state.loginUser</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        state<span class=\"token punctuation\">.</span>loginUser <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 如果获取用户信息的过程发生错误， 就把页面重定向到登录页面</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>loginPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//返回修改后的状态</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>然后需要将该页面的  <code>currentUser</code>  改为  <code>loginUser</code> ，把  <code>name</code>  改为  <code>userName</code> ， <code>avatar</code>  改为  <code>userAvatar</code></p>\n<h3 id=\"23接口管理\"><a class=\"markdownIt-Anchor\" href=\"#23接口管理\">#</a> 2.3 接口管理</h3>\n<p>前端权限管理，找到  <code>access.ts</code> ，修改一下，取全局初始化状态 (InitialState) 的 loginUser，根据当前登录用户判断它是否有 管理员权限 or 用户权限。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/23.png\" alt=\"image-20231208103128894\"></p>\n<h3 id=\"24-改造新页面\"><a class=\"markdownIt-Anchor\" href=\"#24-改造新页面\">#</a> 2.4 改造新页面</h3>\n<p><strong>使用了 ProTable 表格，定义了表格应该有的列，然后编写了请求方法并修改了请求后台的接口。这些接口并不是我们手动编写的，而是自动生成的。</strong></p>\n<h4 id=\"241显示所有接口列表\"><a class=\"markdownIt-Anchor\" href=\"#241显示所有接口列表\">#</a> 2.4.1 显示所有接口列表</h4>\n<p>首先，我们使用  <code>ProColumns</code>  定义所有我们需要展示的字段</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> columns<span class=\"token operator\">:</span> ProColumns<span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'接口名称'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n    formItemProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'描述'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'textarea'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'请求方法'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'method'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span>  <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span>  <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'请求头'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'requestHeader'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'textarea'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'响应头'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'responseHeader'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'textarea'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'状态'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span>\n    hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    valueEnum<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'关闭'</span><span class=\"token punctuation\">,</span>\n        status<span class=\"token operator\">:</span> <span class=\"token string\">'Default'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'开启'</span><span class=\"token punctuation\">,</span>\n        status<span class=\"token operator\">:</span> <span class=\"token string\">'Processing'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'create_time'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'dateTime'</span><span class=\"token punctuation\">,</span>\n    hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'update_time'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'dateTime'</span><span class=\"token punctuation\">,</span>\n    hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'操作'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'option'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'option'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n        <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>config<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">handleUpdateModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setCurrentRow</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        修改\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n        <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>config<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">handleRemove</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        删除\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>这些 id、接口名称、描述、请求方法等等与前端展示保持一致</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/24.png\" alt=\"image-20231208200405277\"></p>\n<p>此时前端已经能够接受到后端传来的数据了，只是没有展示出来，然后我们去到 <code>request</code>  里面查看它接收什么参数。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/25.png\" alt=\"image-20231208200712371\"></p>\n<p>将其复制过来</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">request<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> <span class=\"token constant\">U</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span>\n    pageSize<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    current<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    keyword<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> sort<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> SortOrder<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> filter<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre>\n<p>继续追进去看它的响应对象是什么，同样复制过来</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/26.png\" alt=\"image-20231208200937122\"></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\nsuccess<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\ntotal<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/27.png\" alt=\"image-20231208201113657\"></p>\n<p>最后调用自动生成的后端接口即可 <code>listInterfaceInfoUsingGet</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">listInterfaceInfoUsingGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span>params\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"242实现新建功能\"><a class=\"markdownIt-Anchor\" href=\"#242实现新建功能\">#</a> 2.4.2 实现新建功能</h4>\n<p>先来优化页面，比如管理业、欢迎页，没用到的都删掉</p>\n<p><code>routes.ts</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n    layout<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'登录'</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/user/login'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token string\">'./User/Login'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// &#123; path: '/welcome', name: '欢迎', icon: 'smile', component: './Welcome' &#125;,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'管理页'</span><span class=\"token punctuation\">,</span>\n    icon<span class=\"token operator\">:</span> <span class=\"token string\">'crown'</span><span class=\"token punctuation\">,</span>\n    access<span class=\"token operator\">:</span> <span class=\"token string\">'canAdmin'</span><span class=\"token punctuation\">,</span>\n    routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'接口管理'</span><span class=\"token punctuation\">,</span> icon<span class=\"token operator\">:</span> <span class=\"token string\">'table'</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin/interface_info'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token string\">'./InterfaceInfo'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// &#123; path: '/', redirect: '/welcome' &#125;,</span>\n  <span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> layout<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token string\">'./404'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>** 第一步：：** 创建 <code>CreateModal.tsx</code>  模态框，可以复用 <code>columns</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ProColumns<span class=\"token punctuation\">,</span> ProTable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ant-design/pro-components'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@umijs/max'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Modal <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//将之前定义的属性直接引用过来，方便复用</span>\n  columns<span class=\"token operator\">:</span> ProColumns<span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 用户点击取消按钮时触发</span>\n  <span class=\"token function-variable function\">onCancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 当用户提交表单时，将用户输入的数据作为参数传递给后台</span>\n  <span class=\"token function-variable function\">onSubmit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 模态框是否可见</span>\n  visible<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CreateModal<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 使用解构赋值获取 props 中的属性</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> visible<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">,</span> onCancel<span class=\"token punctuation\">,</span> onSubmit <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 创建一个Modal组件,通过visible属性控制其显示或隐藏,footer设置为null把表单项的'取消'和'确认'按钮去掉</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span> <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>visible<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">footer</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> onCancel<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个ProTable组件,设定它为表单类型,通过columns属性设置表格的列，提交表单时调用onSubmit函数 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProTable</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>columns<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          onSubmit<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> CreateModal<span class=\"token punctuation\">;</span></code></pre>\n<p>** 第二步：：** 现在我们把  <code>CreateModal.tsx</code>  引入到接口管理页，找到  <code>InterfaceInfo</code>  目录下的  <code>index.tsx</code> 。</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个 CreateModal 组件，用于在点击新增按钮时弹出 */</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CreateModal</span></span>\n  <span class=\"token attr-name\">columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span> columns<span class=\"token punctuation\">&#125;</span></span>\n  <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//点击取消按钮,将 handleModalOpen 设为 false 隐藏新增模态窗口</span>\n    <span class=\"token function\">handleModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n  <span class=\"token comment\">// 当用户点击提交按钮之后，调用handleAdd函数处理提交的数据，</span>\n  <span class=\"token comment\">// 去请求后端添加数据(这里的报错不用管,可能里面组件的属性和外层的不一致)</span>\n  <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleAdd</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n  <span class=\"token comment\">// 根据更新窗口的值决定模态窗口是否显示</span>\n  <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>createModalOpen<span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre>\n<p>然后创建、修改时间两个字段不允许用户进行修改，使用 <code>hindeInForm:true</code>  将其隐藏起来。</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'create_time'</span><span class=\"token punctuation\">,</span>\n  valueType<span class=\"token operator\">:</span> <span class=\"token string\">'dateTime'</span><span class=\"token punctuation\">,</span>\n  hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n  dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'update_time'</span><span class=\"token punctuation\">,</span>\n  valueType<span class=\"token operator\">:</span> <span class=\"token string\">'dateTime'</span><span class=\"token punctuation\">,</span>\n  hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></code></pre>\n<p>** 第三步：：** 修改接口调用方法</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * @en-US Add node\n * @zh-CN 添加节点\n * @param fields\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleAdd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>fields<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfoAddRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在添加'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">addInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">...</span>fields<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建成功！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">handleModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建失败，请重试！'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>** 第四步：：** 构造我们自己的响应拦截器</p>\n<p>找到  <code>requestConfig.ts</code> ，加一下校验，修改完成的如下</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> RequestOptions <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@@/plugin-request/request'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> RequestConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@umijs/max'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 与后端约定的响应数据格式</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseStructure</span> <span class=\"token punctuation\">&#123;</span>\n  success<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  errorCode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  errorMessage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * @name 错误处理\n * pro 自带的错误处理， 可以在这里做自己的改动\n * @doc https://umijs.org/docs/max/request#配置\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> requestConfig<span class=\"token operator\">:</span> RequestConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:7529/'</span><span class=\"token punctuation\">,</span>\n  withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 请求拦截器</span>\n  requestInterceptors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> RequestOptions<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 拦截请求配置，进行个性化处理。</span>\n      <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> config<span class=\"token operator\">?.</span>url<span class=\"token operator\">?.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?token = 123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 响应拦截器</span>\n  responseInterceptors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 拦截响应数据，进行个性化处理</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> response <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">as</span> ResponseStructure<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 当响应的状态码不为0，抛出错误</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 如果一切正常，返回原始的响应数据</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"242实现修改功能\"><a class=\"markdownIt-Anchor\" href=\"#242实现修改功能\">#</a> 2.4.2 实现修改功能</h4>\n<p>** 第一步：：** 创建 <code>UpdateModal.tsx</code>  模态框，可以复用 <code>columns</code></p>\n<p>相对于 <code>CreateModal</code>  多一个参数 <code>values</code> ，修改的时候需要把当前接口信息给带上</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ProColumns<span class=\"token punctuation\">,</span> ProFormInstance<span class=\"token punctuation\">,</span> ProTable<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ant-design/pro-components'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@umijs/max'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Modal <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  values<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">;</span>\n  columns<span class=\"token operator\">:</span> ProColumns<span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onCancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onSubmit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  visible<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> UpdateModal<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> values<span class=\"token punctuation\">,</span> visible<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">,</span> onCancel<span class=\"token punctuation\">,</span> onSubmit <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//定义一个引用变量，用于记录 values 的变化</span>\n  <span class=\"token keyword\">const</span> formRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ProFormInstance<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//一旦点击别条数据，values发生变化，调用该方法修改 values 的值</span>\n  <span class=\"token comment\">//useEffect: 监听某个变量的变化</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>formRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      formRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">setFieldsValue</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 创建一个Modal组件,通过visible属性控制其显示或隐藏,footer设置为null把表单项的'取消'和'确认'按钮去掉</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span> <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>visible<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">footer</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> onCancel<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个ProTable组件,设定它为表单类型,通过columns属性设置表格的列，提交表单时调用onSubmit函数 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProTable</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">formRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>formRef<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>columns<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">form</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n          initialValues<span class=\"token operator\">:</span> values\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          onSubmit<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> UpdateModal<span class=\"token punctuation\">;</span></code></pre>\n<p>** 第二步：：** 现在我们把  <code>UpdateModal.tsx</code>  引入到接口管理页，找到  <code>InterfaceInfo</code>  目录下的  <code>index.tsx</code> 。</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token operator\">&lt;</span>UpdateModal\n  <span class=\"token comment\">// 要将 columns 传递过来，不然修改模态框里面没有表单项</span>\n  columns<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>columns<span class=\"token punctuation\">&#125;</span>\n  onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> success <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">handleUpdate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">handleUpdateModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setCurrentRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>actionRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        actionRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n  onCancel<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleUpdateModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showDetail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setCurrentRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n  visible<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>updateModalOpen<span class=\"token punctuation\">&#125;</span>\n  values<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>currentRow <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<p>** 第三步：：** 然后调用修改接口的方法</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * @en-US Update node\n * @zh-CN 更新节点\n *\n * @param fields\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleUpdate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>fields<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfoUpdateRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//如果没有选择的行，则直接返回</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentRow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'修改中...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">updateInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      id<span class=\"token operator\">:</span> currentRow<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>fields\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'修改成功!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'操作失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>这里需要注意的是，因为 id 这个字段是作为 index 在前端显示的，在 columns 中，我们把 id 列的属性定义为了 index。这样定义的结果是，id 列不会出现在表单项里，也就不会被填入表单。</p>\n<p>因此需要单独去取出这个 id，在最上面定义了一个 <code>currentRow</code> ，利用它可以取到  <code>id</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentRow<span class=\"token punctuation\">,</span> setCurrentRow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"242实现删除功能\"><a class=\"markdownIt-Anchor\" href=\"#242实现删除功能\">#</a> 2.4.2 实现删除功能</h4>\n<p>因为删除只需要  <code>id</code>  字段即可，因此无需再去构建  <code>deleteModal</code>  表单</p>\n<p>** 第一步：：** 定义删除按钮</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n  <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>config<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleRemove</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  删除\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span></code></pre>\n<p>** 第二步：：** 编写删除节点接口</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n *  Delete node\n * @zh-CN 删除节点\n *\n * @param selectedRows\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRemove</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在删除'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">deleteInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//使用 id 进行删除</span>\n      id<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 删除成功自动更新数据</span>\n    actionRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"四-后端项目开发orangeapi-interface\"><a class=\"markdownIt-Anchor\" href=\"#四-后端项目开发orangeapi-interface\">#</a> 四、后端项目开发 (orangeApi-interface)</h1>\n<h2 id=\"1-开发模拟接口\"><a class=\"markdownIt-Anchor\" href=\"#1-开发模拟接口\">#</a> 1、开发模拟接口</h2>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 名称 API\n *\n * @author 张驰\n */</span>\n<span class=\"token annotation punctuation\">@RestController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/name\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameByGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"GET 你的名字是\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"POST 你的名字是\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> nonce <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> timestamp <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// todo 实际情况应该是去数据库中查询是否已经分配给用户</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accessKey<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//校验时间戳，时间戳和当前时间不能超过 5 分钟</span>\n        <span class=\"token keyword\">long</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> oldTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">></span> oldTime <span class=\"token operator\">+</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// todo 实际情况是去数据库中查询 secretKey</span>\n        <span class=\"token class-name\">String</span> serverSign <span class=\"token operator\">=</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>serverSign<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"POST UserName 你的名字是\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>启动项目，设置端口号</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8123</span>\n  <span class=\"token key atrule\">servlet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">context-path</span><span class=\"token punctuation\">:</span> /api</code></pre>\n<p>浏览器去调用接口： <a href=\"http://localhost:8123/api/name/?name=yupi\">http://localhost:8123/api/name</a></p>\n<h2 id=\"2-开发调用接口\"><a class=\"markdownIt-Anchor\" href=\"#2-开发调用接口\">#</a> 2、开发调用接口</h2>\n<h3 id=\"21-使用hutool工具类\"><a class=\"markdownIt-Anchor\" href=\"#21-使用hutool工具类\">#</a> 2.1、使用 <code>Hutool</code>  工具类</h3>\n<p>官方文档如下：</p>\n<p>1、<a href=\"https://hutool.cn/docs/#/\">Hutool</a><br>\n2、<a href=\"https://hutool.cn/docs/#/http/Http%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7%E7%B1%BB-HttpUtil\">Http 客户端工具类</a></p>\n<p>在 <code>pom.xml</code>  中添加依赖</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.hutool<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hutool-all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.8.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>三个接口对应三个调用方法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 调用第三方接口的客户端\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrangeApiClient</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrangeApiClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accessKey <span class=\"token operator\">=</span> accessKey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>secretKey <span class=\"token operator\">=</span> secretKey<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 使用GET方法从服务器获取名称信息</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameByGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> paramMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8123/api/name/\"</span><span class=\"token punctuation\">,</span> paramMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n\t<span class=\"token comment\">// 使用POST方法从服务器获取名称信息</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> paramMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8123/api/name/\"</span><span class=\"token punctuation\">,</span> paramMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 添加请求头的方法\n     * @param body\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">,</span> accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这个参数一定不能直接发送给前端</span>\n<span class=\"token comment\">//        hashMap.put(\"secretKey\", secretKey);</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//\t使用POST方法向服务器发送User对象，并获取服务器返回的结果</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJsonStr</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HttpResponse</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8123/api/name/user/\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addHeaders</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>写一个测试类在 <code>Mai.java</code>  中，编写测试方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">OrangeApiClient</span> orangeApiClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrangeApiClient</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result1 <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getNameByGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result2 <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result3 <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"3-api签名认证\"><a class=\"markdownIt-Anchor\" href=\"#3-api签名认证\">#</a> 3、API 签名认证</h2>\n<h3 id=\"31-说明\"><a class=\"markdownIt-Anchor\" href=\"#31-说明\">#</a> 3.1、说明</h3>\n<p>本质：</p>\n<p>1、后端签发签名</p>\n<p>2、调用接口时使用签名</p>\n<p>3、适用于无需保存登录态的场景。只认签名，不关注用户登录态。</p>\n<p>模拟签名认证的过程：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 添加请求头的方法\n     * @param body\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">,</span> accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这个参数一定不能直接发送给前端</span>\n<span class=\"token comment\">//        hashMap.put(\"secretKey\", secretKey);</span>\n        <span class=\"token comment\">//随机数</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//请求体</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//时间戳</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//使用 请求体 + secretKey 共同加密</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<p><code>SignUtils.getSign</code>  如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUtils</span> <span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token comment\">/**\n     * 生成签名\n     *\n     * @param body\n     * @param secretKey\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Digester</span> md5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Digester</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DigestAlgorithm</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SHA256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> secretKey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> md5<span class=\"token punctuation\">.</span><span class=\"token function\">digestHex</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>在 <code>orangeApi-backend</code>  项目的 <code>user</code>  表中加入两个字段 <code>accessKey</code> 、 <code>secretKey</code></p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\">accessKey  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                            <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'accessKey'</span><span class=\"token punctuation\">,</span>\nsecretKey  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                            <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'secretKey'</span><span class=\"token punctuation\">,</span></code></pre>\n<p>模拟校验的过程：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> nonce <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> timestamp <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// todo 实际情况应该是去数据库中查询是否已经分配给用户</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accessKey<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//校验时间戳，时间戳和当前时间不能超过 5 分钟</span>\n    <span class=\"token keyword\">long</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> oldTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">></span> oldTime <span class=\"token operator\">+</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// todo 实际情况是去数据库中查询 secretKey</span>\n    <span class=\"token class-name\">String</span> serverSign <span class=\"token operator\">=</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>serverSign<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"POST UserName 你的名字是\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"4-开发一个sdk类似于starter\"><a class=\"markdownIt-Anchor\" href=\"#4-开发一个sdk类似于starter\">#</a> 4、开发一个 SDK，类似于 Starter</h2>\n<h4 id=\"41-为什么需要-starter\"><a class=\"markdownIt-Anchor\" href=\"#41-为什么需要-starter\">#</a> 4.1、为什么需要 Starter？</h4>\n<p>理想情况：开发者只需要关心调用哪些接口、传递哪些参数，就跟调用自己写的代码一样简单。<br>\n开发 starter 的好处：开发者引入之后，可以直接在 application.yml 中写配置，自动创建客户端。</p>\n<h4 id=\"42-开发一个starter\"><a class=\"markdownIt-Anchor\" href=\"#42-开发一个starter\">#</a> 4.2、开发一个 Starter</h4>\n<p>新建项目，引入这两个依赖</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/28.png\" alt=\"image-20231210143200586\"></p>\n<p>修改  <code>pom.xml</code>  文件这里面的版本号</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/29.png\" alt=\"image-20231210143245951\"></p>\n<p>同时，下面这个东西要删掉，不然会报错 (一定要删掉)；这个是 maven 构建项目的方式，我们现在是要构建依赖包，而不是直接运行 jar 包的项目。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/30.png\" alt=\"image.png\"></p>\n<p>删除默认生成的 Spring Boot 的主类，新建一个  <code>OrangeApiClientConfig</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author 张驰 2023/12/9\n */</span>\n\n<span class=\"token comment\">// 通过 @Configuration 注解,将该类标记为一个配置类,告诉 Spring 这是一个用于配置的类</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token comment\">// 能够读取application.yml的配置,读取到配置之后,把这个读到的配置设置到我们这里的属性中,</span>\n<span class=\"token comment\">// 这里给所有的配置加上前缀为\"yuapi.client\"</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orangeapi.client\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// @Data 注解是一个 Lombok 注解,自动生成了类的getter、setter方法</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token comment\">// @ComponentScan 注解用于自动扫描组件，使得 Spring 能够自动注册相应的 Bean</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrangeApiClientConfig</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//创建一个名为 \"OrangeApiClient\" 的 Bean</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrangeApiClient</span> <span class=\"token function\">orangeApiClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrangeApiClient</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>然后将之前写的项目中的 client 包、model 包、utils 包复制过来</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/31.png\" alt=\"image-20231210143657594\"></p>\n<p>同时将 hutool 包引用过来，然后删除多余的注解，@RequestParam 和 @RequestBody</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">,</span> accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这个参数一定不能直接发送给前端</span>\n<span class=\"token comment\">//        hashMap.put(\"secretKey\", secretKey);</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJsonStr</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HttpResponse</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8123/api/name/user/\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addHeaders</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<p>在  <code>resources</code>  目录下创建一个目录 <code>META-INF</code>  (注意要大写），在 META-INF 目录创建一个文件 <code>spring.factories</code> 。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"># spring boot starter\n<span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span>EnableAutoConfiguration</span><span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span></span>OrangeApiClientConfig</span></code></pre>\n<p>最后，使用 Maven 工具进行  <code>install</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/32.png\" alt=\"image-20231210144310417\"></p>\n<h4 id=\"43-如何在其他项目使用这个starter\"><a class=\"markdownIt-Anchor\" href=\"#43-如何在其他项目使用这个starter\">#</a> 4.3、如何在其他项目使用这个 Starter</h4>\n<p>首先在 pom.xml 文件中引入依赖</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>orangeApi-client-sdk<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>然后点击 application.yml 进行配置，</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">orangeapi</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">access-key</span><span class=\"token punctuation\">:</span> orange\n    <span class=\"token key atrule\">secret-key</span><span class=\"token punctuation\">:</span> abcdefgh</code></pre>\n<p>进行测试</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiinterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OrangeApiClient</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrangeApiInterfaceApplicationTests</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 注入一个名为yuApiClient的Bean</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrangeApiClient</span> orangeApiClient<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 表示这是一个测试方法</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 调用orangeApiClient的getNameByGet方法，并传入参数\"yupi\"，将返回的结果赋值给result变量</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getNameByGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建一个User对象</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置User对象的username属性为\"orange3\"</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用orangeApiClient的getUserNameByPost方法，并传入user对象作为参数，将返回的结果赋值给usernameByPost变量</span>\n        <span class=\"token class-name\">String</span> usernameByPost <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印result变量的值</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印usernameByPost变量的值</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>usernameByPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>这两个有一个对不上就无法调用成功，和 <code>application.yml</code>  中的配置进行对比</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/33.png\" alt=\"image-20231210144818702\"></p>\n<h1 id=\"五-前端开发接口发布与下线功能\"><a class=\"markdownIt-Anchor\" href=\"#五-前端开发接口发布与下线功能\">#</a> 五、前端开发接口发布与下线功能</h1>\n<p>本质上来说，就是改变每条接口数据的状态。在设计接口信息表时，之前已经预留了一个状态字段 <code>status</code> 。</p>\n<p>其中，关闭和开启分别对应接口的下线和上线。只有状态为 1 的接口才可以被用户调用，否则将无法调用。</p>\n<h2 id=\"1-功能设计\"><a class=\"markdownIt-Anchor\" href=\"#1-功能设计\">#</a> 1、功能设计</h2>\n<p>发布接口：这个接口需要执行哪些任务呢？首先需要验证接口是否存在，然后判断接口是否可调用，否则访问接口都是 404，影响用户体验。接着，如果接口可以调用，我们需要修改数据库中该接口的状态为 1，表示接口已经被发布，状态默认为 0 (关闭)。</p>\n<p>下线接口：你可以为其新增一个状态字段。例如，使用 1 表示开启，使用 2 表示下线。通过这个新字段，可以清晰地区分接口状态。当状态为 0 时，表示该接口还没有进行任何处理，看大家自己的考虑。我们这里就直接使用 0 和 1 来表示状态，不再添加额外的状态字段，大家可以按照自己的需求进行设计。对于下线接口，校验接口是否存在也是和发布接口类似的，但是下线接口无需判断接口是否可调用。</p>\n<p>另外，还需注意的一点是仅管理员可操作这两个接口，这点需要特别注意，防止用户越权操作。以上就是这两个接口的基本设计。</p>\n<h3 id=\"11总结\"><a class=\"markdownIt-Anchor\" href=\"#11总结\">#</a> 1.1 总结</h3>\n<p><strong>发布接口 (仅管理员可操作)</strong></p>\n<ol>\n<li>校验该接口是否存在</li>\n<li>判断该接口是否可以调用</li>\n<li>修改接口数据库中的状态字段为 1</li>\n</ol>\n<p><strong>下线接口 (仅管理员可操作)</strong></p>\n<ol>\n<li>校验该接口是否存在</li>\n<li>修改接口数据库中的状态字段为 0</li>\n</ol>\n<h2 id=\"2-后端项目开发\"><a class=\"markdownIt-Anchor\" href=\"#2-后端项目开发\">#</a> 2、后端项目开发</h2>\n<p>发布或者下线接口，后端需要给前端传递什么？应该是传递接口  <code>id</code>  即可。封装一个请求，用于向前端接收请求参数。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 发布或上线接口\n *\n * @author yupi\n */</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IdRequest</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * id\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>这两个接口都是只有管理员可以调用，因此加上 <code>@AuthCheck</code>  注解</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 发布接口\n *\n * @param idRequest\n * @param request\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/online\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//  权限校验切面注解</span>\n<span class=\"token annotation punctuation\">@AuthCheck</span><span class=\"token punctuation\">(</span>mustRole <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">onlineInterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">IdRequest</span> idRequest<span class=\"token punctuation\">,</span>\n                                                 <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//判断 id 为 null 或者 id 小于等于 0，直接抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idRequest <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> idRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//1、校验接口是否存在</span>\n    <span class=\"token comment\">// 获取idRequest对象的id属性值</span>\n    <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> idRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 根据id查询接口信息数据</span>\n    <span class=\"token class-name\">InterfaceInfo</span> oldInterfaceInfo <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果查询结果为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldInterfaceInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//2、判断接口是否可以调用</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    user<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> userNameByPost <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>userNameByPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SYSTEM_ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"接口验证失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 仅本人或管理员可修改</span>\n    <span class=\"token class-name\">InterfaceInfo</span> interfaceInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterfaceInfoStatusEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ONLINE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>interfaceInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResultUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>定义一个接口状态的枚举类型，方便切换状态，对应上面代码的  <code>InterfaceInfoStatusEnum</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 接口状态枚举\n *\n * @author yupi\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">InterfaceInfoStatusEnum</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token function\">ONLINE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上线\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">OFFLINE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下线\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">InterfaceInfoStatusEnum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 获取值列表\n     *\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> item<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>下线功能：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 下线接口\n *\n * @param idRequest\n * @param request\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/offline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@AuthCheck</span><span class=\"token punctuation\">(</span>mustRole <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">offlineInterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">IdRequest</span> idRequest<span class=\"token punctuation\">,</span>\n                                                 <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//判断 id 为 null 或者 id 小于等于 0，直接抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idRequest <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> idRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//1、校验接口是否存在</span>\n    <span class=\"token comment\">// 获取idRequest对象的id属性值</span>\n    <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> idRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 根据id查询接口信息数据</span>\n    <span class=\"token class-name\">InterfaceInfo</span> oldInterfaceInfo <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果查询结果为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldInterfaceInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 仅本人或管理员可修改</span>\n    <span class=\"token class-name\">InterfaceInfo</span> interfaceInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterfaceInfoStatusEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OFFLINE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>interfaceInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResultUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h2 id=\"3-前端项目开发\"><a class=\"markdownIt-Anchor\" href=\"#3-前端项目开发\">#</a> 3、前端项目开发</h2>\n<h3 id=\"31增加发布与下线按钮\"><a class=\"markdownIt-Anchor\" href=\"#31增加发布与下线按钮\">#</a> 3.1 增加发布与下线按钮</h3>\n<p>先将 InterfaceInfo 管理页面加入到管理员才可以访问的页面</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/34.png\" alt=\"image-20231211183309560\"></p>\n<p>然后到  <code>route.ts</code>  文件修改组件路径</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">&#123;</span>\n  path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'管理页'</span><span class=\"token punctuation\">,</span>\n  icon<span class=\"token operator\">:</span> <span class=\"token string\">'crown'</span><span class=\"token punctuation\">,</span>\n  access<span class=\"token operator\">:</span> <span class=\"token string\">'canAdmin'</span><span class=\"token punctuation\">,</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'接口管理'</span><span class=\"token punctuation\">,</span> icon<span class=\"token operator\">:</span> <span class=\"token string\">'table'</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin/interface_info'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token string\">'./Admin/InterfaceInfo'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></code></pre>\n<p>增加两个按钮，根据当前状态选择展示哪个按钮，当前状态为 0（下线），展示发布。</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\nrecord<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n  <span class=\"token comment\">//通过给发布按钮和下线按钮设置不同的 key 值来解决按钮重复渲染的问题，确保 React 能够正确地进行虚拟 DOM 的对比和更新。</span>\n  <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>online<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleOnline</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  发布\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\nrecord<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">&#125;</span></span>\n    <span class=\"token attr-name\">danger</span>\n    <span class=\"token comment\">//通过给发布按钮和下线按钮设置不同的 key 值来解决按钮重复渲染的问题，确保 React 能够正确地进行虚拟 DOM 的对比和更新。</span>\n    <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>offline<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">handleOffline</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  下线\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></code></pre>\n<p>增加完按钮后，应该调用响应函数，同时在响应函数中调用后端接口，该方法对应上面代码中的 <code>handleOnline</code> ，同时调用  <code>onlineInterfaceInfoUsingPost</code> ，发起与后端接口的响应，传入后端需要的参数  <code>id</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n *  Delete node\n * @zh-CN 发布接口\n *\n * @param selectedRows\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleOnline</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>IdRequest<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发布中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">onlineInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//使用 id 进行删除</span>\n      id<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发布成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 发布成功自动更新数据</span>\n    actionRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发布失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>然后复制这个发布接口，去修改成下线接口，只需要修改调用后端接口的方法即可  <code>offlineInterfaceInfoUsingPost</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n *  Delete node\n * @zh-CN 下线接口\n *\n * @param selectedRows\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleOffline</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>IdRequest<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下线中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">offlineInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//使用 id 进行删除</span>\n      id<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下线成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 删除成功自动更新数据</span>\n    actionRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 请求失败时提示错误信息</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下线失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>通过给发布按钮和下线按钮设置不同的 key 值来解决按钮重复渲染的问题，确保 React 能够正确地进行虚拟 DOM 的对比和更新。</p>\n<h1 id=\"六-前端开发用户浏览接口页面\"><a class=\"markdownIt-Anchor\" href=\"#六-前端开发用户浏览接口页面\">#</a> 六、前端开发用户浏览接口页面</h1>\n<h2 id=\"1-创建浏览接口页\"><a class=\"markdownIt-Anchor\" href=\"#1-创建浏览接口页\">#</a> 1、创建浏览接口页</h2>\n<p>在 pages 目录下新建 <code>Index</code>  目录。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/35.png\" alt=\"image-20231211184403657\"></p>\n<p>将 Welcome.tsx 拖到 Index 目录下，并修改名为 <code>index.tsx</code> 。</p>\n<p>然后去 route.ts 修改路由，将这个首页放到最上面</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/36.png\" alt=\"image-20231211184529496\"></p>\n<h2 id=\"2-修改浏览接口页\"><a class=\"markdownIt-Anchor\" href=\"#2-修改浏览接口页\">#</a> 2、 修改浏览接口页</h2>\n<p>回到主页，删除多余的内容，留下 PageContainer。</p>\n<ul>\n<li>PageContainer：是 Ant Design Pro 中提供的一个组件，用于快速构建页面的容器。它提供了一些常用的布局和功能，例如面包屑导航、页面标题、操作区域等，可以帮助我们快速搭建页面的基本结构。</li>\n</ul>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/37.png\" alt=\"image.png\"></p>\n<p>首先，需要在 <code>PageContainer</code>  中添加展示数据的组件，选择了 List 组件，去官网复制它的代码：<a href=\"https://ant.design/components/list-cn#list-demo-loadmore\">地址</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/38.png\" alt=\"image.png\"></p>\n<p>然后这里需要页面的加载状态等数据，也是去官网复制：点击加载更多，就可以看到详细代码：<a href=\"https://ant.design/components/list-cn#list-demo-loadmore\">地址</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/39.png\" alt=\"image-20231211191240618\"></p>\n<p>然后进行一定修改：</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 使用 useState 和泛型来定义组件内的状态</span>\n<span class=\"token comment\">// 加载状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 列表数据</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 总数</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> setTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 每页显示条数</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PAGE_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></code></pre>\n<p>完整的 <code>/pages/InterfaceInfo/index.tsx</code>  代码：</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * 接口显示的主页\n * @constructor\n */</span>\n<span class=\"token keyword\">const</span> Index<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 使用 useState 和泛型来定义组件内的状态</span>\n  <span class=\"token comment\">// 加载状态</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 列表数据</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 总数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> setTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 每页显示条数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">PAGE_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 定义异步加载数据的函数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadData</span> <span class=\"token operator\">=</span>  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pageSize <span class=\"token operator\">=</span> <span class=\"token constant\">PAGE_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 开始加载数据，设置 loading 状态为 true</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 调用接口获取数据</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">listInterfaceInfoByPageUsingGet</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">&#123;</span>\n          current<span class=\"token punctuation\">,</span>\n          pageSize<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 将请求返回的数据设置到列表数据状态中</span>\n      <span class=\"token function\">setList</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>records <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 将请求返回的总数设置到总数状态中</span>\n      <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>total <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 请求失败时提示错误信息</span>\n      message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 数据加载成功或失败后，设置 loading 状态为 false</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 页面加载完成后调用加载数据的函数</span>\n    <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageContainer</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>在线接口开放平台<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      &lt;List\n          className=\"my-list\"\n          // 设置 loading 属性，表示数据是否正在加载中\n          loading=</span><span class=\"token punctuation\">&#123;</span>loading<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          itemLayout=\"horizontal\"\n          // 将列表数据作为数据源传递给 List 组件\n          dataSource=</span><span class=\"token punctuation\">&#123;</span>list<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          // 渲染每个列表项\n          renderItem=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">// 构建链接地址</span>\n              <span class=\"token keyword\">const</span> apiLink <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/interface_info/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n              <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List.Item</span></span> <span class=\"token attr-name\">actions</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>apiLink<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">查看</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List.Item.Meta</span></span>\n                          <span class=\"token comment\">// href等会要改成接口文档的链接</span>\n                          <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>apiLink<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#125;</span></span>\n                          <span class=\"token attr-name\">description</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">&#125;</span></span>\n                      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n                  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">List.Item</span></span><span class=\"token punctuation\">></span></span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          // 分页配置\n          pagination=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 自定义显示总数</span>\n            <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-shadow</span>\n            <span class=\"token function\">showTotal</span><span class=\"token punctuation\">(</span>total<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">'总数：'</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 每页显示条数</span>\n            pageSize<span class=\"token operator\">:</span> <span class=\"token constant\">PAGE_SIZE</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 总数，从状态中获取</span>\n            total<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 切换页面触发的回调函数</span>\n            <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> pageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">// 加载对应页面的数据</span>\n              <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      />\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PageContainer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Index<span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"七-前端开发查看具体接口详细信息页面\"><a class=\"markdownIt-Anchor\" href=\"#七-前端开发查看具体接口详细信息页面\">#</a> 七、前端开发查看具体接口详细信息页面</h1>\n<h2 id=\"1-创建浏览接口文档页\"><a class=\"markdownIt-Anchor\" href=\"#1-创建浏览接口文档页\">#</a> 1、创建浏览接口文档页</h2>\n<p>复制 Index 目录，粘贴到 page 目录下，并重命名为 <code>InterfaceInfo</code> 。</p>\n<p>然后到 route.ts 中注册一下</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/40.png\" alt=\"image-20231211192257622\"></p>\n<p>现在需要在点击查看命令后跳转到  <code>/interface_info/:id</code>  这个路径，因此需要去修改查看按钮的 <code>action</code>  动作</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 构建链接地址</span>\n<span class=\"token keyword\">const</span> apiLink <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/interface_info/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List.Item</span></span> <span class=\"token attr-name\">actions</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>apiLink<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">查看</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List.Item.Meta</span></span>\n            <span class=\"token comment\">// href等会要改成接口文档的链接</span>\n            <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>apiLink<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#125;</span></span>\n            <span class=\"token attr-name\">description</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">List.Item</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"2-修改浏览接口文档页\"><a class=\"markdownIt-Anchor\" href=\"#2-修改浏览接口文档页\">#</a> 2、修改浏览接口文档页</h2>\n<p><strong>如何拿到动态路由的参数 id？</strong></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 使用 useParams 钩子函数获取动态路由参数</span>\n<span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>继续修改页面</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 定义状态和钩子函数</span>\n<span class=\"token comment\">// 加载状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 列表数据</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用 useParams 钩子函数获取动态路由参数</span>\n<span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义异步加载数据的函数</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadData</span> <span class=\"token operator\">=</span>  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数不存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 开始加载数据，设置 loading 状态为 true</span>\n  <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调用接口获取数据，发起请求获取接口信息，接受一个包含 id 参数的对象作为参数</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getInterfaceInfoByIdUsingGet</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">&#123;</span>\n        id<span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将请求返回的数据设置到列表数据状态中</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 请求失败时提示错误信息</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 数据加载成功或失败后，设置 loading 状态为 false</span>\n  <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 页面加载完成后调用加载数据的函数</span>\n  <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>此时，前端已经可以取到接口具体信息了，还需要继续优化一下展示页面即可</p>\n<h2 id=\"3-美化展示页面\"><a class=\"markdownIt-Anchor\" href=\"#3-美化展示页面\">#</a> 3、美化展示页面</h2>\n<p>去官网站一下描述列表的组件：<a href=\"https://ant.design/components/descriptions-cn\">地址</a></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">&#123;</span>data <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">column</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>接口状态<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>status <span class=\"token operator\">?</span> <span class=\"token string\">'正常'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'关闭'</span><span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>描述<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求地址<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求参数<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>requestParams<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求方法<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求头<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>requestHeader<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>响应头<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>responseHeader<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>创建时间<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>create_time<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>更新时间<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>update_time<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">接口不存在</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<h1 id=\"八-后端开发申请签名\"><a class=\"markdownIt-Anchor\" href=\"#八-后端开发申请签名\">#</a> 八、后端开发申请签名</h1>\n<h2 id=\"1-开发申请签名\"><a class=\"markdownIt-Anchor\" href=\"#1-开发申请签名\">#</a> 1、开发申请签名</h2>\n<p>可以在用户注册时给用户自动分配一个签名和秘钥</p>\n<p>在 user 表中新增两个字段 accessKey 和 secretKey</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 签名\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 秘钥\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span></code></pre>\n<p>改造 Mapper.xml</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/41.png\" alt=\"image-20231212082934896\"></p>\n<p>在用户注册时，为其设置这两个值</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//使用DDigestUtil.md5Hex加密签名与秘钥</span>\n<span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">md5Hex</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SALT</span> <span class=\"token operator\">+</span> userAccount <span class=\"token operator\">+</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">md5Hex</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SALT</span> <span class=\"token operator\">+</span> userAccount <span class=\"token operator\">+</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessKey</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setSecretKey</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"九-开发前端调用接口按钮\"><a class=\"markdownIt-Anchor\" href=\"#九-开发前端调用接口按钮\">#</a> 九、开发前端调用接口按钮</h1>\n<p>去官方文档找一个现成的表单项：<a href=\"https://ant.design/components/form-cn\">地址</a>，修改后的代码如下：</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"在线测试\"</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个表单,表单名称为\"invoke\",布局方式为垂直布局,当表单提交时调用onFinish方法 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>invoke<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onFinish</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>onFinish<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个表单项,用于输入请求参数,表单项名称为\"userRequestParams\" */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求参数<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userRequestParams<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input.TextArea</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个包裹项,设置其宽度占据 16 个栅格列 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form.Item</span></span> <span class=\"token attr-name\">wrapperCol</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> span<span class=\"token operator\">:</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建调用按钮*/</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">htmlType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                调用\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"返回结果\"</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">loading</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>invokeLoading<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">&#123;</span>invokeRes<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>如何去调用这个接口，有两种思路：</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/42.png\" alt=\"image.png\"></p>\n<p>实际上，在企业项目中，选择第二种方式是不太可能的。原因在于，如果模拟接口可以直接被调用，那么存在安全风险。通常情况下，前端虽然可以直接调用模拟接口，但我们不会将模拟接口暴露给外部，而是将其隐藏起来。用户或开发者在调用时可能根本不知道模拟接口的地址。假设，模拟接口的地址是 <a href=\"http://aaa.com/api%EF%BC%8C%E5%90%8E%E7%AB%AF%E5%9C%B0%E5%9D%80%E6%98%AF\">aaa.com/api，后端地址是</a> <a href=\"http://bbb.com/api%EF%BC%8C%E8%80%8C\">bbb.com/api，而</a> <a href=\"http://aaa.com/api\">aaa.com/api</a> 并不对用户开放，用户根本不知道它的存在。</p>\n<p>实际上，在企业项目中，选择第二种方式是不太可能的。原因在于，如果模拟接口可以直接被调用，那么存在安全风险。通常情况下，前端虽然可以直接调用模拟接口，但我们不会将模拟接口暴露给外部，而是将其隐藏起来。用户或开发者在调用时可能根本不知道模拟接口的地址。假设，模拟接口的地址是 <a href=\"http://aaa.com/api%EF%BC%8C%E5%90%8E%E7%AB%AF%E5%9C%B0%E5%9D%80%E6%98%AF\">aaa.com/api，后端地址是</a> <a href=\"http://bbb.com/api%EF%BC%8C%E8%80%8C\">bbb.com/api，而</a> <a href=\"http://aaa.com/api\">aaa.com/api</a> 并不对用户开放，用户根本不知道它的存在。</p>\n<p><strong>前端要做的事情，就是把所有它要调用的接口 id 、请求参数传给后端，后端负责调用。</strong></p>\n<p><code>onFinish</code>  方法：</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onFinish</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口不存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">setInvokeLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">invokeInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            id<span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>values<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将接口调用结果 (res.data) 更新到 invokeRes 状态变量中</span>\n        <span class=\"token function\">setInvokeRes</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'操作失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">setInvokeLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n<p>后端在线调用接口：先构造一个用于接收前端请求参数的返回值 <code>InterfaceInfoInvokeRequest</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterfaceInfoInvokeRequest</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * 主键\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 用户请求参数\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userRequestParams<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>然后去也后端调用模拟接口平台的业务</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 接口调用\n *\n * @param interfaceInfoInvokeRequest\n * @param request\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/invoke\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">invokeInterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">InterfaceInfoInvokeRequest</span> interfaceInfoInvokeRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//判断 id 为 null 或者 id 小于等于 0，直接抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interfaceInfoInvokeRequest <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> interfaceInfoInvokeRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> interfaceInfoInvokeRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断请求参数为空或者空值，则直接抛出异常</span>\n    <span class=\"token class-name\">String</span> userRequestParams <span class=\"token operator\">=</span> interfaceInfoInvokeRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getUserRequestParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userRequestParams <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>userRequestParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//1、校验接口是否存在</span>\n    <span class=\"token comment\">// 根据id查询接口信息数据</span>\n    <span class=\"token class-name\">InterfaceInfo</span> oldInterfaceInfo <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果查询结果为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldInterfaceInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 检查接口状态是否为下线状态</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldInterfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">InterfaceInfoStatusEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OFFLINE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"接口已关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">User</span> loginUser <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getLoginUser</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">getAccessKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">getSecretKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">OrangeApiClient</span> tempClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrangeApiClient</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 我们只需要进行测试调用，所以我们需要解析传递过来的参数。</span>\n    <span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将用户请求参数转换为com.yupi.yuapiclientsdk.model.User对象</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span> user <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>userRequestParams<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 调用YuApiClient的getUsernameByPost方法，传入用户对象，获取用户名</span>\n    <span class=\"token class-name\">String</span> usernameByPost <span class=\"token operator\">=</span> tempClient<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResultUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>usernameByPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<h1 id=\"十-网关项目\"><a class=\"markdownIt-Anchor\" href=\"#十-网关项目\">#</a> 十、网关项目</h1>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/43.png\" alt=\"image.png\"></p>\n<p>核心 <code>pom.xml</code>  文件为：</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/44.png\" alt=\"image-20231213201041338\"></p>\n<p>配置 <code>application.yml</code>  文件</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 设置服务器的端口号为8090</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8090</span>\n\n<span class=\"token comment\"># 配置Spring Cloud Gateway</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">default-filters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> AddResponseHeader=source<span class=\"token punctuation\">,</span> yupi  <span class=\"token comment\"># 添加响应头，指定来源为yupi</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> api_route  <span class=\"token comment\"># 定义路由ID为api_route</span>\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8123</span>  <span class=\"token comment\"># 请求转发地址为http://localhost:8123</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/api/<span class=\"token important\">**</span>  <span class=\"token comment\"># 匹配以/api/开头的路径</span></code></pre>\n<p>转发到 <a href=\"http://localhost:8123\">http://localhost:8123</a> 这个地址，是我们 <code>Interface</code>  后端项目的地址，也就是起到一个中转的作用。将本来应该向接口的提供地址直接发送的请求经由网关项目进行中转。起到不暴露接口地址的作用，对接口是一种保护作用。</p>\n<h2 id=\"1-编写业务逻辑\"><a class=\"markdownIt-Anchor\" href=\"#1-编写业务逻辑\">#</a> 1、编写业务逻辑</h2>\n<h3 id=\"11-请求日志\"><a class=\"markdownIt-Anchor\" href=\"#11-请求日志\">#</a> 1.1、请求日志</h3>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">2</span>、 请求日志\n    <span class=\"token class-name\">ServerHttpRequest</span> request <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求唯一标识\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求路径\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求方法\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求参数\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> sourceAddress <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHostString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求来源地址\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求来源地址\"</span> <span class=\"token operator\">+</span> sourceAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"12-黑白名单\"><a class=\"markdownIt-Anchor\" href=\"#12-黑白名单\">#</a> 1.2、黑白名单</h3>\n<p>通常情况下可以使用封禁 IP 的方法，这里我们使用白名单的方法，设置一个规则，如果请求的来源地址不是 127.0.0.1，就拒绝它的访问。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token constant\">IP_WHITE_LIST</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//拿到响应对象</span>\n        <span class=\"token class-name\">ServerHttpResponse</span> response <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        3 黑白名单</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">IP_WHITE_LIST</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>sourceAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerHttpResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//设置响应状态码为 403 禁止访问</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FORBIDDEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//返回处理完成的响应</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">setComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"13-用户鉴权\"><a class=\"markdownIt-Anchor\" href=\"#13-用户鉴权\">#</a> 1.3、用户鉴权</h3>\n<p>这里用到了 package com.zc.orangeapiclientsdk.utils 包里面的 SignUtils 方法，需要去 pom.xml 中引入</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>orangeApi-client-sdk<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">4</span> 用户鉴权（判断 ak、sk 是否合法）\n        <span class=\"token class-name\">HttpHeaders</span> headers <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> nonce <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> timestamp <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// todo 实际情况应该是去数据库中查询是否已经分配给用户</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accessKey<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//校验时间戳，时间戳和当前时间不能超过 5 分钟</span>\n        <span class=\"token comment\">// 首先,获取当前时间的时间戳,以秒为单位</span>\n        <span class=\"token comment\">// System.currentTimeMillis()返回当前时间的毫秒数，除以1000后得到当前时间的秒数。</span>\n        <span class=\"token class-name\">Long</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 定义一个常量FIVE_MINUTES,表示五分钟的时间间隔(乘以60,将分钟转换为秒,得到五分钟的时间间隔)</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">FIVE_MINUTES</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">5L</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 判断当前时间与传入的时间戳是否相差五分钟或以上</span>\n        <span class=\"token comment\">// Long.parseLong(timestamp)将传入的时间戳转换成长整型</span>\n        <span class=\"token comment\">// 然后计算当前时间与传入时间戳之间的差值(以秒为单位),如果差值大于等于五分钟,则返回true,否则返回false</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">-</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token constant\">FIVE_MINUTES</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果时间戳与当前时间相差五分钟或以上，调用handleNoAuth(response)方法进行处理</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// todo 实际情况是去数据库中查询 secretKey</span>\n        <span class=\"token class-name\">String</span> serverSign <span class=\"token operator\">=</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>serverSign<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span></code></pre>\n<h3 id=\"14-判断请求接口是否存在\"><a class=\"markdownIt-Anchor\" href=\"#14-判断请求接口是否存在\">#</a> 1.4、判断请求接口是否存在</h3>\n<p>这个模拟接口的地址信息是存储在 yuapi-backend 项目的数据库内，因此我们需要从数据库中查询是否有符合要求的接口。我们可以判断严谨一点，比如验证 method 是否匹配，地址是否相等来判断。如果需要更严格的校验，还可以再验证请求参数。建议像这种业务层面的请求参数最好不要放到全局网关中处理，而是在业务层面自己处理。</p>\n<p>为什么这样建议呢？因为在我们的项目中，并没有引入操作数据库的依赖，如 MyBatis 等。我们之前在 yuapi-backend 项目中引入了这些依赖，因此在网关中再引入的话，可能会造成重复。个人建议是，如果我们已经有现成的访问数据库的方法，或者有可以操作数据库的现成接口，如果那个方法比较复杂，建议使用远程调用的方式调用那个可以操作数据库的项目提供的接口，这样会更方便。</p>\n<p>那怎么调用呢？有好几种方法，其中包括 HTTP 请求和 RPC。对于 HTTP 请求，可以自己编写客户端，使用一些常见的库比如 HTTPClient、RestTemplate 或者 Feign。而对于 RPC，也有多种实现方式，例如 Java 中可以使用 Dubbo 框架</p>\n<h3 id=\"15-剩余的业务逻辑\"><a class=\"markdownIt-Anchor\" href=\"#15-剩余的业务逻辑\">#</a> 1.5、剩余的业务逻辑</h3>\n<p>接下来写请求转发，调用模拟接口，那就是 chain.filter 执行这个操作。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/45.png\" alt=\"image-20231213202745332\"></p>\n<h3 id=\"16-启动前端调用模拟接口\"><a class=\"markdownIt-Anchor\" href=\"#16-启动前端调用模拟接口\">#</a> 1.6、启动前端调用模拟接口</h3>\n<p>然后还需要去修改 client-sdk 项目，将接口的请求地址改为网关项目的地址 8090</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/46.png\" alt=\"img\"></p>\n<p>然后重新打包，在其他引入 sdk 项目中，利用 maven 重新加载一下即可发现修改成功</p>\n<h3 id=\"17-自定义响应处理\"><a class=\"markdownIt-Anchor\" href=\"#17-自定义响应处理\">#</a> 1.7、自定义响应处理</h3>\n<p>预期是等模拟接口调用完成，才记录响应日志、统计调用次数。<br>\n但现实是 chain.filter 方法立刻返回了，直到 filter 过滤器 return 后才调用了模拟接口。<br>\n原因是：chain.filter 是个异步操作</p>\n<p>然而，我们期望的是按照以下步骤执行：</p>\n<p>首先执行第五步请求转发，调用模拟接口，然后再执行第六步打印响应日志，这样我们才能知道是否调用成功。但实际情况是，在调用第五步时，并没有真正触发调用模拟接口，而是直接继续往下执行。直到我们返回这个 filter，它才去调用模拟接口。因此，我们不能这样编写代码。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/47.png\" alt=\"image.png\"></p>\n<p>从这个模型图中可以观察到，Spring Cloud Gateway 的处理逻辑是等待所有过滤器都执行完毕后，才会继续向下走，直到最终调用被代理的服务，也就是我们的模拟接口。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/48.png\" alt=\"image-20231213203318315\"></p>\n<p>我们现在面临一个问题，就是我们希望在调用完远程接口后，再输出响应日志，但由于异步操作的原因，当前的方法等待返回时，远程接口还没有被调用，导致顺序冲突。为了解决这个问题，Spring Cloud Gateway 提供了一个自定义响应处理的装饰器，我们可以查阅相关资料来了解如何使用它。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 处理响应\n     *\n     * @param exchange\n     * @param chain\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 获取原始的响应对象</span>\n            <span class=\"token class-name\">ServerHttpResponse</span> originalResponse <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取数据缓冲工厂</span>\n            <span class=\"token class-name\">DataBufferFactory</span> bufferFactory <span class=\"token operator\">=</span> originalResponse<span class=\"token punctuation\">.</span><span class=\"token function\">bufferFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取响应的状态码</span>\n            <span class=\"token class-name\">HttpStatus</span> statusCode <span class=\"token operator\">=</span> originalResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 判断状态码是否为200 OK(按道理来说,现在没有调用,是拿不到响应码的,对这个保持怀疑 沉思.jpg)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>statusCode <span class=\"token operator\">==</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 创建一个装饰后的响应对象(开始穿装备，增强能力)</span>\n                <span class=\"token class-name\">ServerHttpResponseDecorator</span> decoratedResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerHttpResponseDecorator</span><span class=\"token punctuation\">(</span>originalResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n                    <span class=\"token comment\">// 重写writeWith方法，用于处理响应体的数据</span>\n                    <span class=\"token comment\">// 这段方法就是只要当我们的模拟接口调用完成之后,等它返回结果，</span>\n                    <span class=\"token comment\">// 就会调用writeWith方法,我们就能根据响应结果做一些自己的处理</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">writeWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Publisher</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBuffer</span><span class=\"token punctuation\">></span></span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body instanceof Flux: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 判断响应体是否是Flux类型</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token class-name\">Flux</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBuffer</span><span class=\"token punctuation\">></span></span> fluxBody <span class=\"token operator\">=</span> <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\">// 返回一个处理后的响应体</span>\n                            <span class=\"token comment\">// (这里就理解为它在拼接字符串,它把缓冲区的数据取出来，一点一点拼接好)</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeWith</span><span class=\"token punctuation\">(</span>fluxBody<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>dataBuffer <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n\n                                <span class=\"token comment\">//8 todo 调用成功，接口调用次数 + 1 invokeCount</span>\n\n<span class=\"token comment\">//                                if (response.getStatusCode() != HttpStatus.OK) &#123;</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//                                &#125; else &#123;</span>\n<span class=\"token comment\">//                                    // 9 调用失败，返回一个规范的错误码</span>\n<span class=\"token comment\">//                                    return handleInvokeError(response);</span>\n<span class=\"token comment\">//                                &#125;</span>\n                                <span class=\"token comment\">// 读取响应体的内容并转换为字节数组</span>\n                                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>dataBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">readableByteCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                dataBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token class-name\">DataBufferUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>dataBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放掉内存</span>\n                                <span class=\"token comment\">// 构建日志</span>\n                                <span class=\"token class-name\">StringBuilder</span> sb2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                sb2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;--- &#123;&#125; &#123;&#125; \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> rspArgs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                rspArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>originalResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\">//rspArgs.add(requestUrl);</span>\n                                <span class=\"token class-name\">String</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//data</span>\n                                sb2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>sb2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rspArgs<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//log.info(\"&lt;-- &#123;&#125; &#123;&#125;\\n\", originalResponse.getStatusCode(), data);</span>\n                                <span class=\"token comment\">// 将处理后的内容重新包装成DataBuffer并返回</span>\n                                <span class=\"token keyword\">return</span> bufferFactory<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;--- &#123;&#125; 响应code异常\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeWith</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 对于200 OK的请求,将装饰后的响应对象传递给下一个过滤器链,并继续处理(设置repsonse对象为装饰过的)</span>\n                <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span>decoratedResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 对于非200 OK的请求，直接返回，进行降级处理</span>\n            <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 处理异常情况，记录错误日志</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gateway log exception.\\n\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<h1 id=\"十一-补充完整网关的业务逻辑\"><a class=\"markdownIt-Anchor\" href=\"#十一-补充完整网关的业务逻辑\">#</a> 十一、补充完整网关的业务逻辑</h1>\n<p>RPC 讲解</p>\n<p>简单讲一下这个 RPC 是什么，假设你之前没有听说过 RPC，那么想象一下情景：<br>\n你在项目 A 中编写了一个非常有用的函数，现在你在项目 B 中也想要使用这个函数。但问题是，项目 A 和项目 B 是独立运行的，它们不共享同一片内存，也不在同一个进程中。那么，你怎么做才能调用项目 A 中的那个函数呢？</p>\n<p><strong>1. 怎么调用其他项目的方法？</strong></p>\n<ol>\n<li>复制代码和依赖、环境</li>\n<li>HTTP 请求（提供一个接口，供其他项目调用）</li>\n<li>RPC</li>\n<li>把公共的代码打个 jar 包，其他项目去引用（客户端 SDK）</li>\n</ol>\n<p><strong>PRC 调用模型</strong></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/49.png\" alt=\"image.png\"></p>\n<p>** 进一步说明：** 为了实现 RPC，我们需要涉及几个关键角色。</p>\n<ol>\n<li><strong>提供者（Producer/Provider）</strong>： 首先，我们需要一个项目来提供方法，这个项目被称为提供者。它的主要任务是为其他人提供已经写好的代码，让其他人可以使用。举例来说，我们可以提供一个名为 invokeCount 的方法。</li>\n<li><strong>调用方（Invoker/Consumer）</strong>： 一旦服务提供者提供了服务，调用方需要能够找到这个服务的位置。这就需要一个存储，用于存储已提供的方法，调用方需要知道提供者的地址和 invokeCount 方法，这里需要一个公共的存储。</li>\n<li><strong>存储</strong>： 这是一个公共存储，用于存储提供者提供的方法信息。调用方可以从这个存储中获取提供者的地址和方法信息，例如，提供者的地址可能是 123.123.123.1，而方法是 invokeCount，这些信息会存储在这个存储器中。</li>\n</ol>\n<h2 id=\"1-dubbo-框架\"><a class=\"markdownIt-Anchor\" href=\"#1-dubbo-框架\">#</a> 1、Dubbo 框架</h2>\n<p><a href=\"https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/quick-start/spring-boot/\"><strong>Dubbo 框架官方文档</strong></a></p>\n<p><strong>两种使用方式：</strong></p>\n<ol>\n<li>Spring Boot 代码（注解 + 编程式）：写 Java 接口，服务提供者和消费者都去引用这个接口。</li>\n<li>IDL（接口调用语言）：创建一个公共的接口定义文件，服务提供者和消费者读取这个文件。优点是跨语言，所有的框架都认识。</li>\n</ol>\n<p>Dubbo 底层用的是 Triple 协议：<a href=\"https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/concepts-and-architecture/triple/\">Triple 协议</a>。</p>\n<h2 id=\"2-nacos整合dubbo\"><a class=\"markdownIt-Anchor\" href=\"#2-nacos整合dubbo\">#</a> 2、Nacos 整合 Dubbo</h2>\n<p><strong><a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">Nacos 官方文档</a></strong></p>\n<p>下载链接：<a href=\"https://github.com/alibaba/nacos/releases/download/2.1.1/nacos-server-2.1.1.zip\">https://github.com/alibaba/nacos/releases/download/2.1.1/nacos-server-2.1.1.zip</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/50.png\" alt=\"image-20231214101746634\"></p>\n<p>如何启动：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Linux/Unix/Mac</span>\n\n<span class=\"token function\">sh</span> startup.sh <span class=\"token parameter variable\">-m</span> standalone\n\n<span class=\"token comment\"># ubuntu</span>\n\n<span class=\"token function\">bash</span> startup.sh <span class=\"token parameter variable\">-m</span> standalone\n\n<span class=\"token comment\"># Windows</span>\n\nstartup.cmd <span class=\"token parameter variable\">-m</span> standalone</code></pre>\n<p>引入依赖</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.dubbo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>dubbo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.nacos<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>nacos-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>然后配置 `application.yml# 配置 Dubbo 服务</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 配置Dubbo服务</span>\n<span class=\"token key atrule\">dubbo</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dubbo<span class=\"token punctuation\">-</span>springboot<span class=\"token punctuation\">-</span>demo<span class=\"token punctuation\">-</span>provider  <span class=\"token comment\"># 设置应用名称为dubbo-springboot-demo-provider</span>\n  <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dubbo  <span class=\"token comment\"># 使用Dubbo协议</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22223</span>  <span class=\"token comment\"># 设置Dubbo服务的端口号为22223</span>\n  <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>registry  <span class=\"token comment\"># 注册中心ID为nacos-registry</span>\n    <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span>  <span class=\"token comment\"># 注册中心地址为nacos://localhost:8848</span></code></pre>\n<p>在 gate-way 与 backend 两个项目需要一样的配置：</p>\n<p>启动完 nacos 后，启动服务提供方，然后再启动服务消费者</p>\n<p>服务提供者：在 springboot 启动类上添加 <code>@EnableDubbo</code>  注解</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/52.png\" alt=\"image-20231214102806744\"></p>\n<p>然后创建 <code>DemoService</code>  与 <code>DemoServiceImpl</code>  类，在实现类上添加  <code>@DubboService</code>  注解</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sayHelloAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">completedFuture</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DubboService</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", request from consumer: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">RpcContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n<p>然后将这两个文件复制到服务消费者项目中</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/53.png\" alt=\"image-20231214103215563\"></p>\n<p>启动服务提供方，然后再启动服务消费者项目即可在 nacos 上注册，访问：<a href=\"http://localhost:8848/nacos/index.html\">http://localhost:8848/nacos/index.html</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/51.png\" alt=\"image-20231214102417970\"></p>\n<h1 id=\"错误模拟接口的url一直有问题\"><a class=\"markdownIt-Anchor\" href=\"#错误模拟接口的url一直有问题\">#</a> 错误：模拟接口的 url 一直有问题</h1>\n<p>捋一下流程</p>\n<p>首先前端发送调用接口的请求，先来到 backend 项目，经过一系列验证后，获取发起调用的用户的 ak，sk，以及用户传来的参数，将用户传来的参数通过 Gson 转化为一个 User 对象，然后将这个对象传递到 sdk 项目的 <code>getUserNameByPost</code>  方法，通过这个方法将对象参数和要调用的接口地址（这里的地址是我们的网关项目的地址）组合，然后返回一个 body 对象，并且在请求头添加 accessKey，nonce，body，timestamp，sign 等参数，用于后续的网关处进行鉴权</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/55.png\" alt=\"image-20231214170212659\"></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/56.png\" alt=\"image-20231214171259385\"></p>\n<p>然后请求来到网关项目的后端，进入全局过滤器。将 accessKey，nonce，body，timestamp，sign 一系列参数取出来，进行校验，相关的校验操作需要去操作数据库，通过 <code>@DubboReference</code>  去调用提供者提供的相关方法去操作数据库，也就是提取的公共类的 Dubbo 服务方法</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/58.png\" alt=\"image-20231214172128917\"></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/57.png\" alt=\"image-20231214170838476\"></p>\n<p>校验通过之后，去通过 <code>Mono&lt;Void&gt; filter = chain.filter(exchange);</code>  调用模拟接口</p>\n<p>预期是等模拟接口调用完成，才记录响应日志、统计调用次数。<br>\n但现实是 chain.filter 方法立刻返回了，直到 filter 过滤器 return 后才调用了模拟接口。<br>\n原因是：chain.filter 是个异步操作，理解为前端的 promise</p>\n<p>因此需要自定义响应处理方法，在接口调用成功之后去 invokeCount，记录调用次数加一的操作</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/59.png\" alt=\"image-20231214172426236\"></p>\n<p>这里记得用 Dubbo 的注解，而不是 spring 的 Resource 注解</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/54.png\" alt=\"image-20231214155116419\"></p>\n<h1 id=\"十二-统计分析功能\"><a class=\"markdownIt-Anchor\" href=\"#十二-统计分析功能\">#</a> 十二、统计分析功能</h1>\n<p>查询数据：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> interfaceInfoId<span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>totalNum<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> totalNum\n<span class=\"token keyword\">from</span> user_interface_info\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> interfaceInfoId\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> totalNum <span class=\"token keyword\">desc</span>\n<span class=\"token keyword\">limit</span> <span class=\"token number\">3</span></code></pre>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/60.png\" alt=\"image-20231214191652900\"></p>\n<h1 id=\"十三-部署上线\"><a class=\"markdownIt-Anchor\" href=\"#十三-部署上线\">#</a> 十三、部署上线</h1>\n<h2 id=\"前端\"><a class=\"markdownIt-Anchor\" href=\"#前端\">#</a> 前端</h2>\n<h3 id=\"修改后端服务地址\"><a class=\"markdownIt-Anchor\" href=\"#修改后端服务地址\">#</a> 修改后端服务地址</h3>\n<p>修改前端代码，修改 <code>src/requestConfig.ts</code>  文件中的 baseURL 地址为真实的后端服务地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/61.png\" alt=\"image-20231219135810022\"></p>\n<p>静态化设置</p>\n<p>在  <code>config/config.ts</code>  文件（最后一行）中添加</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">requestRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></code></pre>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/62.png\" alt=\"image-20231219135930681\"></p>\n<h3 id=\"打包前端项目利用-build-命令\"><a class=\"markdownIt-Anchor\" href=\"#打包前端项目利用-build-命令\">#</a> 打包前端项目，利用 build 命令</h3>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/63.png\" alt=\"image-20231219140214787\"></p>\n<p>打包完成后，会在项目根目录下生成 dist 文件夹，这些就是需要放到服务器进行部署的文件。</p>\n<ul>\n<li>在前端开发中，我们通常会使用构建工具（如 Webpack、Parcel 等）将源代码转换为可在浏览器中运行的静态文件。这个过程包括了代码的打包、压缩、转译等操作，最终生成的静态文件就是放置在  <code>dist</code>  文件夹中。</li>\n</ul>\n<p>然后我们可以通过 serve 工具在本地运行这个项目，安装： <code>npm i -g serve</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/64.png\" alt=\"image-20231219140658231\"></p>\n<h3 id=\"服务器部署docker\"><a class=\"markdownIt-Anchor\" href=\"#服务器部署docker\">#</a> 服务器部署 (docker)</h3>\n<p>采用 <code>docker</code>  直接将整个项目打包成镜像的方式，然后启动一个容器去运行前端项目</p>\n<p><strong>dockerfile 文件：</strong></p>\n<pre class=\"language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nginx</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /root/nginx/html/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">USER</span> root</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./docker/nginx.conf /etc/nginx/conf.d/default.conf</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./dist  /usr/share/nginx/html/</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 80</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"nginx\"</span>, <span class=\"token string\">\"-g\"</span>, <span class=\"token string\">\"daemon off;\"</span>]</span></code></pre>\n<p><strong>nginx.conf 文件：</strong></p>\n<pre class=\"language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># gzip config</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_min_length</span> <span class=\"token number\">1k</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_comp_level</span> <span class=\"token number\">9</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_types</span> text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_vary</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_disable</span> <span class=\"token string\">\"MSIE [1-6]\\.\"</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">root</span> /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">include</span> /etc/nginx/mime.types</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> /index.html</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>制作镜像文件命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> orangeapi-front:v0.0.1 <span class=\"token builtin class-name\">.</span></code></pre>\n<p>运行该镜像命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 <span class=\"token parameter variable\">-d</span> orangeapi-front:v0.0.1</code></pre>\n<p>至此，前端项目部署完毕：访问地址：<strong>服务器公网 IP:80</strong></p>\n<p>前端部署需要服务器开放 80 端口，否则无法访问</p>\n<h3 id=\"服务器部署宝塔界面\"><a class=\"markdownIt-Anchor\" href=\"#服务器部署宝塔界面\">#</a> 服务器部署 (宝塔界面)</h3>\n<p>宝塔面板官网：<a href=\"https://www.bt.cn/new/download.html\">地址</a>，安装要求安装即可，点击添加站点，填写域名，没有域名直接填写服务器公网 IP 即可</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/65.png\" alt=\"image-20231219141624141\"></p>\n<p>然后在文件根目录下会多一个文件夹，先把里面生成的几个文件删除【 <code>.user.ini</code>  删除不了不影响】，然后将 <code>dist</code>  文件夹里的所有文件上传到这里即可。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/66.png\" alt=\"image-20231219142223180\"></p>\n<h4 id=\"配置nginx\"><a class=\"markdownIt-Anchor\" href=\"#配置nginx\">#</a> 配置 nginx</h4>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/67.png\" alt=\"image-20231219142658018\"></p>\n<p>nginx 配置文件：</p>\n<pre class=\"language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token comment\">#访问api后端相关配置</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 用于配合 browserHistory使用</span>\n    <span class=\"token directive\"><span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/index.html /index.html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /api</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">rewrite</span> ^/api/(.*) /<span class=\"token variable\">$1</span> break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\"># 后台服务地址</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://公网IP/api</span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>   X-Forwarded-Proto  <span class=\"token variable\">$scheme</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>   Host               <span class=\"token variable\">$http_host</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>   X-Real-IP          <span class=\"token variable\">$remote_addr</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n<p>同样需要开放 80 端口（第一步添加站点时的默认选型）</p>\n<h2 id=\"后端\"><a class=\"markdownIt-Anchor\" href=\"#后端\">#</a> 后端</h2>\n<h3 id=\"安装docker\"><a class=\"markdownIt-Anchor\" href=\"#安装docker\">#</a> 安装 docker</h3>\n<p><a href=\"https://blog.csdn.net/qq_58141314/article/details/131020932\">地址</a></p>\n<p>1、卸载系统之前可能安装的 docker（防止冲突</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span>\n    docker-client <span class=\"token punctuation\">\\</span>\n    docker-client-latest <span class=\"token punctuation\">\\</span>\n    docker-common <span class=\"token punctuation\">\\</span>\n    docker-latest <span class=\"token punctuation\">\\</span>\n    docker-latest-logrotate <span class=\"token punctuation\">\\</span>\n    docker-logrotate <span class=\"token punctuation\">\\</span>\n    docker-engine</code></pre>\n<p>2、安装 Docker-CE 基本环境</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> yum-utils device-mapper-persistent-data lvm2</code></pre>\n<p>设置 docker repo 的 yum 位置</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo </code></pre>\n<p>安装 docker 以及 docker-cli</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io</code></pre>\n<p>3、启动 docker</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#启动docker</span>\n<span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span>\n<span class=\"token comment\">#查看docker服务状态 running 就是启动成功</span>\n<span class=\"token function\">sudo</span> systemctl status <span class=\"token function\">docker</span></code></pre>\n<p>4、设置开机自启</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span></code></pre>\n<h3 id=\"安装docker-nacos\"><a class=\"markdownIt-Anchor\" href=\"#安装docker-nacos\">#</a> 安装 docker nacos</h3>\n<p>同样使用 <code>docker</code>  安装，先拉取 nacos 镜像，版本根据自己项目需要自行选择即可。需要注意的是，nacos2.x 版本以上，需要使用三个端口。具体信息查看：<a href=\"https://nacos.io/en-us/docs/v2/upgrading/2.0.0-compatibility.html\">官方文档</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/68.png\" alt=\"image-20231219143357821\"></p>\n<p><code>docker pull nacos/nacos-server:v2.1.0</code></p>\n<p>然后使用容器运行该镜像即可，然后开放 8848,9848,9849 三个端口</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8848</span>:8848 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9848</span>:9848 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9849</span>:9849 <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MODE</span><span class=\"token operator\">=</span>standalone <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PREFER_HOST_MODE</span><span class=\"token operator\">=</span>hostname <span class=\"token parameter variable\">-v</span> /root/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties <span class=\"token parameter variable\">-v</span> /root/nacos/logs:/home/nacos/logs <span class=\"token parameter variable\">--restart</span> always <span class=\"token parameter variable\">--name</span> nacos nacos/nacos-server:v2.1.0</code></pre>\n<p>此时，可以访问服务器 IP 地址：8848/nacos/index.html, 查看 nacos 是否安装成功，用户名与密码都是 nacos</p>\n<p><strong>安装 mysql</strong>：<a href=\"https://blog.csdn.net/boywcx/article/details/117782448#comments_30440071\">地址</a></p>\n<p>可以会报错，启动不起来，就加上这个命令，放开整个 <code>/mydata/mysql/</code>  目录</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> <span class=\"token number\">777</span> /mydata/mysql/</code></pre>\n<p><strong>安装 redis</strong></p>\n<p><code>mkdir -p /root/docker/redis/conf</code></p>\n<p><code>mkdir -p /root/docker/redis/data</code></p>\n<p>然后将 redis.conf 放入 <code>/root/docker/redis/conf</code>  这里即可</p>\n<p><code>docker run --restart=always -p 6379:6379 --name redis -v /root/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v /root/docker/redis/data:/data -d redis:7.0.12 redis-server /etc/redis/redis.conf</code></p>\n<p>然后开放 3306,6379 端口，可以设置仅允许自己后端及自己电脑可访问，安全性更高</p>\n<h3 id=\"移植数据库\"><a class=\"markdownIt-Anchor\" href=\"#移植数据库\">#</a> 移植数据库</h3>\n<p>可以通过 IDEA 的数据库工具导出一个表的建表语句</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/69.png\" alt=\"image-20231219152034076\"></p>\n<p>在云服务器安装的 mysql 服务上，复制一份本地的数据库表结构</p>\n<h3 id=\"部署backend项目\"><a class=\"markdownIt-Anchor\" href=\"#部署backend项目\">#</a> 部署 backend 项目</h3>\n<p>1、首先需要去修改 sdk 项目的网关地址：本来是运行在本地的，现在需要改为服务器地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/71.png\" alt=\"image-20231219153008133\"></p>\n<p>修改完成后，利用 maven 工具重新 install 打包</p>\n<p>2、 <code>backend</code>  项目，也刷新一下 maven 依赖，然后复制  <code>application.yml</code>  改为 <code>application-prod.yml</code>  文件</p>\n<p>将里面的 mysql，redis，nacos 地址都由  <code>localhost</code>  改为服务器  <code>公网 IP</code></p>\n<p>3、利用 maven package 打包出 jar 包</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/72.png\" alt=\"image-20231219153328060\"></p>\n<h4 id=\"上线\"><a class=\"markdownIt-Anchor\" href=\"#上线\">#</a> 上线</h4>\n<p>1、将 jar 包上传到服务器，用于制作镜像</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/73.png\" alt=\"image-20231219153531106\">2、dockerfile 文件内容：</p>\n<pre class=\"language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token comment\"># Docker 镜像构建</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> maven:3.5-jdk-8-alpine <span class=\"token keyword\">as</span> builder</span>\n\n<span class=\"token comment\"># Copy local code to the container image.</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token comment\"># Build a release artifact.</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./orangeApi-backend-0.0.1-SNAPSHOT.jar /app/target/orangeApi-backend-0.0.1-SNAPSHOT.jar</span>\n<span class=\"token comment\">#RUN mvn package -DskipTests</span>\n\n<span class=\"token comment\"># Run the web service on container startup.</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"java\"</span>,<span class=\"token string\">\"-jar\"</span>,<span class=\"token string\">\"/app/target/orangeApi-backend-0.0.1-SNAPSHOT.jar\"</span>,<span class=\"token string\">\"--spring.profiles.active=prod\"</span>]</span></code></pre>\n<p>3、制作镜像命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> orangeapi-backend:v0.0.1 <span class=\"token builtin class-name\">.</span></code></pre>\n<p>4、运行容器的命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">7529</span>:7529 <span class=\"token parameter variable\">-d</span> orangeapi-backend:v0.0.1</code></pre>\n<h3 id=\"部署gateway项目\"><a class=\"markdownIt-Anchor\" href=\"#部署gateway项目\">#</a> 部署 gateway 项目</h3>\n<p>1、配置  <code>application-prod.yml</code></p>\n<p>跟 backend 项目一样，复制一个  <code>application.yml</code>  文件改名为  <code>application-prod.yml</code> ，将 nacos 地址改为云服务器地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/75.png\" alt=\"image-20231220185434982\"></p>\n<p>2、修改  <code>CustomGlobalFilter</code>  文件的模拟接口地址为服务器提供模拟接口的  <code>ip</code>  地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/74.png\" alt=\"image-20231219154133498\"></p>\n<p>3、同样需要上传到服务器，利用 dockfile 制作镜像</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Docker 镜像构建</span>\n\nFROM maven:3.5-jdk-8-alpine as builder\n\n<span class=\"token comment\"># Copy local code to the container image.</span>\n\nWORKDIR /app\n\n<span class=\"token comment\"># Build a release artifact.</span>\nCOPY ./orangeApi-gateway-0.0.1-SNAPSHOT.jar /app/target/orangeApi-gateway-0.0.1-SNAPSHOT.jar\n<span class=\"token comment\">#RUN mvn package -DskipTests</span>\n\n<span class=\"token comment\"># Run the web service on container startup.</span>\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"java\"</span>,<span class=\"token string\">\"-jar\"</span>,<span class=\"token string\">\"/app/target/orangeApi-gateway-0.0.1-SNAPSHOT.jar\"</span>,<span class=\"token string\">\"--spring.profiles.active=prod\"</span><span class=\"token punctuation\">]</span></code></pre>\n<p>4、制作镜像命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> orangeapi-gateway:v0.0.1 <span class=\"token builtin class-name\">.</span></code></pre>\n<p>5、运行命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8090</span>:8090 <span class=\"token parameter variable\">-d</span> orangeapi-gateway:v0.0.1</code></pre>\n<h3 id=\"部署模拟调用接口interface项目\"><a class=\"markdownIt-Anchor\" href=\"#部署模拟调用接口interface项目\">#</a> 部署模拟调用接口 interface 项目</h3>\n<p>1、dockerfile 文件：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Docker 镜像构建</span>\n\nFROM maven:3.5-jdk-8-alpine as builder\n\n<span class=\"token comment\"># Copy local code to the container image.</span>\n\nWORKDIR /app\n\n<span class=\"token comment\"># Build a release artifact.</span>\n\nCOPY ./orangeApi-interface-0.0.1-SNAPSHOT.jar /app/target/orangeApi-interface-0.0.1-SNAPSHOT.jar\n<span class=\"token comment\">#RUN mvn package -DskipTests</span>\n\n<span class=\"token comment\"># Run the web service on container startup.</span>\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"java\"</span>,<span class=\"token string\">\"-jar\"</span>,<span class=\"token string\">\"/app/target/orangeApi-interface-0.0.1-SNAPSHOT.jar\"</span>,<span class=\"token string\">\"--spring.profiles.active=prod\"</span><span class=\"token punctuation\">]</span></code></pre>\n<p>2、制作镜像命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> orangeapi-interface:v0.0.1 <span class=\"token builtin class-name\">.</span></code></pre>\n<p>3、运行命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8123</span>:8123 <span class=\"token parameter variable\">-d</span> orangeapi-interface:v0.0.1</code></pre>\n<h2 id=\"采坑\"><a class=\"markdownIt-Anchor\" href=\"#采坑\">#</a> 采坑</h2>\n<h3 id=\"问题一\"><a class=\"markdownIt-Anchor\" href=\"#问题一\">#</a> 问题一</h3>\n<p>nacos2.x 版本之后，需额外开发两个端口</p>\n<h3 id=\"问题二\"><a class=\"markdownIt-Anchor\" href=\"#问题二\">#</a> 问题二</h3>\n<p>总共需要开放的端口号:</p>\n<p>80 (前端),7529 (backend),3306 (mysql),6379 (redis),8090 (gateway),8123 (interface),8848,9848,9849 (三个 nacos 的)</p>\n<h3 id=\"问题三\"><a class=\"markdownIt-Anchor\" href=\"#问题三\">#</a> 问题三、</h3>\n<p>网关一直无法发送请求到真实提供接口的项目，最后发现是网关项目的路由转发地址没有改为服务器地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/76.png\" alt=\"image-20231220190006785\"></p>\n<p>仍然存在的问题</p>\n<ol>\n<li>前后端不在一台服务器上，跨域问题一直未得到解决，换到一台服务器上才好。</li>\n<li>新用户注册之后，需要管理员在 <code>userInterfaceInfo</code>  表中为其添加调用次数，否则无法调用接口。\n<ul>\n<li>改进：添加用户申请某个接口调用次数的功能</li>\n</ul>\n</li>\n<li>最好是把 url 拆分成地址 + 请求路径，因为之后再次开发的接口项目的地址可能不再是现在用的这个\n<ul>\n<li><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/70.png\" alt=\"image-20231219152358222\"></li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "项目"
            ]
        }
    ]
}