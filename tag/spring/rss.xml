<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>橙熟 • Posts by &#34;spring&#34; tag</title>
        <link>https://ooooddddd.github.io</link>
        <description>我的笔记</description>
        <language>zh-CN</language>
        <pubDate>Wed, 03 Jan 2024 20:02:34 +0800</pubDate>
        <lastBuildDate>Wed, 03 Jan 2024 20:02:34 +0800</lastBuildDate>
        <category>RabbitMQ</category>
        <category>blog</category>
        <category>chatGPT</category>
        <category>项目</category>
        <category>Javase</category>
        <category>MySQL</category>
        <category>Spring</category>
        <category>点评</category>
        <category>API开放平台</category>
        <category>redis</category>
        <item>
            <guid isPermalink="true">https://ooooddddd.github.io/2024/01/03/Spring%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/</guid>
            <title>Spring框架相关</title>
            <link>https://ooooddddd.github.io/2024/01/03/Spring%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/</link>
            <category>Spring</category>
            <pubDate>Wed, 03 Jan 2024 20:02:34 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;一、IOC和AOP&#34;&gt;&lt;a href=&#34;#一、IOC和AOP&#34; class=&#34;headerlink&#34; title=&#34;一、IOC和AOP&#34;&gt;&lt;/a&gt;一、IOC和AOP&lt;/h3&gt;&lt;h4 id=&#34;IOC&#34;&gt;&lt;a href=&#34;#IOC&#34; class=&#34;headerlink&#34; title=&#34;IOC&#34;&gt;&lt;/a&gt;IOC&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;控制翻转，IOC指的是将对象的创建和依赖注入由应用代码转移到了Spring容器中，原本需要程序员手动创建对象，依赖，现在翻转给了Spring帮忙实现。降低了应用代码的复杂度，提高了代码的可重用性和可维护性。&lt;/li&gt;
&lt;li&gt;BeanFactory就是IOC容器，由容器进行创建Bean对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;AOP&#34;&gt;&lt;a href=&#34;#AOP&#34; class=&#34;headerlink&#34; title=&#34;AOP&#34;&gt;&lt;/a&gt;AOP&lt;/h4&gt;&lt;p&gt;面向切面编程，正常来说，我们的代码中不仅需要业务逻辑部分，还需要日志，安全，事务等，但是如果有个业务需要经常用到，就比如说登陆校验吧，用户可能在看购物车需要校验其是否登陆，在看订单信息也需要校验是否登陆，如果使用AOP将这个校验的逻辑抽离出来，实现一个全局统一登陆校验，就不用再每个方法里面单独进行校验了。&lt;/p&gt;
&lt;h3 id=&#34;二、IOC的实现机制&#34;&gt;&lt;a href=&#34;#二、IOC的实现机制&#34; class=&#34;headerlink&#34; title=&#34;二、IOC的实现机制&#34;&gt;&lt;/a&gt;二、IOC的实现机制&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义Bean：在Spring IOC中，所有的对象都被看作是Bean，需要在配置文件使用注解的方式中进行定义和配置&lt;/li&gt;
&lt;li&gt;创建Bean工厂，在Spring 中，BeanFactory 负责管理Bean的创建、组装和销毁等任务。Spring IOC 容器就是Bean工厂的一种实现。&lt;/li&gt;
&lt;li&gt;读取配置文件：Spring IOC 容器会读取配置文件或者使用注解的方式来获取Bean的定义和配置信息&lt;/li&gt;
&lt;li&gt;创建Bean实例：根据配置文件相关信息通过反射技术来创建Bean的实例，并保存到容器中&lt;/li&gt;
&lt;li&gt;组装Bean：Spring IOC 容器根据配置文件中的信息，将不同的Bean实例组装起来，形成一个完整的应用程序。&lt;/li&gt;
&lt;li&gt;注入依赖：根据配置文件的信息，自动为Bean注入依赖的对象或者值&lt;/li&gt;
&lt;li&gt;提供Bean实例：通过Spring IOC 容器获取需要的Bean实例，从而调用其中的方法或者属性等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Bean的生命周期&#34;&gt;&lt;a href=&#34;#Bean的生命周期&#34; class=&#34;headerlink&#34; title=&#34;Bean的生命周期&#34;&gt;&lt;/a&gt;Bean的生命周期&lt;/h4&gt;&lt;p&gt;创建的过程：首先实例化Bean，并设置Bean的属性，根据其实现的Aware接口设置依赖信息，接下来会陆续调用一些方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BeanPostProcess的postProcessBeforeInitialization方法，完成初始化前的自定义操作&lt;/li&gt;
&lt;li&gt;afterPropertiesSet方法做一些属性被设定后的自定义操作&lt;/li&gt;
&lt;li&gt;调用Bean的Init方法，做一些初始化相关操作&lt;/li&gt;
&lt;li&gt;然后再调用postProcessAfterInitialization去完成bean初始化之后的相关自定义操作。这四个方法类似于AOP&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此时，Bean初始化完成，可以使用这个Bean了&lt;/p&gt;
&lt;p&gt;销毁过程：调用DisposableBean的destory()方法，如果实现了自定义的销毁方法，也去调用。其中单例Bean会随着容器的销毁而销毁，多例的Bean则是通过JVM里的垃圾回收器负责回收的。&lt;/p&gt;
&lt;h3 id=&#34;三、Spring框架中的设计模式&#34;&gt;&lt;a href=&#34;#三、Spring框架中的设计模式&#34; class=&#34;headerlink&#34; title=&#34;三、Spring框架中的设计模式&#34;&gt;&lt;/a&gt;三、Spring框架中的设计模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单例模式：Spring中的Bean默认是单例模式，每个对象实例只创建一次&lt;/li&gt;
&lt;li&gt;工厂模式：Spring使用工厂模式通过BeanFactory创建并管理Bean&lt;/li&gt;
&lt;li&gt;代理模式：Spring Aop基于动态代理技术，使用代理模式实现切面编程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四、-Autowired-和-Resources的区别&#34;&gt;&lt;a href=&#34;#四、-Autowired-和-Resources的区别&#34; class=&#34;headerlink&#34; title=&#34;四、@Autowired 和 @Resources的区别&#34;&gt;&lt;/a&gt;四、@Autowired 和 @Resources的区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;@Autowired：Spring框架的注入Bean的注解，默认的注入方式是ByType（根据类型进行匹配），当一个接口存在多个实现类时，需要通过@Qualifier注解来指定名称。支持在构造函数、方法、字段和参数上使用。&lt;/li&gt;
&lt;li&gt;@Resources：jdk提供的注解注入方式，默认是ByName（根据名称进行匹配），如果一个接口有多个实现类，可以通过name属性显式指定名称。主要用于字段和方法的注入，不支持在构造函数上使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五、Spring处理线程并发问题，ThreadLocal&#34;&gt;&lt;a href=&#34;#五、Spring处理线程并发问题，ThreadLocal&#34; class=&#34;headerlink&#34; title=&#34;五、Spring处理线程并发问题，ThreadLocal&#34;&gt;&lt;/a&gt;五、Spring处理线程并发问题，ThreadLocal&lt;/h3&gt;&lt;p&gt;ThreadLocal类：提供了线程本地变量的功能，可以让每个线程拥有自己的&lt;strong&gt;变量副本&lt;/strong&gt;，从而避免了多个线程之间的共享问题。但是ThreadLocal使用时需要注意&lt;strong&gt;内存泄漏&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;p&gt;在豆丁点评项目中，用户登陆之后，将用户的脱敏信息通过set方法存放到了ThreadLocal中，使用时可以通过get方法获取，退出登录时使用remove方法将其移除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt;首选，Thread类中存在两个ThreadLocalMap类型的变量，可以将ThreadLocalMap理解为ThreadLocal类实现的定制化HashMap。最终的变量是存储在了当前线程的ThreadLocalMap中，并不是ThreadLocal上，ThreadLocalMap可以存储以ThreadLocal为 key，Object对象为value的键值对。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存泄露问题：&lt;/strong&gt;ThreadLocalMap中的Key是ThreadLocal的弱引用，而value是强引用。所有在垃圾回收时，key被清理掉时，value不会被清理。此时ThreadLocalMap中就会出现key为null的Entry，如果不做任何措施，value无法被GC回收，此时就会出现内存泄漏。因此ThreadLocalMap在调用set，get和remove方法的时候，会主动清理key为null的记录。&lt;/p&gt;
&lt;h3 id=&#34;六、Spring-⽀持哪⼏种事务管理类型&#34;&gt;&lt;a href=&#34;#六、Spring-⽀持哪⼏种事务管理类型&#34; class=&#34;headerlink&#34; title=&#34;六、Spring ⽀持哪⼏种事务管理类型&#34;&gt;&lt;/a&gt;六、Spring ⽀持哪⼏种事务管理类型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;编程式事务管理&lt;/li&gt;
&lt;li&gt;声明式事务管理：&lt;/li&gt;
&lt;li&gt;注解式事务管理：@Transactional注解&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;七、Spring-Boot-的主要优点&#34;&gt;&lt;a href=&#34;#七、Spring-Boot-的主要优点&#34; class=&#34;headerlink&#34; title=&#34;七、Spring Boot 的主要优点&#34;&gt;&lt;/a&gt;七、Spring Boot 的主要优点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;开发基于Spring的应用程序简单多了，提高了整体的开发速度&lt;/li&gt;
&lt;li&gt;Spring Boot 不需要编写大量的xml配置&lt;/li&gt;
&lt;li&gt;Spring Boot 提供嵌入式HTTP服务器，如Tomcat，可以更加轻松地开发web应用程序&lt;/li&gt;
&lt;li&gt;Spring Boot Starters 是⼀系列依赖关系的集合，因为它的存在，项⽬的依赖之 间的关系对我们来说变的更加简单了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;八、-SpringBootApplication注解&#34;&gt;&lt;a href=&#34;#八、-SpringBootApplication注解&#34; class=&#34;headerlink&#34; title=&#34;八、@SpringBootApplication注解&#34;&gt;&lt;/a&gt;八、@SpringBootApplication注解&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;可以把SpringBootApplication注解看作是@Configuration、@EnableAutoConfiguration、@ComponentScan三个注解的集合。&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration注解：开启SpringBoot的自动配置机制&lt;/li&gt;
&lt;li&gt;@ComponentScan：扫描被@Component（Service、controller、Repository）注解修饰的Bean，注解默认会扫描该类所在的包下的所有的类&lt;/li&gt;
&lt;li&gt;@Configuration：允许Spring上下文中注册额外的bean或者导入其他配置类。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;九、开发-RESTful-Web-服务常⽤的注解有哪些&#34;&gt;&lt;a href=&#34;#九、开发-RESTful-Web-服务常⽤的注解有哪些&#34; class=&#34;headerlink&#34; title=&#34;九、开发 RESTful Web 服务常⽤的注解有哪些&#34;&gt;&lt;/a&gt;九、开发 RESTful Web 服务常⽤的注解有哪些&lt;/h3&gt;&lt;h4 id=&#34;RESTful-风格是什么&#34;&gt;&lt;a href=&#34;#RESTful-风格是什么&#34; class=&#34;headerlink&#34; title=&#34;RESTful 风格是什么&#34;&gt;&lt;/a&gt;RESTful 风格是什么&lt;/h4&gt;&lt;p&gt;简单来讲就是：RESTful API 可以让程序员看到 URL+Http Method 就知道这个URL是干什么的，看到了响应码，就知道请求结果是怎样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.miccai.top/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/image-20231228102018854.png&#34; alt=&#34;image-20231228102018854&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Spring-Bean相关&#34;&gt;&lt;a href=&#34;#Spring-Bean相关&#34; class=&#34;headerlink&#34; title=&#34;Spring Bean相关&#34;&gt;&lt;/a&gt;Spring Bean相关&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;@Autowired：自动注入对象到类中进行使用，被注入的类需要被Spring容器进行管理&lt;/li&gt;
&lt;li&gt;@RestController：表示这是一个控制器Bean，并且将函数的返回值直接填入Http响应体中，是Rest风格的控制器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;处理HTTP请求&#34;&gt;&lt;a href=&#34;#处理HTTP请求&#34; class=&#34;headerlink&#34; title=&#34;处理HTTP请求&#34;&gt;&lt;/a&gt;处理HTTP请求&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;@GetMapping：get请求，请求参数是放在了路径url中，不太安全，并且会受到url长度的限制，get一般用于资源的获取，读取数据。&lt;/li&gt;
&lt;li&gt;@PostMapping：post请求，通过request body传递参数，可传递的数据类型更多，更安全。post一般用于修改和写入数据。&lt;/li&gt;
&lt;li&gt;@PutMapping：put请求&lt;/li&gt;
&lt;li&gt;@DeleteMapping：delete请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;前后端传递值&#34;&gt;&lt;a href=&#34;#前后端传递值&#34; class=&#34;headerlink&#34; title=&#34;前后端传递值&#34;&gt;&lt;/a&gt;前后端传递值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@PathVariable 和 @RequestParam，PathVariable用于获取路径参数，@RequestParam用于获取查询参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://img.miccai.top/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/image-20231228104008749.png&#34; alt=&#34;image-20231228104008749&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@RequestBody，用于读取一个Json格式的数据，并将其绑定到一个Java对象上去。一个方法只能有一个@RequestBody，但可以有多个**&lt;code&gt;@RequestParam&lt;/code&gt;和&lt;code&gt;@PathVariable&lt;/code&gt;**&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
