{
    "version": "https://jsonfeed.org/version/1",
    "title": "橙熟",
    "description": "我的笔记",
    "home_page_url": "https://ooooddddd.github.io",
    "items": [
        {
            "id": "https://ooooddddd.github.io/2024/01/08/redis%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "https://ooooddddd.github.io/2024/01/08/redis%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "redis面试题",
            "date_published": "2024-01-08T00:48:53.000Z",
            "content_html": "<h3 id=\"一、认识Redis\"><a href=\"#一、认识Redis\" class=\"headerlink\" title=\"一、认识Redis\"></a>一、认识Redis</h3><h4 id=\"1、Redis简介\"><a href=\"#1、Redis简介\" class=\"headerlink\" title=\"1、Redis简介\"></a>1、Redis简介</h4><ol>\n<li>一种基于内存的数据库，对数据的读写操作都是在内存中完成的，因此读写速度非常快，常用于缓存、消息队列、分布式锁等</li>\n<li>提供了多种数据结构来适用于不同的应用场景，如String、Hash、List、Set、ZSet、BitMap、HyperLogLog、GEO、Stream等</li>\n<li>支持事务、数据持久化、Lua脚本、集群、内存淘汰策略等</li>\n</ol>\n<h4 id=\"2、Redis和Memcached的区别\"><a href=\"#2、Redis和Memcached的区别\" class=\"headerlink\" title=\"2、Redis和Memcached的区别\"></a>2、Redis和Memcached的区别</h4><ol>\n<li>共同点：<ul>\n<li>都是基于内存的数据库，一般都用来做缓存</li>\n<li>都有过期淘汰策略</li>\n<li>性能都很高</li>\n</ul>\n</li>\n<li>不同点：<ul>\n<li>Redis支持的数据结构更加丰富，Memcached只支持Key-Value</li>\n<li>Redis支持数据持久化，可以把内存中的数据持久化到磁盘，即使Redis宕机，下次重启依然可以恢复数据，但是Memcached没有持久化</li>\n<li>Redis原生态支持集群</li>\n<li>Redis支持发布订阅模型、Lua脚本、事务等</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3、为什么使用Redis作为MySQL的缓存\"><a href=\"#3、为什么使用Redis作为MySQL的缓存\" class=\"headerlink\" title=\"3、为什么使用Redis作为MySQL的缓存\"></a>3、为什么使用Redis作为MySQL的缓存</h4><ol>\n<li>高性能<ul>\n<li>MySQL是从磁盘读取，Redis是从内存读取，因此Redis的速度相当快</li>\n</ul>\n</li>\n<li>高并发<ul>\n<li>Redis 单机的 QPS 能轻松破 10w，而 MySQL 单机的 QPS 很难破 1w</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、Redis数据结构\"><a href=\"#二、Redis数据结构\" class=\"headerlink\" title=\"二、Redis数据结构\"></a>二、Redis数据结构</h3><h4 id=\"1、常见的数据结构及其应用场景\"><a href=\"#1、常见的数据结构及其应用场景\" class=\"headerlink\" title=\"1、常见的数据结构及其应用场景\"></a>1、常见的数据结构及其应用场景</h4><ul>\n<li>String：缓存对象（点评项目中的店铺信息）、共享session、分布式锁等</li>\n<li>Hash类型：缓存对象、购物车等</li>\n<li>Set类型：聚合计算的场景（并集、差集、交集）</li>\n<li>ZSet：排序场景，如点赞前TOP</li>\n<li>BitMap：二值状态统计，如签到、登录状态</li>\n<li>GEO：存储地理位置</li>\n<li>Stream：消息队列。</li>\n</ul>\n<h3 id=\"三、Redis-线程模型\"><a href=\"#三、Redis-线程模型\" class=\"headerlink\" title=\"三、Redis 线程模型\"></a>三、Redis 线程模型</h3><h4 id=\"1、Redis是单线程吗？\"><a href=\"#1、Redis是单线程吗？\" class=\"headerlink\" title=\"1、Redis是单线程吗？\"></a>1、Redis是单线程吗？</h4><ol>\n<li>Redis所谓的单线程模式指的是：接收客户端请求–&gt;解析请求–&gt;进行数据读写操作–&gt;发送数据到客户端这整个过程是由一个主线程来完成的。</li>\n<li>但是，Redis程序可不是单线程的，在Redis启动时，是会启动后台线程的，用于处理关闭文件、AOF刷盘、释放内存等操作</li>\n</ol>\n<h4 id=\"2、Redis单线程模式：\"><a href=\"#2、Redis单线程模式：\" class=\"headerlink\" title=\"2、Redis单线程模式：\"></a>2、Redis单线程模式：</h4><ol>\n<li><p>Redis的初始化过程：</p>\n<ul>\n<li>首先，调用epoll_create()创建一个epoll（I&#x2F;O多路复用）对象创建一个epoll对象和调用socket()创建一个服务端socket</li>\n<li>然后，bind()绑定相关端口监听socket</li>\n<li>最后，调用epoll_ctl()方法将 listen socket 加入到epoll中，同时注册 连接事件 处理函数</li>\n</ul>\n</li>\n<li><p>初始化完成后，主线程会进入到一个 事件循环函数 中</p>\n<ul>\n<li><p>写事件：write函数：首先会调用处理发送队列函数，查看发送队列是否有任务，如果有任务，则通过write函数将发送缓存区中的数据发送出去。如果这一轮数据没有发送完，就会注册写事件处理函数，等待epoll_wait发现可写后再进行处理</p>\n</li>\n<li><p>然后，调用epoll_wait函数等待事件的到来。</p>\n<ul>\n<li>连接事件：获取连接 socket，加入到 epoll中</li>\n<li>读事件：获取客户端发送的数据–&gt;解析命了–&gt;处理命令–&gt;将客户端对象添加到发送队列–&gt;将执行结果写到发送缓存区等待发送</li>\n<li>写事件：write函数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四、Redis持久化\"><a href=\"#四、Redis持久化\" class=\"headerlink\" title=\"四、Redis持久化\"></a>四、Redis持久化</h3><h4 id=\"1、两种持久化方式：AOF和RDB\"><a href=\"#1、两种持久化方式：AOF和RDB\" class=\"headerlink\" title=\"1、两种持久化方式：AOF和RDB\"></a>1、两种持久化方式：AOF和RDB</h4><ol>\n<li>AOF：每当Redis操作一个写命令时，都会存储到这个文件中，当Redis宕机恢复数据时，通过这个文件重新执行一遍命令来恢复数据。</li>\n<li>RDB：快照文件，将某一时刻的redis内存中的数据以二进制的方式写入磁盘，当Redis宕机恢复时，直接从该快照文件读取数据进行恢复即可。</li>\n<li>混合持久化方式：集成了两种方式的优点。</li>\n</ol>\n<h4 id=\"2、各自的优缺点\"><a href=\"#2、各自的优缺点\" class=\"headerlink\" title=\"2、各自的优缺点\"></a>2、各自的优缺点</h4><p>1、AOF优点：</p>\n<ul>\n<li>数据保证：我们可以设置数据写会磁盘的策略，一般来说是选择Everysec（每秒），每次写操作执行完毕后，先将命令写入到AOF文件的内核缓冲区，然后每隔1秒将缓冲区的内容写回磁盘。即使Redis宕机，也只会丢失1秒内的数据。</li>\n<li>AOF重写机制：当AOF文件大小达到一定程度的时候，后台会自动执行AOF重写，缩小AOF文件的大小。</li>\n</ul>\n<p>2、AOF缺点：</p>\n<ul>\n<li>性能相对较差：对于同一份数据，AOF文件的恢复速度通常要比RDB慢。</li>\n<li>体积相对更大：尽管AOF文件可以重写，但是毕竟RDB记录的是操作后的结果文件，而AOF记录的是操作过程。</li>\n</ul>\n<p>3、RDB优点：</p>\n<ul>\n<li>体积更小：RDB文件是紧凑的二进制文件。</li>\n<li>恢复更快：因为RDB是快照存储，数据恢复的过程就是复制，因此更快</li>\n</ul>\n<p>4、RDB的缺点：</p>\n<ul>\n<li>故障丢失数据：因为RDB是全量复制，一般来说，RDB文件都是每隔5分钟或者更久时间生成一次，一旦Redis宕机，就会丢失最近5分钟的数据。</li>\n<li>RDB无法实时或者秒级持久化</li>\n<li>数据量很大时，对磁盘资源的消耗也是不可忽视的</li>\n<li>save和bgsave：save会阻塞主进程，bgsave会创建一个子进程来进行RDB文件的生成</li>\n</ul>\n<h4 id=\"3、为什么会有混合持久化？\"><a href=\"#3、为什么会有混合持久化？\" class=\"headerlink\" title=\"3、为什么会有混合持久化？\"></a>3、为什么会有混合持久化？</h4><ol>\n<li>Redis4.0提出了混合使用AOF日志和RDB内存快照的持久化方式，既保证了数据恢复的速度，也降低了数据丢失的风险，结合了两者的优点</li>\n<li>在AOF的基础上，将AOF重写的操作发生了变化：重写时以RDB的方式写入到AOF文件中，这样AOF文件的前半部分是RDB格式的全量数据，后半部分则是AOF格式的增量数据。这样的话，前半部分数据在Redis重启时数据恢复速度快，后半部分的内容记录了Redis后台子进程重写AOF期间，主线程产生的操作命令，降低了数据的丢失风险。</li>\n</ol>\n<h3 id=\"五、Redis集群\"><a href=\"#五、Redis集群\" class=\"headerlink\" title=\"五、Redis集群\"></a>五、Redis集群</h3><h4 id=\"1、主从复制\"><a href=\"#1、主从复制\" class=\"headerlink\" title=\"1、主从复制\"></a>1、主从复制</h4><p><img src=\"https://cdn.xiaolincoding.com//mysql/other/2b7231b6aabb9a9a2e2390ab3a280b2d.png\" alt=\"img\"></p>\n<ul>\n<li>主从复制是Redis高可用的基础，实现方式就是将从前的一台Redis服务器，同步数据到多台服务器上，实现一主多从的模式。</li>\n<li>主服务器可以进行读写操作，当主服务器发生写操作时同步给从服务器，从服务器一般是只读，然后接受主服务器同步过来的写操作进行数据同步</li>\n<li>主从服务器直接的命令复制是异步的，因此无法保证数据的强一致性问题（时时刻刻保持一致）</li>\n</ul>\n<h4 id=\"2、哨兵模式\"><a href=\"#2、哨兵模式\" class=\"headerlink\" title=\"2、哨兵模式\"></a>2、哨兵模式</h4><p><img src=\"https://cdn.xiaolincoding.com//mysql/other/26f88373d8454682b9e0c1d4fd1611b4.png\" alt=\"img\"></p>\n<ul>\n<li>哨兵模式是为了解决主从服务时候存在的一个问题：当主服务器出现故障发生宕机时，需要手动进行恢复的问题</li>\n<li>哨兵模式可以做到监控主从服务器，并且提供了主从节点故障转移的功能。</li>\n</ul>\n<h4 id=\"3、切片集群模式\"><a href=\"#3、切片集群模式\" class=\"headerlink\" title=\"3、切片集群模式\"></a>3、切片集群模式</h4><ul>\n<li>它可以将数据分步到不同的服务器上面，以此来降低系统对单个节点的依赖，从而提高Redis服务的读写性能。</li>\n<li>采用哈希槽的方式来处理数据和节点之间的映射关系，一个Redis切片集群共有16384个哈希槽，哈希槽类似于数据分区，每个键值对都会根据Key映射到一个哈希槽中。然后哈希槽是如何映射到具体节点的呢？：</li>\n<li>两种分配方案：<ul>\n<li>平均分配</li>\n<li>手动分配</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、Redis的数据过期删除和内存淘汰策略\"><a href=\"#六、Redis的数据过期删除和内存淘汰策略\" class=\"headerlink\" title=\"六、Redis的数据过期删除和内存淘汰策略\"></a>六、Redis的数据过期删除和内存淘汰策略</h3><h4 id=\"1、（Key）数据过期删除\"><a href=\"#1、（Key）数据过期删除\" class=\"headerlink\" title=\"1、（Key）数据过期删除\"></a>1、（Key）数据过期删除</h4><p>相对于<strong>Key值的过期时间</strong>来删除的一种策略。每当我们对一个Key设置了过期时间，Redis都会把该Key带上过期时间存放到一个过期词典（expire dict）。</p>\n<ol>\n<li><p>惰性删除：不去主动删除键，当每次访问该Key时，都会到过期词典中去检测Key是否过期，如果过期则删除。</p>\n<ul>\n<li>优点：系统资源占用量较少，对CPU时间友好型；</li>\n<li>缺点：如果一个Key已经过期且一直没有被访问，就一直无法释放，造成一定的内存空间的浪费</li>\n</ul>\n</li>\n<li><p>定期删除策略：每隔一段时间，就会随机取出一定量的Key进行检查，并且删除已经过期的Key，两种模式</p>\n<ol>\n<li>SLOW模式定时任务：执行频率默认是 10 hz，执行时间每次不超过25ms</li>\n<li>FAST模式：执行频率不固定，每次时间循环都会尝试执行，但每两次之间的间隔不得低于2ms、每次执行的耗时不得超过1ms</li>\n</ol>\n<ul>\n<li>优点：通过限制删除操作的执行时间和频率来减少删除操作对 CPU的影响，同时减少了过期Key对内存空间的浪费。</li>\n<li>缺点：不好确定执行频率和时长，执行太频繁，对CPU不友好；如果执行次数太少，那就跟惰性删除差不多了。</li>\n</ul>\n</li>\n<li><p>因此，Redis选择的是惰性删除和定期淘汰相结合的策略。</p>\n</li>\n</ol>\n<h4 id=\"2、内存淘汰策略\"><a href=\"#2、内存淘汰策略\" class=\"headerlink\" title=\"2、内存淘汰策略\"></a>2、内存淘汰策略</h4><p>相对于 Redis 的<strong>内存满了</strong>的一种内存淘汰机制</p>\n<ol>\n<li>不进行内存淘汰，超过最大内存后直接返回错误</li>\n<li>进行内存淘汰：<ul>\n<li>只在设置了过期时间的数据中进行淘汰</li>\n<li>在所有数据中进行淘汰</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"2-1-LRU-和-LFU\"><a href=\"#2-1-LRU-和-LFU\" class=\"headerlink\" title=\"2.1 LRU 和 LFU\"></a>2.1 LRU 和 LFU</h5><ol>\n<li>LRU：最近最少使用，会选择淘汰最近最少使用的数据，当前时间减去最后一次访问时间，这个值越大则淘汰优先级越大。</li>\n<li>LFU：最近最不常用，会统计每个Key的访问频率，根据核心思想”如果一个Key过去被访问多次，那么将来被访问的频率也会更高”实现的。但是它不是单纯地记录访问频率，也会根据访问时间进行一定的衰减。</li>\n</ol>\n<h3 id=\"七、缓存三大件\"><a href=\"#七、缓存三大件\" class=\"headerlink\" title=\"七、缓存三大件\"></a>七、缓存三大件</h3><h4 id=\"1、缓存雪崩\"><a href=\"#1、缓存雪崩\" class=\"headerlink\" title=\"1、缓存雪崩\"></a>1、缓存雪崩</h4><p>指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p>\n<ol>\n<li>在缓存失效时间的基础上加上随机值（1-5分钟），可以降低集体失效的概率。</li>\n<li>多级缓存</li>\n</ol>\n<h4 id=\"2、缓存击穿（热点Key问题）\"><a href=\"#2、缓存击穿（热点Key问题）\" class=\"headerlink\" title=\"2、缓存击穿（热点Key问题）\"></a>2、缓存击穿（热点Key问题）</h4><p>被<strong>高并发访问</strong>并且<strong>缓存重建业务较复杂</strong>的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p>\n<ol>\n<li>逻辑过期时间（不保证一致性，适用于注重用户体验，而非注重数据一致性的场景）：先从redis中查询缓存，如果未命中，直接返回 null，如果命中，判断其逻辑过期时间是否过期，未过期，直接返回数据。已过期，则需要进行缓存重建，先尝试获取互斥锁，获取成功，开启独立线程去完成缓存重建的工作。如果获取互斥锁失败，则不进行等待，直接返回已经过期的数据即可。性能较好。</li>\n</ol>\n<h4 id=\"3、缓存穿透\"><a href=\"#3、缓存穿透\" class=\"headerlink\" title=\"3、缓存穿透\"></a>3、缓存穿透</h4><p>用户需要访问的数据，既不在缓存中，也不在数据库中</p>\n<ol>\n<li>缓存 null 值，实现较为简单，但是会造成内存浪费</li>\n<li>布隆过滤器：用于检查一个元素是否在一个集合中的工具。它的底层是由一个初始值都为0的位图数组和N个哈希函数组成的。当我们将数据写入数据库中，在布隆过滤器中做个标记，之后再查询数据库时可以通过布隆过滤器判断数据是否在数据库中。如何做标记：<ul>\n<li>首先，使用 N个哈希函数分别对数据进行哈希计算，可以得到N个哈希值</li>\n<li>然后与数组长度取模运算，得到每个哈希值在数组中的对应位置，并将其置为 1。</li>\n<li>但是，由于存在哈希冲突的情况，所以可能会出现误判的情况，但一般都在可接受范围5%以内。</li>\n</ul>\n</li>\n<li>之后在查询某个数据时，先通过布隆过滤器判断其是否在库中，如果不存在就不用再去查询数据库了，这样即使发生了缓存穿透，也不会对数据库造成很大压力。</li>\n</ol>\n",
            "tags": [
                "redis"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2024/01/03/%E8%B1%86%E4%B8%81%E7%82%B9%E8%AF%84%E7%9B%B8%E5%85%B3/",
            "url": "https://ooooddddd.github.io/2024/01/03/%E8%B1%86%E4%B8%81%E7%82%B9%E8%AF%84%E7%9B%B8%E5%85%B3/",
            "title": "豆丁点评相关",
            "date_published": "2024-01-03T12:06:12.000Z",
            "content_html": "<pre><code>基于Redis + Spring Boot实现的类点评APP，实现了用户登录、查询店铺、优惠券秒杀、发表点评、推送点评、附近商户、用户签到的完整业务流程。\n</code></pre>\n<p>项目的难点：主要是事务的问题</p>\n<h3 id=\"用户登陆：\"><a href=\"#用户登陆：\" class=\"headerlink\" title=\"用户登陆：\"></a><strong>用户登陆</strong>：</h3><p>使用 Redis 实现分布式 Session，解决集群间登录态同步问题；使用 Hash 代替 String 来存储用户信息，节约内存的同时有利于单个字段的修改。</p>\n<p><strong>科室查询</strong>：将高访问量的科室信息提前缓存到了redis中，降低数据库压力的同时提高了查询性能。同时，为了之后方便其他业务使用缓存功能，使用<strong>泛型 + 函数式</strong>编程实现了通用缓存的静态方法，并解决了</p>\n<ol>\n<li><strong>缓存穿透</strong>（用户请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力），是通过缓存 <strong>null</strong> 值解决，但是会浪费内存空间，所以后续准备改为布隆过滤器</li>\n<li><strong>缓存雪崩</strong>（指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。）：<ul>\n<li>在原有的失效时间的基础上添加一个随机值(1-5分钟)</li>\n<li>搭建redis集群提高服务的高可用性</li>\n<li>多级缓存</li>\n<li>降级限流策略</li>\n</ul>\n</li>\n<li><strong>缓存击穿（热点Key问题）</strong>【被<strong>高并发访问</strong>并且<strong>缓存重建业务较复杂</strong>的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。】（利用<strong>互斥锁</strong>或者<strong>逻辑过期</strong>实现）<ol>\n<li>逻辑过期时间（不保证一致性，适用于注重用户体验，而非注重数据一致性的场景）：先从redis中查询缓存，如果未命中，直接返回 null，如果命中，判断其逻辑过期时间是否过期，未过期，直接返回数据。已过期，则需要进行缓存重建，先尝试获取互斥锁，获取成功，开启独立线程去完成缓存重建的工作。如果获取互斥锁失败，则不进行等待，直接返回已经过期的数据即可。性能较好。</li>\n</ol>\n</li>\n<li>双写一致性</li>\n</ol>\n<p><img src=\"https://img.miccai.top/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/image-20231229142644881.png\" alt=\"image-20231229142644881\"></p>\n<h3 id=\"优惠券秒杀功能：\"><a href=\"#优惠券秒杀功能：\" class=\"headerlink\" title=\"优惠券秒杀功能：\"></a><strong>优惠券秒杀功能</strong>：</h3><p>使用Redis + Lua脚本实现对用户下单资格的预检，同时用乐观锁解决预约下单产生的超号问题。</p>\n<p>乐观锁：不加锁，在更新时判断是否有其他线程在修改（性能好，但成功率低）</p>\n<ol>\n<li>版本号法：额外记录一个 version 值，在扣减库存的同时变化这个值，通过这个值是否变化来检验</li>\n<li>库存直接作为版本号，在更新时加一条对库存的判断</li>\n</ol>\n<p>使用Redisson分布式锁解决了在集群模式下一人一单的线程安全问题。</p>\n<ol>\n<li>首先是想通过加 synchronized 锁来解决一人一单，将 synchronized 锁加到方法的外面，先获取锁，再通过代理对象去提交事务，最后释放锁，是线程安全的。但这样操作又会出现 spring 事务失效的问题，因此需要先获取事务的代理对象，然后再使用代理对象去调用方法。需要在spingboot的启动类上面添加@EnableAspectJAutoProxy(exposeProxy &#x3D; true)注解。</li>\n<li>但是这个synchronized 锁在分布式集群模式下，会失效，因为synchronized关键字的作用域其实是一个进程，在这个进程下面的所有线程都能够进行加锁，但是在集群模式下属于多台服务器，多进程</li>\n<li>通过使用Redisson提供的锁对象，利用 userId创建锁对象，来控制一人一单。</li>\n</ol>\n<h4 id=\"进一步优化\"><a href=\"#进一步优化\" class=\"headerlink\" title=\"进一步优化\"></a><strong>进一步优化</strong></h4><p>使用Redis Stream结构作为消息队列，实现异步预约下单功能。</p>\n<p>使用阻塞队列也可以完成异步下单的功能，但是会存在几个问题：</p>\n<ol>\n<li>基于 jvm 的阻塞队列存在内存限制的问题</li>\n<li>数据丢失问题：当jvm重启或宕机，阻塞队列中的所有信息都会丢失</li>\n<li>同时，当该订单从阻塞队列中取出后，在处理的过程中发生了异常，则这个订单就永远无法处理了</li>\n</ol>\n<p>因此可以利用 Redis Stream 消息队列解决上面存在的几个问题，Stream类型的消息队列的特点</p>\n<ol>\n<li>消息可回溯</li>\n<li>一个消息可以被多个消费者读取</li>\n<li>可以阻塞读取</li>\n<li>但是有消息漏读的风险</li>\n</ol>\n<p>过程：依然是通过 Lua 脚本进行 判断秒杀优惠券库存和校验一人一单的功能，如果校验成功，则发送消息到消息队列中，并且初始化一个代理对象，这个代理对象可以进行创建订单的功能。</p>\n<p>然后通过一个线程池去不断去消费消息队列中的消息，即使发生异常（消息已取出但未消费）的消息会持久化到PendingList中，后续通过获取pending-list中的订单信息，依然可以将其消费掉。然后跳出 handlePendingList的方法，继续去处理正常的消息队列。最后创建订单，并且通过 SACK 命令确认消息已处理。</p>\n<h3 id=\"探店笔记点赞排行\"><a href=\"#探店笔记点赞排行\" class=\"headerlink\" title=\"探店笔记点赞排行\"></a><strong>探店笔记</strong>点赞排行</h3><p>使用 Redis List 数据结构存储用户点赞信息，并基于 ZSet 实现 TopN 点赞排行</p>\n<h3 id=\"推送点评\"><a href=\"#推送点评\" class=\"headerlink\" title=\"推送点评\"></a>推送点评</h3><p>feed流，使用的是推模式，后续随着用户量的增加，可以将其改为推拉结合，活跃粉丝使用推模式，而普通粉丝则使用拉模式。</p>\n<h3 id=\"附近商户\"><a href=\"#附近商户\" class=\"headerlink\" title=\"附近商户\"></a>附近商户</h3><p>使用了redis中的geo数据结构，根据经纬度坐标信息存储商户的地理位置，并使用 Geo Search 命令实现高性能商户查询及按距离排序。</p>\n<h3 id=\"用户签到\"><a href=\"#用户签到\" class=\"headerlink\" title=\"用户签到\"></a>用户签到</h3><p>使用到了Redis的BitMap数据统计功能，利用bitmap，计算今天是本月的第几天，就将对应bit位置1.</p>\n<p>后续计划根据用户签到送出激励计划，用户签到赠送橙币，可以使用橙币在购买优惠券时抵扣现金。</p>\n",
            "tags": [
                "点评"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2024/01/03/Spring%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/",
            "url": "https://ooooddddd.github.io/2024/01/03/Spring%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3/",
            "title": "Spring框架相关",
            "date_published": "2024-01-03T12:02:34.000Z",
            "content_html": "<h3 id=\"一、IOC和AOP\"><a href=\"#一、IOC和AOP\" class=\"headerlink\" title=\"一、IOC和AOP\"></a>一、IOC和AOP</h3><h4 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h4><ol>\n<li>控制翻转，IOC指的是将对象的创建和依赖注入由应用代码转移到了Spring容器中，原本需要程序员手动创建对象，依赖，现在翻转给了Spring帮忙实现。降低了应用代码的复杂度，提高了代码的可重用性和可维护性。</li>\n<li>BeanFactory就是IOC容器，由容器进行创建Bean对象</li>\n</ol>\n<h4 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h4><p>面向切面编程，正常来说，我们的代码中不仅需要业务逻辑部分，还需要日志，安全，事务等，但是如果有个业务需要经常用到，就比如说登陆校验吧，用户可能在看购物车需要校验其是否登陆，在看订单信息也需要校验是否登陆，如果使用AOP将这个校验的逻辑抽离出来，实现一个全局统一登陆校验，就不用再每个方法里面单独进行校验了。</p>\n<h3 id=\"二、IOC的实现机制\"><a href=\"#二、IOC的实现机制\" class=\"headerlink\" title=\"二、IOC的实现机制\"></a>二、IOC的实现机制</h3><ol>\n<li>定义Bean：在Spring IOC中，所有的对象都被看作是Bean，需要在配置文件使用注解的方式中进行定义和配置</li>\n<li>创建Bean工厂，在Spring 中，BeanFactory 负责管理Bean的创建、组装和销毁等任务。Spring IOC 容器就是Bean工厂的一种实现。</li>\n<li>读取配置文件：Spring IOC 容器会读取配置文件或者使用注解的方式来获取Bean的定义和配置信息</li>\n<li>创建Bean实例：根据配置文件相关信息通过反射技术来创建Bean的实例，并保存到容器中</li>\n<li>组装Bean：Spring IOC 容器根据配置文件中的信息，将不同的Bean实例组装起来，形成一个完整的应用程序。</li>\n<li>注入依赖：根据配置文件的信息，自动为Bean注入依赖的对象或者值</li>\n<li>提供Bean实例：通过Spring IOC 容器获取需要的Bean实例，从而调用其中的方法或者属性等。</li>\n</ol>\n<h4 id=\"Bean的生命周期\"><a href=\"#Bean的生命周期\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h4><p>创建的过程：首先实例化Bean，并设置Bean的属性，根据其实现的Aware接口设置依赖信息，接下来会陆续调用一些方法：</p>\n<ol>\n<li>BeanPostProcess的postProcessBeforeInitialization方法，完成初始化前的自定义操作</li>\n<li>afterPropertiesSet方法做一些属性被设定后的自定义操作</li>\n<li>调用Bean的Init方法，做一些初始化相关操作</li>\n<li>然后再调用postProcessAfterInitialization去完成bean初始化之后的相关自定义操作。这四个方法类似于AOP</li>\n</ol>\n<p>此时，Bean初始化完成，可以使用这个Bean了</p>\n<p>销毁过程：调用DisposableBean的destory()方法，如果实现了自定义的销毁方法，也去调用。其中单例Bean会随着容器的销毁而销毁，多例的Bean则是通过JVM里的垃圾回收器负责回收的。</p>\n<h3 id=\"三、Spring框架中的设计模式\"><a href=\"#三、Spring框架中的设计模式\" class=\"headerlink\" title=\"三、Spring框架中的设计模式\"></a>三、Spring框架中的设计模式</h3><ul>\n<li>单例模式：Spring中的Bean默认是单例模式，每个对象实例只创建一次</li>\n<li>工厂模式：Spring使用工厂模式通过BeanFactory创建并管理Bean</li>\n<li>代理模式：Spring Aop基于动态代理技术，使用代理模式实现切面编程</li>\n</ul>\n<h3 id=\"四、-Autowired-和-Resources的区别\"><a href=\"#四、-Autowired-和-Resources的区别\" class=\"headerlink\" title=\"四、@Autowired 和 @Resources的区别\"></a>四、@Autowired 和 @Resources的区别</h3><ul>\n<li>@Autowired：Spring框架的注入Bean的注解，默认的注入方式是ByType（根据类型进行匹配），当一个接口存在多个实现类时，需要通过@Qualifier注解来指定名称。支持在构造函数、方法、字段和参数上使用。</li>\n<li>@Resources：jdk提供的注解注入方式，默认是ByName（根据名称进行匹配），如果一个接口有多个实现类，可以通过name属性显式指定名称。主要用于字段和方法的注入，不支持在构造函数上使用。</li>\n</ul>\n<h3 id=\"五、Spring处理线程并发问题，ThreadLocal\"><a href=\"#五、Spring处理线程并发问题，ThreadLocal\" class=\"headerlink\" title=\"五、Spring处理线程并发问题，ThreadLocal\"></a>五、Spring处理线程并发问题，ThreadLocal</h3><p>ThreadLocal类：提供了线程本地变量的功能，可以让每个线程拥有自己的<strong>变量副本</strong>，从而避免了多个线程之间的共享问题。但是ThreadLocal使用时需要注意<strong>内存泄漏</strong>的问题。</p>\n<p>在豆丁点评项目中，用户登陆之后，将用户的脱敏信息通过set方法存放到了ThreadLocal中，使用时可以通过get方法获取，退出登录时使用remove方法将其移除。</p>\n<p><strong>原理：</strong>首选，Thread类中存在两个ThreadLocalMap类型的变量，可以将ThreadLocalMap理解为ThreadLocal类实现的定制化HashMap。最终的变量是存储在了当前线程的ThreadLocalMap中，并不是ThreadLocal上，ThreadLocalMap可以存储以ThreadLocal为 key，Object对象为value的键值对。</p>\n<p><strong>内存泄露问题：</strong>ThreadLocalMap中的Key是ThreadLocal的弱引用，而value是强引用。所有在垃圾回收时，key被清理掉时，value不会被清理。此时ThreadLocalMap中就会出现key为null的Entry，如果不做任何措施，value无法被GC回收，此时就会出现内存泄漏。因此ThreadLocalMap在调用set，get和remove方法的时候，会主动清理key为null的记录。</p>\n<h3 id=\"六、Spring-⽀持哪⼏种事务管理类型\"><a href=\"#六、Spring-⽀持哪⼏种事务管理类型\" class=\"headerlink\" title=\"六、Spring ⽀持哪⼏种事务管理类型\"></a>六、Spring ⽀持哪⼏种事务管理类型</h3><ol>\n<li>编程式事务管理</li>\n<li>声明式事务管理：</li>\n<li>注解式事务管理：@Transactional注解</li>\n</ol>\n<h3 id=\"七、Spring-Boot-的主要优点\"><a href=\"#七、Spring-Boot-的主要优点\" class=\"headerlink\" title=\"七、Spring Boot 的主要优点\"></a>七、Spring Boot 的主要优点</h3><ol>\n<li>开发基于Spring的应用程序简单多了，提高了整体的开发速度</li>\n<li>Spring Boot 不需要编写大量的xml配置</li>\n<li>Spring Boot 提供嵌入式HTTP服务器，如Tomcat，可以更加轻松地开发web应用程序</li>\n<li>Spring Boot Starters 是⼀系列依赖关系的集合，因为它的存在，项⽬的依赖之 间的关系对我们来说变的更加简单了</li>\n</ol>\n<h3 id=\"八、-SpringBootApplication注解\"><a href=\"#八、-SpringBootApplication注解\" class=\"headerlink\" title=\"八、@SpringBootApplication注解\"></a>八、@SpringBootApplication注解</h3><ol>\n<li>可以把SpringBootApplication注解看作是@Configuration、@EnableAutoConfiguration、@ComponentScan三个注解的集合。</li>\n<li>@EnableAutoConfiguration注解：开启SpringBoot的自动配置机制</li>\n<li>@ComponentScan：扫描被@Component（Service、controller、Repository）注解修饰的Bean，注解默认会扫描该类所在的包下的所有的类</li>\n<li>@Configuration：允许Spring上下文中注册额外的bean或者导入其他配置类。</li>\n</ol>\n<h3 id=\"九、开发-RESTful-Web-服务常⽤的注解有哪些\"><a href=\"#九、开发-RESTful-Web-服务常⽤的注解有哪些\" class=\"headerlink\" title=\"九、开发 RESTful Web 服务常⽤的注解有哪些\"></a>九、开发 RESTful Web 服务常⽤的注解有哪些</h3><h4 id=\"RESTful-风格是什么\"><a href=\"#RESTful-风格是什么\" class=\"headerlink\" title=\"RESTful 风格是什么\"></a>RESTful 风格是什么</h4><p>简单来讲就是：RESTful API 可以让程序员看到 URL+Http Method 就知道这个URL是干什么的，看到了响应码，就知道请求结果是怎样的。</p>\n<p><img src=\"https://img.miccai.top/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/image-20231228102018854.png\" alt=\"image-20231228102018854\"></p>\n<h4 id=\"Spring-Bean相关\"><a href=\"#Spring-Bean相关\" class=\"headerlink\" title=\"Spring Bean相关\"></a>Spring Bean相关</h4><ul>\n<li>@Autowired：自动注入对象到类中进行使用，被注入的类需要被Spring容器进行管理</li>\n<li>@RestController：表示这是一个控制器Bean，并且将函数的返回值直接填入Http响应体中，是Rest风格的控制器</li>\n</ul>\n<h4 id=\"处理HTTP请求\"><a href=\"#处理HTTP请求\" class=\"headerlink\" title=\"处理HTTP请求\"></a>处理HTTP请求</h4><ul>\n<li>@GetMapping：get请求，请求参数是放在了路径url中，不太安全，并且会受到url长度的限制，get一般用于资源的获取，读取数据。</li>\n<li>@PostMapping：post请求，通过request body传递参数，可传递的数据类型更多，更安全。post一般用于修改和写入数据。</li>\n<li>@PutMapping：put请求</li>\n<li>@DeleteMapping：delete请求</li>\n</ul>\n<h4 id=\"前后端传递值\"><a href=\"#前后端传递值\" class=\"headerlink\" title=\"前后端传递值\"></a>前后端传递值</h4><ul>\n<li><p>@PathVariable 和 @RequestParam，PathVariable用于获取路径参数，@RequestParam用于获取查询参数</p>\n<ul>\n<li><img src=\"https://img.miccai.top/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/image-20231228104008749.png\" alt=\"image-20231228104008749\"></li>\n</ul>\n</li>\n<li><p>@RequestBody，用于读取一个Json格式的数据，并将其绑定到一个Java对象上去。一个方法只能有一个@RequestBody，但可以有多个**<code>@RequestParam</code>和<code>@PathVariable</code>**</p>\n</li>\n</ul>\n",
            "tags": [
                "Spring"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2024/01/03/Javase%E7%9B%B8%E5%85%B3/",
            "url": "https://ooooddddd.github.io/2024/01/03/Javase%E7%9B%B8%E5%85%B3/",
            "title": "Javase相关",
            "date_published": "2024-01-03T12:00:41.000Z",
            "content_html": "<ul>\n<li><p>一、Java常用类、集合</p>\n<h4 id=\"1、Java的八大基本数据类型\"><a href=\"#1、Java的八大基本数据类型\" class=\"headerlink\" title=\"1、Java的八大基本数据类型\"></a>1、Java的八大基本数据类型</h4><ol>\n<li>整数：byte、short、int、long</li>\n<li>浮点数：float、double</li>\n<li>布尔：boolearn</li>\n<li>字符：char</li>\n</ol>\n<h4 id=\"2、String、StringBuilder、StringBuffer\"><a href=\"#2、String、StringBuilder、StringBuffer\" class=\"headerlink\" title=\"2、String、StringBuilder、StringBuffer\"></a>2、String、StringBuilder、StringBuffer</h4><ol>\n<li>String是不可变的，因为它被final修饰符修饰，并且String类的内部并没有暴露修改这个字符串的方法</li>\n<li>StringBuilder和StringBuffer则提供了很多修改字符串的方法，比如常用的 append()方法。</li>\n<li><strong>线程是否安全：</strong>String是不可变的，可以理解为常量，是线程安全的。StringBuffer和StringBuilder都定义了一些对字符串的基本操作。因为StringBuffer对这些方法加了同步锁，因此是线程安全的。而StringBuilder没有，所以StringBuilder不是线程安全的</li>\n<li><strong>总结</strong>：操作少量的数据时：使用String；单线程下操作大量数据：StringBuilder；多线程下操作大量数据：StringBuffer</li>\n<li>String使用<strong>字符串拼接</strong>时，也就是”+”时，底层会创建一个StringBuilder对象，调用append方法实现。最后会使用toString重新转为String。但是在循环内应该避免使用String拼接，因为编译器不会创建单个StringBuilder用以复用，会导致创建过多的StringBuilder对象。</li>\n</ol>\n<h4 id=\"3、ArrayList和linkedlist的区别\"><a href=\"#3、ArrayList和linkedlist的区别\" class=\"headerlink\" title=\"3、ArrayList和linkedlist的区别\"></a>3、ArrayList和linkedlist的区别</h4><ol>\n<li>都是线程不安全的</li>\n<li>底层数据结构：ArrayList使用的是Object数组；linkedlist底层使用的是双向循环链表</li>\n<li>插入删除：ArrayList采用的是数组存储，因此在插入和删除时的时间复杂度会受到元素位置的影响。而LinkedList则近似于O(1)</li>\n<li>是否支持快速随机访问：LinkedList不支持，而ArrayList则可以通过元素的序号快速获取元素对象。</li>\n<li>内存空间占用：ArrayList的空间浪费主要体现在list列表的末尾需要预留一定的冗余空间。而LinkedList则是需要额外存储直接后继与直接前驱。</li>\n</ol>\n<h4 id=\"4、ArrayList扩容\"><a href=\"#4、ArrayList扩容\" class=\"headerlink\" title=\"4、ArrayList扩容\"></a>4、ArrayList扩容</h4><p>以<strong>无参构造方法</strong>创建一个ArrayList时，是不会分配容量的，默认是<strong>0</strong>，只有在向ArrayList中add()第一个元素时，容量会得到扩容，默认为<strong>10</strong>，然后继续向里面添加元素，到<strong>11个</strong>元素时，此时已经超出当前容量，会进行扩容，10+10&#x2F;2&#x3D;15，当old容量为偶数时，新容量刚好就是old容量的1.5倍，奇数则会损失0.5的小数点。</p>\n<h4 id=\"5、HashMap-的-7-种遍历方式与性能分析\"><a href=\"#5、HashMap-的-7-种遍历方式与性能分析\" class=\"headerlink\" title=\"5、HashMap 的 7 种遍历方式与性能分析\"></a>5、HashMap 的 7 种遍历方式与性能分析</h4><ol>\n<li>迭代器:Iterator EntrySet、Iterator KeySet</li>\n<li>For Each:For EntrySet， For KeySet</li>\n<li>Lambda表达式</li>\n<li>Streams API</li>\n<li>多线程Streams API</li>\n</ol>\n<p>EntrySet的遍历性能最好，因为KeySet在循环时使用了map.get(key)，相当于又遍历了以便Map集合去查询Key所对应的值。在使用迭代器或者for循环时，其实已经遍历了一遍Map集合了。EntrySet只需要遍历一遍，然后就将对象的Key和Value都存放在了Entry对象中，因此再获取Key和Value就无需再遍历Map集合了</p>\n<p><strong>EntrySet</strong>：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">*</span><span class=\"token comment\">// 遍历*</span>\n   <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>KeySet：</strong></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Integer</span> key <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h4 id=\"6、hashmap是否是线程安全的，常见的线程安全的集合\"><a href=\"#6、hashmap是否是线程安全的，常见的线程安全的集合\" class=\"headerlink\" title=\"6、hashmap是否是线程安全的，常见的线程安全的集合\"></a>6、hashmap是否是线程安全的，常见的线程安全的集合</h4><p>hashmap是线程不安全的，多线程下进行扩容会导致死循环，jdk1.7中hashmap的链表使用头插法插入元素，扩容时可能会导致环形链表的出现形成死循环，因此jdk1.8改为了尾插法，但是多线程的put操作，可能会导致元素的丢失问题。</p>\n<p>常见的线程安全的集合：</p>\n<p>hashtable，concurrentHashMap，vector、Stack。</p>\n<h4 id=\"7、HashMap的底层原理\"><a href=\"#7、HashMap的底层原理\" class=\"headerlink\" title=\"7、HashMap的底层原理\"></a>7、HashMap的底层原理</h4><p>在JDK1.8之前hashMap的底层数据结构是由数组+链表组成的，数组是HashMap的主体部分，而链表是为了解决哈希冲突而存在的。在JDK1.8中，是由数组+链表+红黑树组成的，当链表过长时，会严重影响HashMap的性能，因为链表的搜索时间复杂度是O（n），而红黑树则是O(logN)。因此，JDK1.8中引入了红黑树，在链表达到一定条件是会转化为红黑树。这个条件就是：当链表长度大于8，就会去检查数组的长度是否大于64，如果数组长度小于64，则进行数组的扩容，否则就会将链表转化为红黑树，以减少搜索时间。HashMap中采用的解决hash冲突的办法是链地址法。将哈希值相同的元素构成一个单链表，并将单链表的头结点存放在哈希表的第i个单元中。HashMap的默认加载因子是0.75，初始化数组的长度默认值是16，threshold是hashmap所能容纳的最大键值对数量&#x3D;加载因子*数组长度，当容量达到这个值时，数组就会进行扩容，扩大为原来的两倍，并将原来的对象放入新数组中。这里jdk1.8进行了适当的优化，无需再重新计算hash值，元素的位置在原来的位置或者是原来的位置+oldCap。</p>\n<p>jdk1.8之前，hashmap的插入方法是头插法，新插入的元素会插入到链表的头部。产生的问题如下：</p>\n<ul>\n<li>破坏了链表元素的插入顺序，可能不利于某些需要按照插入顺序进行遍历的场景</li>\n<li>容易形成环形链表的问题：由于头插法需要修改链表头，在多线程环境下可能会引起链表环形的问题，使得链表遍历时出现死循环</li>\n</ul>\n<h4 id=\"8、ConCurrentHashMap底层原理\"><a href=\"#8、ConCurrentHashMap底层原理\" class=\"headerlink\" title=\"8、ConCurrentHashMap底层原理\"></a>8、ConCurrentHashMap底层原理</h4><ol>\n<li>ConCurrentHashMap在HashMap的基础上加上的锁的机制，因此是线程安全的。在JDK1.7中，ConCurrentHashMap是由Segment分段数组结构和HashEntry数组结构组成的。即ConCurrentHashMap把哈希表分为了多个Segment小数组，而每个Segment就是一个类似于hashmap的结构，每一个hashmap的内部可以进行扩容，而segment的个数一旦初始化就不能再改变，默认值是16，也就可以认为其默认支持16个线程的并发。</li>\n<li>在jdk1.8中，其数据结构变成了数组+链表&#x2F;红黑树的组合，当链表冲突达到一定长度时，会转化为红黑树。在锁的实现上，抛弃了原本的Segment分段锁，采用了CAS + synchronized 对链表的头结点或红黑树的根节点进行加锁，将锁的级别控制在了更细粒度的级别，大大提高了并发量。</li>\n</ol>\n<h4 id=\"9、set、map、list\"><a href=\"#9、set、map、list\" class=\"headerlink\" title=\"9、set、map、list\"></a>9、set、map、list</h4><ol>\n<li><strong>set</strong>：不包含重复元素的集合，实现了set接口的类通常有HashSet、TreeSet等</li>\n<li><strong>Map：</strong>键值对的集合，key-value，不允许包含重复的key，但是可以包含重复的value</li>\n<li><strong>list</strong>：一个有序的集合，允许重复元素。ArrayList、LinkedList等。可以通过索引访问元素，按照插入顺序排序</li>\n</ol>\n<h4 id=\"10、HashMap、HashTable\"><a href=\"#10、HashMap、HashTable\" class=\"headerlink\" title=\"10、HashMap、HashTable\"></a>10、HashMap、HashTable</h4><ol>\n<li><strong>是否线程安全：</strong>HashMap不是线程安全的，另外两个是线程安全的。HashTable的线程安全是因为它内部的方法基本上都加了<code>synchronized</code>锁。ConCurrentHashMap是通过分段锁（jdk1.7），或者是CAS + synchronized（jdk1.8）对链表的头结点或者红黑树的根节点进行加锁实现的。</li>\n<li><strong>效率：</strong>HashMap效率更高，HashTable基本上已经不怎么用了，如果需要保证线程安全就选择ConCurrentHashMap</li>\n<li><strong>Null Key 和 Null Value</strong>：HashMap支持Null Key 和 Null Value，但是Null Key 只能存在一个，Null Value可以有多个。HashTable并不支持 Null Key 和Null Value，否则会报错NPE（空指针异常）</li>\n<li><strong>初始容量：</strong><ul>\n<li>不指定：HashTable默认是11，每次扩容变为原来的 2n+1。 HashMap默认16，每次扩容变为原来的2倍</li>\n<li>指定：HashTable直接用指定的。HashMap则会扩充为2的幂次方大小 10 –&gt; 16。为什么总是2的幂次方，因为 取余（%）操作可以利用 二进制位与（&amp;）操作代替。（也就是说 hash%length&#x3D;&#x3D;hash&amp;(length-1)的前提是 length 是 2 的 n 次方；）</li>\n</ul>\n</li>\n<li><strong>底层数据结构：</strong>HashTable没有链表转为红黑树的操作</li>\n</ol>\n<h4 id=\"11、HashMap-和-HashSet-区别\"><a href=\"#11、HashMap-和-HashSet-区别\" class=\"headerlink\" title=\"11、HashMap 和 HashSet 区别\"></a>11、HashMap 和 HashSet 区别</h4><ol>\n<li>HashSet的底层就是HashMap 实现的。</li>\n<li>HashSet仅存储值，HashMap存储键值对 Key-Value</li>\n<li>HashSet add方法添加元素，HashMap则add（key，value）方法添加元素</li>\n</ol>\n<h3 id=\"二、并发编程\"><a href=\"#二、并发编程\" class=\"headerlink\" title=\"二、并发编程\"></a>二、并发编程</h3><h4 id=\"1、volatile关键字\"><a href=\"#1、volatile关键字\" class=\"headerlink\" title=\"1、volatile关键字\"></a>1、volatile关键字</h4><ol>\n<li>volatile保证变量对所有线程的可见性，当volatile变量被修改时，新值对所有变量会立即更新。即多线程环境下使用volatile修饰的变量的值一定是最新的。</li>\n<li>禁止指令重排序</li>\n</ol>\n<h4 id=\"2、synchronized关键字\"><a href=\"#2、synchronized关键字\" class=\"headerlink\" title=\"2、synchronized关键字\"></a>2、synchronized关键字</h4><p>主要是用于解决多个线程之间访问资源的同步性，可以保证被其修饰的方法或代码块在任意时刻只能有一个线程执行。（悲观锁的思想）</p>\n<p>修饰实例方法：给当前对象实例加锁，进入同步代码块之前需要获取当前对象实例的锁</p>\n<p>修饰静态方法：给当前的类加锁，会作用于当前类的所有对象实例。</p>\n<p>修饰代码块：既可以锁定对象实例，也可以锁定类，以括号中的代码为准</p>\n<ul>\n<li><code>synchronized(object)</code> 表示进入同步代码库前要获得 <strong>给定对象的锁</strong>。</li>\n<li><code>synchronized(类.class)</code> 表示进入同步代码前要获得 <strong>给定 Class 的锁</strong></li>\n</ul>\n<p><strong>底层实现：</strong>主要通过两个指令实现，monitorenter指令指向同步代码块的开始位置，monitorexit指令指向同步代码块的结束位置。在执行monitorenter指令时，线程尝试获取锁也就是获取对象监视器monitor的持有权，对象监视器是由c++实现的，每个对象中都内置了一个对象监视器对象。如果锁的计数器为0，则表示可以被获取，获取后将锁计数器设为1，业务执行完毕后通过monitorexit指令释放锁，将锁的计数器设为0，然后其他线程才可以尝试获取锁。如果获取锁失败，当前线程需要阻塞等待，直到锁被另外一个线程释放为止。</p>\n<h4 id=\"3、乐观锁-与-悲观锁\"><a href=\"#3、乐观锁-与-悲观锁\" class=\"headerlink\" title=\"3、乐观锁 与 悲观锁\"></a>3、乐观锁 与 悲观锁</h4><ol>\n<li><strong>悲观锁：</strong>总是假设最坏的情况，认为资源每次被访问的时候都会出问题（比如共享数据被修改），所以每次在获取资源操作的时候都会上锁，共享资源每次只给一个线程使用，其他线程都会阻塞。高并发场景下会增加系统开销，因为线程阻塞会导致系统的上下文切换。还有可能造成死锁的问题。</li>\n<li><strong>乐观锁：</strong>乐观锁总是假设最好情况，认为共享资源每次被访问都不会出现问题，线程无需等待，只是在提交修改的时候去验证对应的数据是否被其他线程修改了（<strong>版本号或者CAS算法</strong>）</li>\n<li><strong>使用场景</strong>：悲观锁适用于：写操作比较多的场景 乐观锁适用于：读操作较多的场景</li>\n<li><strong>乐观锁的实现：</strong><ol>\n<li><strong>版本号机制：</strong>在数据表中加上一个数据版本号的字段，表示数据被修改的次数，要更新数据前读取该版本，更新操作完成，提交更新时再次读取版本号的值，与之前的值相等才更新。</li>\n<li><strong>CAS算法：</strong>Compare And Swap（比较与交换）思想：使用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。乐观锁产生的问题<ol>\n<li>ABA问题：初次读取值为A，要更新时再检查依然是A，但是这个过程中被改为了B，又重新改为了A。</li>\n<li>CAS自旋操作：就是执行不成功就一直循环执行直到成功为止，如果长时间循环，会对CPU带来较大的开销</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"4、线程死锁\"><a href=\"#4、线程死锁\" class=\"headerlink\" title=\"4、线程死锁\"></a>4、线程死锁</h4><p>多个线程同时被阻塞，产生死锁的四个必要条件：</p>\n<ol>\n<li>互斥条件，该资源在任意一个时刻只能由一个线程占用</li>\n<li>请求与保持：一个线程因为请求资源被阻塞时，不会去是释放已经占用的资源</li>\n<li>不剥夺条件：在线程未主动释放资源之前，不能被其他线程强行剥夺，只能使用完毕自行释放</li>\n<li>循环等待：若干线程在等待资源时形成了首尾相接的情况</li>\n</ol>\n<p>预防死锁：</p>\n<ol>\n<li>破坏互斥条件：一次性申请所有资源</li>\n<li>破坏不剥夺条件：占用部分资源的线程进一步申请资源时如果被阻塞，就主动释放它所占用的资源</li>\n<li>按序申请资源，破坏循环等待条件</li>\n</ol>\n<p>避免死锁：</p>\n<p>借助算法，如银行家算法等对资源分配进行计算评估，使其进入安全状态。</p>\n<p>还有哪些关键字</p>\n<p><img src=\"https://img.miccai.top/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/image-20231225103712047.png\" alt=\"image-20231225103712047\"></p>\n<h4 id=\"5、说说线程的生命周期和状态\"><a href=\"#5、说说线程的生命周期和状态\" class=\"headerlink\" title=\"5、说说线程的生命周期和状态?\"></a>5、说说线程的生命周期和状态?</h4><p>New:初始状态，线程被创建之后但没有被调用Start()</p>\n<p>RUNNABLE:运行状态，线程被调用了Start()等待运行的状态。</p>\n<p>​\t在操作系统层面是有：READY和Running状态的区分，但是在JVM层面只能看到RUNNABLE状态</p>\n<p>BLOCK:阻塞状态，需要等待锁释放</p>\n<p>WAITING:等待状态，需要其他线程通知或中断</p>\n<p>TIME_WAITING:超时等待状态，可以在指定的时间后自行返回而不是像WAITING那样一直等待</p>\n<p>TERMINATED：终止状态，表示该线程运行完毕</p>\n<h4 id=\"6、线程的上下文切换\"><a href=\"#6、线程的上下文切换\" class=\"headerlink\" title=\"6、线程的上下文切换\"></a>6、线程的上下文切换</h4><p>每个线程在执行过程中，会有自己的运行条件和状态(也称为上下文)，当出现如下情况时，线程会从占用CPU的状态退出。主动让出CPU，比如调用了sleep、wait等，时间片用完、或者请求 IO，线程被阻塞。然后就会发生线程切换，需要保存当前线程的上下文，用于线程下次占用CPU的时候恢复线程。并加载下一个将要占用CPU的线程的上下文。如果切换频繁就会造成系统的整体效率低下</p>\n<h4 id=\"7、线程池的核心参数：\"><a href=\"#7、线程池的核心参数：\" class=\"headerlink\" title=\"7、线程池的核心参数：\"></a>7、线程池的核心参数：</h4><ol>\n<li>corePoolSize：核心线程大小，线程池一直运行，核心线程就不会停止</li>\n<li>maximumPoolSize：线程池最大线程数量，</li>\n<li>keepAliveTime：非核心线程的心跳时间，在该时间内没有运行任务，就会消亡</li>\n<li>workQueue：新任务来的时候判断当前运行的线程数量是否达到核心线程数，如果达到，任务就会被存放到阻塞队列。</li>\n<li>unit：keepAliveTime的时间单位</li>\n<li>ThreadFactory：线程工厂，创建新线程会用到</li>\n<li>defaultHandler：饱和策略。</li>\n</ol>\n<h4 id=\"8、Java-实现并发的几种方法\"><a href=\"#8、Java-实现并发的几种方法\" class=\"headerlink\" title=\"8、Java 实现并发的几种方法\"></a>8、Java 实现并发的几种方法</h4><ol>\n<li>synchronized关键字</li>\n<li>Volatile关键字</li>\n<li>实现Runnable接口创建线程</li>\n<li>继承Thread类创建线程</li>\n<li>线程池</li>\n<li>stream流也可以</li>\n</ol>\n<h4 id=\"9、ThreadLocal\"><a href=\"#9、ThreadLocal\" class=\"headerlink\" title=\"9、ThreadLocal\"></a>9、ThreadLocal</h4><h3 id=\"三、JVM\"><a href=\"#三、JVM\" class=\"headerlink\" title=\"三、JVM\"></a>三、JVM</h3><h4 id=\"1、JVM内存分区模型\"><a href=\"#1、JVM内存分区模型\" class=\"headerlink\" title=\"1、JVM内存分区模型\"></a>1、JVM内存分区模型</h4><p>主要分为以下几个区域：</p>\n<ol>\n<li><strong>程序计数器</strong>：每个线程都有自己的程序计数器，用于指示当前线程执行的字节码指令的行号，分支、循环、跳转、异常处理等基础功能都依赖这个指示器完成。每个线程都有一个独立的程序计数器，确保线程切换后能恢复到正确的执行位置。</li>\n<li><strong>虚拟机栈</strong>：也称为Java方法栈，用于存储方法执行时的局部变量表、操作数栈、动态链接、方法出口等信息。每个线程在执行一个方法时，都会为该方法分配一个栈桢，并将其压入虚拟机栈，当方法执行完毕后，虚拟机会将其出栈。</li>\n<li><strong>本地方法栈</strong>：与虚拟机栈类似，用于存储本地方法的执行信息</li>\n<li><strong>堆</strong>：用于存储对象实例，是JVM中最大的一块内存区域。堆是被所有线程共享的，当创建一个新对象时，对象实例存储在堆中，堆中存储的对象实例都有一个标记用于指示对象是否存活。垃圾回收器会周期性地回收那些没有被标记为存活的对象。</li>\n<li><strong>方法区</strong>：用于存储已被虚拟机加载的类信息、常量、静态变量、即编译器编译后的代码等数据</li>\n<li><strong>运行时常量池</strong>：是方法区的一部分，用于存储编译期间生成的各种字面量和符号引用的常量池。</li>\n</ol>\n<h4 id=\"2、JVM垃圾回收算法\"><a href=\"#2、JVM垃圾回收算法\" class=\"headerlink\" title=\"2、JVM垃圾回收算法\"></a>2、JVM垃圾回收算法</h4><p>常见的垃圾回收算法有以下几种类型：</p>\n<ol>\n<li><strong>标记——清除算法：</strong>分为标记和清除两个阶段。标记阶段遍历所有活动对象并打上标记，清除阶段将未被标记的对象删除。优点是不需要连续的内存空间，缺点是清除后可能会产生内存碎片</li>\n<li><strong>复制算法：</strong>将可用内存分为两块，只使用其中一块，当一块满了，将存活对象复制到另一块未被使用的空间，然后清除使用的那块。优点是：简单高效，不会产生内存碎片。缺点是可用内存缩小为原来的一半。不适合老年代：存活对象数量比较大，复制性能很差。</li>\n<li><strong>标记——整理算法：</strong>与标记——清除类似，在标记阶段与其相似，但是在清除阶段将存活对象整理到内存的一端，然后清除端边界外的所有对象。优点是不会产生内存碎片，缺点是比较慢。</li>\n<li><strong>分代收集算法：</strong>当前虚拟机的垃圾收集都采用分代收集算法，根据对象存活的时间将内存分为几个区域，每个区域采用不同的回收策略。新生代、老年代分别采取不同的回收算法。<ol>\n<li>新生代：分为一个Eden区和两个Survivor 区，当Eden区没有空间时，虚拟机将发起一次Minor GC（只对新生代进行垃圾收集），执行完后，如果对象能够存在Eden区的话，就会直接在Eden分配内存。对象每在Survior区熬过一次，年龄标志就增长1，增长到一定程度就会晋升到老年代中，这个值默认是15</li>\n<li>大对象和长期存活的对象将会进入老年代，Old GC，只对老年代进行垃圾收集</li>\n<li>Mixed GC：混合收集</li>\n<li>Full GC，收集整个Java堆和方法区</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"3、双亲委派模式\"><a href=\"#3、双亲委派模式\" class=\"headerlink\" title=\"3、双亲委派模式\"></a>3、双亲委派模式</h4><p>是Java类加载器在加载类时所采用的的一种设计模式。这种模式的核心思想是：当一个类加载器收到类加载请求时，首先不会自己尝试加载，而是将请求委派给它的父类加载器。依次递归，指导最顶层的启动类加载器；如果父类加载器无法加载该类，子类才尝试自己加载。</p>\n<p>主要作用：</p>\n<ol>\n<li><strong>避免类的重复加载</strong>：通过委派给父类加载器，同一个类不会被多个类加载器重复加载。有助于节省内存资源</li>\n<li><strong>保护Java核心类库</strong>：由于双亲委派制的存在，用户自定义的类加载器无法直接加载Java核心类库，java.lang.String等。能够确保Java核心类库的安全性。例如当我们自定义了一个java.lang包，并且定义了一个类String，一旦运行代码，需要加载这个类的时候，就会向上一层层的委派到顶层的<strong>启动类加载器</strong>，顶层的引导类加载器会加载Java核心类库中的java.lang.String，该类中没有main方法，因此程序提示在<strong>java.lang.String类中找不到main方法</strong><ol>\n<li><img src=\"https://ask.qcloudimg.com/http-save/yehe-2219188/k9iysve4gq.png\" alt=\"img\"></li>\n</ol>\n</li>\n<li><strong>维护类加载器的层次结构</strong>：双亲委派模式使得各级类加载器可以按照⼀定的层次结构来组织和管理。这有助于 降低类加载器的复杂性，简化类加载过程。</li>\n</ol>\n<h4 id=\"4、JVM-的垃圾回收机制\"><a href=\"#4、JVM-的垃圾回收机制\" class=\"headerlink\" title=\"4、JVM 的垃圾回收机制\"></a>4、JVM 的垃圾回收机制</h4><p>在Java中，程序员不需要显示的区释放一个对象的内存，而是由虚拟机自行执行。想要知道JVM的垃圾回收机制，首先我们得知道JVM是如何给一个对象分配内存的。</p>\n<ol>\n<li>大多数情况下，对象会在新生代中的Eden区进行分配内存，当Eden区没有足够空间时，会进行一次Minor GC。此时会将Eden区域的内容转移到Survivor中去，如果该空间不足，会通过分配担保机制将新生代的对象提前转移到老年代中。</li>\n<li>大对象也会直接进入老年代中，如字符串、数组等</li>\n<li>长期存活的对象将进入老年代。虚拟机会给每个对象分配一个Age计数器，初始在Eden区为0，经过一次Minor GC还存活，并且可以被Survivor区域所容纳，就会移动到Survivor区，Age计数器加一。每存活过一次Minor GC，Age计数器就会 + 1。到达15时，会转移到老年代中。</li>\n</ol>\n<ul>\n<li>如何判断是否需要进行回收：<ol>\n<li>进行可达性分析：通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。</li>\n<li>然后通过一些垃圾回收算法进行垃圾回收。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"5、新生代和老生代怎么区分的\"><a href=\"#5、新生代和老生代怎么区分的\" class=\"headerlink\" title=\"5、新生代和老生代怎么区分的\"></a>5、新生代和老生代怎么区分的</h4><h3 id=\"四、计算机网络\"><a href=\"#四、计算机网络\" class=\"headerlink\" title=\"四、计算机网络\"></a>四、计算机网络</h3><h4 id=\"TCP连接的三次握手\"><a href=\"#TCP连接的三次握手\" class=\"headerlink\" title=\"TCP连接的三次握手\"></a>TCP连接的三次握手</h4><p>最开始，客户端和服务端都处于<code>Close</code>状态，先是服务端主动监听某个端口，进入<code>Listen</code>状态。</p>\n<ol>\n<li>第一次握手，由客户端向服务端发送建立连接的请求，向服务端发送一个同步报文，同时初始化一个随机数作为<strong>客户端的初始序列号seq&#x3D;x</strong>，并且进入SYN_SENT状态，等待服务器的确认。服务端接到请求之后，可以确认自己的接受能力和客户端的发送能力正常。</li>\n<li>第二次握手，服务端受到连接请求报文后，如果同意建立连接，则向客户端发送同步确认报文，确认号ack&#x3D;x+1，同时初始化一个随机数作为<strong>服务端的初始序列号seq&#x3D;y</strong>，此时服务器进入SYN_RECV状态。客户端收到这次报文后，能够确认自己的收、发能力，以及服务端的收、发能力都正常。</li>\n<li>客户端收到服务端的确认之后，向服务端发送一个确认报文，确认号ack&#x3D;y+1，序列号seq &#x3D; x+1，服务端接收到这次报文之后能够确认自己的发送能力和客户端的接收能力都正常，完成三次握手，第三次握手还可以携带数据。</li>\n</ol>\n<h4 id=\"为什么是三次握手？\"><a href=\"#为什么是三次握手？\" class=\"headerlink\" title=\"为什么是三次握手？\"></a>为什么是三次握手？</h4><ol>\n<li>三次握手可以阻止重复历史连接的初始化</li>\n<li>三次握手才可以同步双方的初始序列号</li>\n<li>三次握手才可以保证双方均具有接收和发送的能力</li>\n</ol>\n<h4 id=\"TCP连接的四次挥手\"><a href=\"#TCP连接的四次挥手\" class=\"headerlink\" title=\"TCP连接的四次挥手\"></a>TCP连接的四次挥手</h4><p>第一次挥手，客户端向服务端发送连接释放报文FIN，主动关闭连接，同时等待服务端的确认，序列号&#x3D;客户端上次发送报文的最后一个字节的序号+1，确认号是服务端上次发送的报文的最后一个字节的序号+1</p>\n<p>第二次挥手：服务端接收到连接释放的报文后，立即发出确认报文，序列号等于刚才客户端的确认号，确认号等于刚才客户端的序列号+1。此时TCP处于半关闭状态，服务端还可以继续向客户端发送没有发完的数据，发送完毕后。</p>\n<p>第三次挥手，服务端向客户端发送连接释放报文FIN，主动关闭连接，同时等待客户端的确认。序列号&#x3D;服务端上次发送报文的最后一个字节的序号+1，与第二次挥手相同，因为这段时间客户端没有发送数据</p>\n<p>第四次挥手：客户端收到服务端的释放连接报文后，立即发送确认报文，序列号等于&#x3D;上面的确认号+1，确认号&#x3D;上面的序列号+1，服务端进入Close状态。然后客户端进入TIME_WAIT状态，等待2*MSL（最长报文寿命），之后才会进入Close状态。</p>\n<h5 id=\"为什么需要等待2-MSL：\"><a href=\"#为什么需要等待2-MSL：\" class=\"headerlink\" title=\"为什么需要等待2*MSL：\"></a>为什么需要等待2*MSL：</h5><p>​\t确保第四次握手，客户端的确认报文能够到达服务端，从而使服务端正常关闭连接。如果没有正常到达服务端，服务端会超时重传FIN，此时如果客户端已经断开连接，那么就无法响应服务端的请求，服务端无法正常收到确认报文，无法正常关闭连接。2*MSL&#x3D;客户端确认报文1MSL+服务端重传FIN报文1MSL，这样能够确保服务端能够正常关闭。</p>\n<h3 id=\"职业规划\"><a href=\"#职业规划\" class=\"headerlink\" title=\"职业规划\"></a>职业规划</h3><ul>\n<li>能在1-2年完全胜任岗位职责，有优秀的产出</li>\n<li>2-3年成为岗位熟手，自身优秀的同时能带教新人</li>\n<li>3-5年成为业务骨干或一线经理，能带领小团队协作完成任务</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Javase"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2024/01/03/%E6%A9%99-API%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/",
            "url": "https://ooooddddd.github.io/2024/01/03/%E6%A9%99-API%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/",
            "title": "橙-API开放平台相关问题",
            "date_published": "2024-01-03T11:58:05.000Z",
            "content_html": "<p>基于React + Spring Boot + Dubbo + Gateway的API接口开放调用平台。管理员可以接入并发布接口，可视化各接口调用情况；用户可以开通接口调用权限、浏览接口及在线调试，并通过客户端 SDK 轻松调用接口。</p>\n<p><strong>项目难点：</strong></p>\n<ul>\n<li><p>权限校验，切面注解。</p>\n<ol>\n<li><p>首先定义一个注解类，该注解允许在方法上定义两种权限规则：<code>anyRole</code> 表示任意角色通过，<code>mustRole</code> 表示必须有特定角色才能通过。</p>\n<ul>\n<li><pre><code class=\"java\">/**\n * 权限校验\n * @author zc\n   */\n   @Target(ElementType.METHOD)\n   @Retention(RetentionPolicy.RUNTIME)\n   public @interface AuthCheck &#123;\n\n   /**\n\n    * 有任何一个角色\n      *\n    * @return\n      */\n      String[] anyRole() default &quot;&quot;;\n\n   /**\n\n    * 必须有某个角色\n      *\n    * @return\n      */\n      String mustRole() default &quot;&quot;;\n\n&#125;\n<pre class=\"language-none\"><code class=\"language-none\">\n2. 然后定义一个拦截器进行权限校验\n\n   &#96;&#96;&#96;java\n   &#x2F;**\n    * 权限校验 AOP\n    *\n    * @author zc\n    *&#x2F;\n   @Aspect\n   @Component\n   public class AuthInterceptor &#123;\n   \n       @Resource\n       private UserService userService;\n   \n       &#x2F;**\n        * 执行拦截\n        *\n        * @param joinPoint\n        * @param authCheck\n        * @return\n        *&#x2F;\n       @Around(&quot;@annotation(authCheck)&quot;)\n       public Object doInterceptor(ProceedingJoinPoint joinPoint, AuthCheck authCheck) throws Throwable &#123;\n           List&lt;String&gt; anyRole &#x3D; Arrays.stream(authCheck.anyRole()).filter(StringUtils::isNotBlank).collect(Collectors.toList());\n           String mustRole &#x3D; authCheck.mustRole();\n           RequestAttributes requestAttributes &#x3D; RequestContextHolder.currentRequestAttributes();\n           HttpServletRequest request &#x3D; ((ServletRequestAttributes) requestAttributes).getRequest();\n           &#x2F;&#x2F; 当前登录用户\n           User user &#x3D; userService.getLoginUser(request);\n           &#x2F;&#x2F; 拥有任意权限即通过\n           if (CollectionUtils.isNotEmpty(anyRole)) &#123;\n               String userRole &#x3D; user.getUserRole();\n               if (!anyRole.contains(userRole)) &#123;\n                   throw new BusinessException(ErrorCode.NO_AUTH_ERROR);\n               &#125;\n           &#125;\n           &#x2F;&#x2F; 必须有所有权限才通过\n           if (StringUtils.isNotBlank(mustRole)) &#123;\n               String userRole &#x3D; user.getUserRole();\n               if (!mustRole.equals(userRole)) &#123;\n                   throw new BusinessException(ErrorCode.NO_AUTH_ERROR);\n               &#125;\n           &#125;\n           &#x2F;&#x2F; 通过权限校验，放行\n           return joinPoint.proceed();\n       &#125;\n   &#125;</code></pre>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>最后在需要进行权限校验的方法上添加<code>@AuthCheck</code>注解即可</p>\n<ul>\n<li><img src=\"https://img.miccai.top/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/image-20240102135217501.png\" alt=\"image-20240102135217501\"></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>网关设计</p>\n</li>\n</ul>\n<h4 id=\"1、为什么要做这个项目：\"><a href=\"#1、为什么要做这个项目：\" class=\"headerlink\" title=\"1、为什么要做这个项目：\"></a>1、为什么要做这个项目：</h4><p>尽可能地帮助和服务更多的用户和开发者，让他们可以方便快捷地获取他们想要的信息和功能。接口开放平台可以帮助开发者快速接入一些常用的服务，从而提高他们的开发效率，比如天气服务、随机头像、心灵鸡汤等，他们是一些应用或者小程序中常见的功能，所以提供这些接口可以帮助开发者更加方便地实现这些功能。这些接口也可以让用户在使用应用时获得更加全面的功能和服务，从而提高用户体验。所以我认为接口开放平台是一个有意义的项目，可以为用户和开发者带来更多的便利和价值。</p>\n<p>表结构：用户表（user）、接口信息表（interfaceInfo）、用户接口表（userInterface，用于记录用户对接口是否有调用权限，是否有剩余调用次数等）、土味情话表（用于提供随机土味情话服务的接口需要的表）</p>\n<h4 id=\"2、项目架构设计\"><a href=\"#2、项目架构设计\" class=\"headerlink\" title=\"2、项目架构设计\"></a>2、项目架构设计</h4><p>采用了前后端分离的架构设计。前端使用Ant-design-pro框架快速开发，然后使用Nginx进行部署，通过Nginx反向代理将请求转发到后端Web项目，因为项目刚刚上线，用户量较少，暂时采用了单机部署的模式，未来可能采取<strong>水平扩容</strong>的方式，增加多台节点，通过nginx的<strong>负载均衡</strong>，将请求平均的分发到多个节点上，以支撑更高的并发量。我的web项目使用Spring Boot开发，并且连接到到了 Mysql数据库 和 Redis，数据库主要用来存储用户和接口的相关信息，通过Redis实现了分布式session，因为考虑到未来要是用分布式架构，可以避免使用tomcat保存session出现用户登录失效的问题。</p>\n<h5 id=\"反向代理与正向代理\"><a href=\"#反向代理与正向代理\" class=\"headerlink\" title=\"反向代理与正向代理\"></a>反向代理与正向代理</h5><p>反向代理：客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器，获取数据后再返回给客户端。对外暴露的是反向代理服务器地址，隐藏了真实服务器 IP 地址。反向代理“代理”的是目标服务器。</p>\n<p>正向代理：顺着请求的方向进行的代理，即代理服务器它是由你配置为你服务，去请求目标服务器地址。类似于科学上网</p>\n<h5 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h5><p>常见的负载均衡算法：</p>\n<ol>\n<li>随机法，如果没有配置权重的话，所有服务器被访问到的概率是相等的。权重越高，被访问到的概率也越高。适合服务器性能接近的集群，其中每个服务器承载相同的负载，缺点：部分机器在一段时间之内无法被访问到。</li>\n<li>轮询法：挨个服务器进行访问，当然，也可以设置权重。</li>\n<li>一致性Hash法：相同参数的请求总是发送到同一台服务器进行处理，比如同个IP的请求</li>\n<li>最小连接法：遍历服务器节点列表，选取活动连接数（可以理解为正在处理的请求数）最小的一台服务器来响应当前的请求。</li>\n<li>两次随机法：两次随机法在随机法的基础上多了一次随机，多选出一台服务器，然后根据两台服务器的负载情况，从中选择一台最合适的</li>\n</ol>\n<h5 id=\"水平扩容\"><a href=\"#水平扩容\" class=\"headerlink\" title=\"水平扩容\"></a>水平扩容</h5><p>垂直扩容：增加自身的容量。</p>\n<p>水平扩容：增加节点的方式来增加整个系统的容量。垂直扩容比较方便，但是会受制于机器的内存、性能等。所以到了一定阶段肯定要进行水平扩容。</p>\n<h4 id=\"3、技术选型及原因\"><a href=\"#3、技术选型及原因\" class=\"headerlink\" title=\"3、技术选型及原因\"></a>3、技术选型及原因</h4><p>使用SpringBoot是因为通过<strong>自动装配</strong>能够提高项目的开发效率，能够很好地整合Spring的相关服务。使用Mysql的原因是考虑到未来打算上用户充值交易功能，限制调用次数等场景需要使用事务来保证数据的<strong>完整性和一致性</strong>。使用Redis是因为可以用来实现分布式session、锁、缓存等功能。因为Redis是一个单独的中间件，不同客户端可以向同一个Redis或者集群中存放session&#x2F;加锁，能够保证资源在分布式服务下都可见。由于Redis是单线程的，同时也支持Lua脚本，可以保证并发安全的问题，也能够轻松实现分布式锁的功能。</p>\n<h5 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h5><p><strong>什么是自动装配：</strong>在没有SpringBoot的情况下，如果我们需要引入第三方依赖，需要手动配置，非常麻烦。但是，在SpringBoot中，我们直接引入一个 starter 即可。比如想要使用redis的话，直接在项目中引入对应的starter，然后在application.yml中配置即可。</p>\n<p><strong>如何实现自动装配与按需加载的：</strong>核心注解：SpringBootApplication注解，是@EnableAutoConfiguration、（启用SpringBoot的自动装配机制）@Configuration（允许上下文中注册额外的bean或者导入其他配置类）、@ComponentScan（扫描被@Compent、@Service、@Controller注解修饰的bean），注解默认会扫描启动类所在的包下的所有类，也可以自定义不扫描某些bean。</p>\n<p>自动装配核心功能的实现实际是通过 <code>AutoConfigurationImportSelector</code>类实现的，该类实现<code>ImportSelector</code>接口，同时实现接口中的<code>selectImports</code>方法，该方法<strong>获取所有符合条件的类的全限定类名，这些类需要被加载到 IoC 容器中</strong>。主要是通过读取<code>META-INF/spring.factories</code>来获取需要自动装配的类的。同时根据<code>@ConditionalOnXXX</code>注解来实现按需加载</p>\n<p>项目中的SDK利用上述功能开发成了一个Starter，首先引入Spring Boot 相关依赖，然后创建一个类</p>\n<p><img src=\"https://img.miccai.top/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/image-20231221102811685.png\" alt=\"image-20231221102811685\"></p>\n<p>最后在resources&#x2F;META-INF目录下创建一个spring.factories文件，引入该类</p>\n<pre class=\"language-none\"><code class=\"language-none\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;com.zc.orangeapiclientsdk.OrangeApiClientConfig</code></pre>\n\n<p>此时，该类就被做成了一个Starter，可以给其他开发者调用。</p>\n<h5 id=\"共享session\"><a href=\"#共享session\" class=\"headerlink\" title=\"共享session\"></a>共享session</h5><p>在分布式系统中，存在多台服务器，如果用户登陆信息存储在服务器1中，第二次访问时用户被分配到了服务器2，此时就需要重新登陆。因此引入Redis 对这些 Session 信息进行统一的存储和管理，这样无论请求发送到那台服务器，服务器都会去同一个 Redis 获取相关的 Session 信息，这样就解决了分布式系统下 Session 存储的问题。</p>\n<h4 id=\"4、开发流程\"><a href=\"#4、开发流程\" class=\"headerlink\" title=\"4、开发流程\"></a>4、开发流程</h4><p>首选参考了一些已有的产品，根据这些产品，总结出比较好的功能点，再结合自己想要实现的一些特色功能，做了一个项目的整体设计，然后再进行技术选型。</p>\n<h4 id=\"5、项目核心：网关\"><a href=\"#5、项目核心：网关\" class=\"headerlink\" title=\"5、项目核心：网关\"></a>5、项目核心：网关</h4><p>本平台的关键点就在于提供接口服务，要保证接口的高可用性和稳定性，所有的接口服务项目独立进行部署，隐藏其真实的接口地址及调用，调用接口服务的请求都必须经过网关进行统一鉴权、流量控制（路由转发）、流量染色、负载均衡，接口保护、统一日志等，之后再将请求转发到真实的接口地址，防止接口地址被恶意调用，盗刷等。</p>\n<p>在本项目中，使用API网关做了什么：</p>\n<p>1、统一鉴权：应用API签名认证算法校验用户请求的合法性。</p>\n<p>2、公共业务逻辑：对每个接口的调用进行集中的统计。</p>\n<p>3、路由转发：前端发送请求到API网关，通过网关转发到实际的接口地址</p>\n<p>4、流量染色：给经过网关的请求加上特定的请求头参数，便于让API服务确定来源及合法性。</p>\n<h4 id=\"6、API签名认证算法\"><a href=\"#6、API签名认证算法\" class=\"headerlink\" title=\"6、API签名认证算法\"></a>6、API签名认证算法</h4><p>该算法是用于验证API请求的合法行和完整性的安全机制。具体实现：</p>\n<p>1、生成密钥对，给每个用户生成唯一的密钥对(ak,sk)，并保存到数据库中，仅用户本人可查看自己的密钥对。</p>\n<p>2、请求方生成签名：请求方（客户端）使用sk对请求参数和数据进行签名，签名内容包括请求参数、时间戳、随机数等，签名加密算法此处选择MD5</p>\n<p>3、请求方发送请求：请求方将请求参数、签名、用户标识一起发送给API提供者，通常会把签名信息放到请求头参数中传递，注意这里千万不能传递sk。</p>\n<p>4、API提供者验证签名：在API网关中，通过请求头获取到用户标识，根据该标识去数据库查询到该用户对应的ak，sk，并使用相同的签名算法生成签名，和请求头中的签名进行对比，如果一致，则API提供者可以信任请求方，然后可以进行后续的操作。</p>\n<h4 id=\"7、为什么使用Dubbo-RPC\"><a href=\"#7、为什么使用Dubbo-RPC\" class=\"headerlink\" title=\"7、为什么使用Dubbo RPC\"></a>7、为什么使用Dubbo RPC</h4><p>RPC（远程过程调用）是一种用于实现分布式系统通信的协议和技术。它允许一个计算机从程序调用另一个地址的函数或方法，就像本地调用一样。Dubbo是基于Java的高性能、轻量级的开源RPC框架，便于开发者轻松实现分布式系统和微服务架构。简单来说就是性能高、协议多、功能强、生态好、易扩展</p>\n<h4 id=\"8、如何使用的Dubbo-RPC\"><a href=\"#8、如何使用的Dubbo-RPC\" class=\"headerlink\" title=\"8、如何使用的Dubbo RPC\"></a>8、如何使用的Dubbo RPC</h4><p>在正式运用Dubbo到项目中之前，先阅读了Dubbo的官方文档，利用快速启动跑通了基础的RPC调用的Demo，明确了注册中心，Maven包依赖和各种版本号。先在本地启动Nacos注册中心，然后在服务提供者和服务调用者项目引入Dubbo依赖（最好是引入相同的依赖和配置），编写nacos的连接配置，并且需要在启动类通过@EnableDubbo注解开启Dubbo支持</p>\n<p>编写服务提供者类和服务调用者客户端类，分别加上@DubboService和DubboReference注解，优先启动服务提供者项目，在Nacos控制台观察到注册信息之后，再启动服务调用者项目。</p>\n<h4 id=\"9、\"><a href=\"#9、\" class=\"headerlink\" title=\"9、\"></a>9、</h4>",
            "tags": [
                "API开放平台"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2024/01/03/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "https://ooooddddd.github.io/2024/01/03/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "MySQL面试题",
            "date_published": "2024-01-03T11:46:41.000Z",
            "content_html": "<h1 id=\"Mysql相关面经\"><a href=\"#Mysql相关面经\" class=\"headerlink\" title=\"Mysql相关面经\"></a>Mysql相关面经</h1><h3 id=\"执行一条-SQL-查询语句，期间发生了什么？\"><a href=\"#执行一条-SQL-查询语句，期间发生了什么？\" class=\"headerlink\" title=\"执行一条 SQL 查询语句，期间发生了什么？\"></a>执行一条 SQL 查询语句，期间发生了什么？</h3><ol>\n<li>连接器：客户端通过TCP请求发送连接请求到Mysql连接器，连接器会对该请求进行权限验证和连接资源分配</li>\n<li>查询缓存，命中缓存则直接返回数据，否则继续向下执行</li>\n<li>解析SQL，通过解析器对SQL语句进行词法、语法分析，检查数据表和数据列是否存在，别名是否存在歧义等</li>\n<li>优化，是否使用索引，生成执行计划</li>\n<li>交给执行器，将数据保存到结果集中，同时逐步将数据缓存到查询缓存当中，最后将结果集返回给客户端。</li>\n</ol>\n<h3 id=\"一、索引\"><a href=\"#一、索引\" class=\"headerlink\" title=\"一、索引\"></a>一、索引</h3><h4 id=\"用过哪些索引\"><a href=\"#用过哪些索引\" class=\"headerlink\" title=\"用过哪些索引\"></a>用过哪些索引</h4><h5 id=\"索引的作用\"><a href=\"#索引的作用\" class=\"headerlink\" title=\"索引的作用\"></a><strong>索引的作用</strong></h5><p>相当于书的目录，是一种可以用于快速查询和检索数据的数据结构，可以看成是一种排序好的数据结构。</p>\n<h5 id=\"优缺点：\"><a href=\"#优缺点：\" class=\"headerlink\" title=\"优缺点：\"></a><strong>优缺点</strong>：</h5><p>优点：可以加快数据的检索速度，主要是大大减少检索的数据量。通过唯一性索引，可以保证数据库表中的每一行数据的唯一性。</p>\n<p>缺点：从时间层面讲：创建和维护索引需要耗费时间，并且对表中的数据进行增删改的时候，如果存在索引，那么索引也需要动态修改，一定程度上会减低SQL的执行效率。空间上：索引也需要文件进行存储，耗费一定的空间。</p>\n<h5 id=\"索引的数据结构类型\"><a href=\"#索引的数据结构类型\" class=\"headerlink\" title=\"索引的数据结构类型\"></a>索引的数据结构类型</h5><p><strong>哈希索引：</strong>精确匹配索引所有列的查询数据，对于每一行数据，存储引擎针对所有索引列计算一个哈希码。为什么不使用这个，主要是因为hash索引不支持顺序和范围查询，只适合等值查询。</p>\n<p><strong>B-Tree和B+Tree索引的区别</strong></p>\n<ol>\n<li>B树的所有节点都会存放key和data，而B+数只有叶子节点存放key和data，其他内节点只存放key。</li>\n<li>B树的叶子节点都是独立的，而B+树的叶子结点有一条指向相邻叶子结点的引用，更加方便扫库</li>\n<li>B树进行范围查询，需要对树进行中序遍历，直到找到查找的上限，而B+树的范围查询，只需要遍历叶子结点组成的链表即可。</li>\n</ol>\n<p>综上所述，B+具备更稳定的查询效率，更低的IO次数和更适合范围查询等优势而广泛应用。</p>\n<p><strong>主键索引</strong>，一张表中只能有一个主键，并且主键不能为null，不能重复，在mysql的InnoDB表中，如果没有显示指定表的主键时，InnoDB会自动先检查表中是否有唯一索引且不允许存在null的字段，如果有，则选择该字段作为主键索引，否则会自动创建一个6Byte的自增主键</p>\n<p><strong>二级索引</strong>：普通索引，前缀索引，全文索引</p>\n<h4 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h4><p>使用多个字段同时建立一个索引，叫做联合索引，在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序进行使用，否则可能无法命中。</p>\n<h5 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a>索引失效</h5><p>在进行查询时</p>\n<ol>\n<li>遵循最左匹配原则</li>\n<li>同时遇到范围查询(&gt;、&lt;、between、like)就会停止匹配</li>\n<li>最左缀匹配原则的最重要的就是 第一个字段</li>\n<li>不推荐 select *<ol>\n<li>增加查询分析器解析成本。</li>\n<li>增减字段容易与 resultMap 配置不一致</li>\n<li>无用字段增加网络 消耗，尤其是 text 类型的字段。</li>\n<li>我们使用 B&#x3D;1 会走索引 但是 与直接查询索引字段不同 使用<code>SELECT*</code>,获取了不需要的数据，则首先通过辅助索引过滤数据，然后再通过聚集索引获取所有的列，这就多了一次 b+树查询，速度必然会慢很多，减少使用 select * 就是降低回表带来的损耗。</li>\n</ol>\n</li>\n</ol>\n<p>假如我们建立一个（a，b，c）的索引面，a，b，c在查询时的顺序可以任意调整</p>\n<p>例如查询(a,b)会走索引，（a，c）（c，a）也会走索引</p>\n<p>但是 (b,c),(c,b)之类的就不会走索引。</p>\n<p><strong>总结</strong></p>\n<ul>\n<li><p>select * 可能会走索引，不一定会造成索引失效，造成索引失效的大概率原因是where条件范围太广</p>\n</li>\n<li><p>**范围查询(&gt;、&lt;、between、like)**，范围查找有概率索引失效但是在特定的情况下会生效 范围小就会使用 也可以理解为 返回结果集小就会使用索引</p>\n</li>\n<li><p>创建了组合索引，但查询条件未遵循最左匹配原则;</p>\n</li>\n<li><p>在索引列上进行计算、函数、类型转换等操作;</p>\n</li>\n</ul>\n<p>建立索引语句</p>\n<p><code>DROP TABLE IF EXISTS student;</code><br><code>CREATE TABLE student (</code><br> <code>id int(11) NOT NULL AUTO_INCREMENT,</code><br> <code>sname varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</code><br> <code>s_code int(100) NULL DEFAULT NULL,</code><br> <code>address varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</code><br> <code>height double NULL DEFAULT NULL,</code><br> <code>classid int(11) NULL DEFAULT NULL,</code><br> <code>create_time datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),</code><br> <code>PRIMARY KEY (id) USING BTREE,</code><br> <code>INDEX 普通索引(height) USING BTREE,</code><br> <code>INDEX 联合索引(sname, s_code, address) USING BTREE</code><br><code>) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</code></p>\n<h3 id=\"二、事务\"><a href=\"#二、事务\" class=\"headerlink\" title=\"二、事务\"></a>二、事务</h3><h4 id=\"事务的特性\"><a href=\"#事务的特性\" class=\"headerlink\" title=\"事务的特性\"></a>事务的特性</h4><ol>\n<li>原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，在事务执行过程中发生错误，会被回滚到事物开始前的状态</li>\n<li>一致性：事务执行的结果必须是使数据库从一个一致性状态变化到另一个一致性状。</li>\n<li>隔离性：一个事务的执行不能被其他事务所干扰。</li>\n<li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。<ul>\n<li>持久性是通过 redo log （重做日志）来保证的；</li>\n<li>原子性是通过 undo log（回滚日志） 来保证的；</li>\n<li>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；</li>\n<li>一致性则是通过持久性+原子性+隔离性来保证；</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h4><ul>\n<li>脏读：读取到其他事务未提交的数据</li>\n<li>不可重复读：前后读取的数据不一致</li>\n<li>幻读：前后读取的记录数不一致</li>\n</ul>\n<p>针对上面几种现象，SQL标准定义了四种隔离级别来规避这些现象</p>\n<ol>\n<li>读未提交：所有事务均可看到其他事务未提交的执行结果，会导致上面三种现象的发生，因此很少应用。</li>\n<li>读已提交：一个事务只能看到其他已经提交的事务所对数据做出的改变，这个级别杜绝了脏读现象，但避免不了不可重复读和幻读</li>\n<li>可重复读：这个是Mysql InnoDB的默认事务隔离级别，指的是一个事务执行过程中所看到的数据，一直跟这个事务启动时看到的数据是一致的。可以解决脏读和不可重复读现象，但仍然可能发生幻读。</li>\n<li>串行化：会对记录加上读写锁，在多个事务对这条记录进行读写操作时，后访问的事务必须等待前一个事务执行完成，才能继续执行。在这个级别，可能会导致大量的超时现象和锁的竞争。</li>\n</ol>\n<h4 id=\"如何避免幻读现象\"><a href=\"#如何避免幻读现象\" class=\"headerlink\" title=\"如何避免幻读现象\"></a>如何避免幻读现象</h4><p>针对快照读（普通的 select 语句）：通过<strong>（MVCC）多版本并发控制实现</strong>的，开始事务后，在执行第一个查询语句后，会创建一个 Read View，后续的查询语句可以通过这个 Read View在 undo log 版本中找到事物开始时的数据，就保证了整个事务的过程中每次查询的数据都是一致的。即使中途有其他事务插入了新纪录，也是查询不出来的，很好地避免了幻读问题的发生。</p>\n<p>针对当前读（比如 update、insert、delete，这些语句），通过<strong>记录锁+间隙锁</strong>的方式解决欢度，当执行select … for update 语句时候，会加上记录锁和间隙锁，如果有其他事务在这时插入一条记录，会被阻塞，无法插入成功，能够避免幻读</p>\n<h3 id=\"三、日志\"><a href=\"#三、日志\" class=\"headerlink\" title=\"三、日志\"></a>三、日志</h3><p>更新语句的流程中会涉及到的三种日志：</p>\n<ol>\n<li><p>undo log（回滚日志）：是InnoDB存储引擎层生成的日志，实现了事务的原子性，主要用于事务回滚和MVCC（多版本并发控制）</p>\n</li>\n<li><p>redo log（重做日志）：是InnoDB存储引擎层生成的日志，实现了事务中的持久性，主要用于掉电等故障的恢复</p>\n</li>\n<li><p>binlog（归档日志）：是Server层生成的日志，主要用于数据备份和主从复制。</p>\n</li>\n</ol>\n<h5 id=\"1、undo-log（回滚日志）\"><a href=\"#1、undo-log（回滚日志）\" class=\"headerlink\" title=\"1、undo log（回滚日志）\"></a>1、undo log（回滚日志）</h5><p>每当对一条记录进行增删改操作时，需要把回滚时需要的信息记录到 undo log 里，比如：</p>\n<ul>\n<li>在<strong>插入</strong>一条记录时，需要记录主键 id ，回滚时根据 id 删除记录即可</li>\n<li>在<strong>删除</strong>一条记录时，需要将该记录中的所有内容都记录下来，回滚时再把由这些内容组成的记录插入到表中即可</li>\n<li>在<strong>更新</strong>一条记录时，也是需要记录整列的内容，然后才能在回滚时更新为旧数据即可</li>\n</ul>\n<h5 id=\"1-1、undo-log-的格式\"><a href=\"#1-1、undo-log-的格式\" class=\"headerlink\" title=\"1.1、undo log 的格式\"></a>1.1、undo log 的格式</h5><p>以更新操作为例，每一次更新操作产生的undo log都由一个 roll_pointer 指针和一个 trx_id事务id构成</p>\n<ul>\n<li>通过事务id可以知道该条记录是由哪个事务修改的。</li>\n<li>通过指针可以将这个 undo log 串成一个链表，称为版本链。</li>\n</ul>\n<h5 id=\"1-2、如何实现MVCC（多版本并发控制）\"><a href=\"#1-2、如何实现MVCC（多版本并发控制）\" class=\"headerlink\" title=\"1.2、如何实现MVCC（多版本并发控制）\"></a>1.2、如何实现MVCC（多版本并发控制）</h5><p>通过 Read View 里面的字段和undo log 记录中的 事务id（trx_id），roll_pointer指针进行对比，找到满足其条件的记录，从而控制并发事务访问同一条记录的行为。</p>\n<h5 id=\"1-3、缓冲池-Buffer-Pool\"><a href=\"#1-3、缓冲池-Buffer-Pool\" class=\"headerlink\" title=\"1.3、缓冲池(Buffer Pool)\"></a>1.3、缓冲池(Buffer Pool)</h5><p>mysql的数据都是存放在磁盘中的，如果我们要更新一条数据，需要将其从磁盘中读出来，在内存中进行修改之后，先缓存起来，并不会直接写回磁盘，会等待合适时机再写回。</p>\n<p>为了缓存这些数据，mysql设计了一个缓冲池(Buffer Pool)，来提高数据库的读写性能。</p>\n<ul>\n<li>当读取数据时，如果数据存在于缓冲池中，客户端会直接读取到缓冲池中的数据，否则再去磁盘读取。</li>\n<li>当修改数据时，如果数据存在于缓冲池中，那么直接修改缓冲池中的数据所在的页，然后将这个页设置为脏页（就是该页的内存数据与磁盘中的数据不一致），为了减少磁盘IO，不会立即将脏页写入磁盘，后续由后台的其他线程选择合适时机将脏页写入磁盘。</li>\n<li>缓冲池中处理缓存数据页和索引页，还会缓存Undo 页（存放Undo log的），插入缓存，自适应哈希缓存，锁信息等等。</li>\n</ul>\n<h4 id=\"2、redo-log（重做日志）\"><a href=\"#2、redo-log（重做日志）\" class=\"headerlink\" title=\"2、redo log（重做日志）\"></a>2、redo log（重做日志）</h4><p>redo log 是物理日志，主要是用于记录某个数据页做了什么样的修改的操作。在执行事务的过程中，产生的redo日志文件是顺序写入磁盘的，写入 redo log 的方式使用了追加操作， 使用的是顺序IO，如果没有这个日志，我们需要把缓冲池中的修改写入磁盘需要使用随机IO，性能低下，并且日志的空间占用很小，刷盘更快。之后如果数据库发生崩溃，可以根据redo log进行恢复，保证了事务四大特性中的持久性。</p>\n<p>redo log 也不是直接写入磁盘的，它也有自己的缓存——redo log buffer</p>\n<h5 id=\"redo-log-刷盘的时机\"><a href=\"#redo-log-刷盘的时机\" class=\"headerlink\" title=\"redo log 刷盘的时机\"></a>redo log 刷盘的时机</h5><ol>\n<li>Mysql正常关闭</li>\n<li>当redo log buffer 中的记录写入量大于 redo log buffer 内存空间的一半时</li>\n<li>InnoDB的后台线程每隔 1 秒，将redo log buffer 持久化到磁盘</li>\n<li>每次事务提交时，这个策略可以由innodb_flush_log_at_trx_commit 参数控制，默认是1，就是每次事务提交时，都会将 redo log buffer 持久化到磁盘中。</li>\n</ol>\n<h4 id=\"3、bin-log（归档日志）\"><a href=\"#3、bin-log（归档日志）\" class=\"headerlink\" title=\"3、bin log（归档日志）\"></a>3、bin log（归档日志）</h4><p>与redo log 类似，记录了所有数据库表结构变更和表数据修改的日志，不记录查询类的操作</p>\n<h4 id=\"4、redo-log-和-bin-log-的区别\"><a href=\"#4、redo-log-和-bin-log-的区别\" class=\"headerlink\" title=\"4、redo log 和 bin log 的区别\"></a>4、redo log 和 bin log 的区别</h4><ul>\n<li>适用对象不同，binlog是Mysql Server 层实现的日志，所有存储引擎都可以使用。redo log 是InnoDB 存储引擎实现的日志</li>\n<li>文件格式不同</li>\n<li>写入方式不同<ul>\n<li>binlog是追加写，写满一个文件，就开一个新的继续写，不会覆盖一起的日志，保存的是全量的日志</li>\n<li>redo log 是循环写，日志空间大小是固定的，全部写满就从头开始。</li>\n<li>因此，如果不小心将数据库数据删除了，应该考虑使用binlog进行恢复</li>\n</ul>\n</li>\n<li>用途不同，bin log主要用于备份恢复，主从复制，redo log用于掉电等故障的恢复</li>\n</ul>\n<h4 id=\"5、主从复制的实现\"><a href=\"#5、主从复制的实现\" class=\"headerlink\" title=\"5、主从复制的实现\"></a>5、主从复制的实现</h4><ol>\n<li>主库写入Bin log，MySQL 主库在收到客户端提交事务的请求之后，会先写入 binlog，再提交事务，更新存储引擎中的数据，</li>\n<li>从库会创建一个专门的 I&#x2F;O 线程，来接收主库的 binlog 日志，再把 binlog 信息写入 暂存日志里，再返回给主库“复制成功”的响应。</li>\n<li>从库会创建一个用于回放 binlog 的线程，去读 暂存日志，然后回放 binlog 更新存储引擎中的数据，最终实现主从的数据一致性。</li>\n</ol>\n<p>完成主从复制之后，可以写数据只写主库，读数据只读从库，减少锁资源的竞争，也不会影响读请求的执行，默认是异步复制</p>\n<h4 id=\"6、bin-log-的刷盘时机\"><a href=\"#6、bin-log-的刷盘时机\" class=\"headerlink\" title=\"6、bin log 的刷盘时机\"></a>6、bin log 的刷盘时机</h4><p>用来控制刷盘频率的参数，默认sync_binlog &#x3D; 0也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。因为一旦主机发生异常重启，还没持久化到磁盘的数据就会丢失。</p>\n<h3 id=\"四、锁\"><a href=\"#四、锁\" class=\"headerlink\" title=\"四、锁\"></a>四、锁</h3><p>根据类型：可分为：共享锁（读锁），排它锁（写锁）</p>\n<p>根据加锁的范围，可以分为<strong>全局锁、表级锁、行级锁</strong></p>\n<h4 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h4><p>使用全局锁：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\">flush <span class=\"token keyword\">tables</span> <span class=\"token keyword\">with</span> <span class=\"token keyword\">read</span> <span class=\"token keyword\">lock</span></code></pre>\n\n<p>执行之后，整个数据库都处于只读状态了，不管是对数据的增删改，或者是对表结构的更改操作都会被阻塞</p>\n<p>释放：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">unlock</span> <span class=\"token keyword\">tables</span></code></pre>\n\n<h5 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h5><p>主要用于做<strong>全库逻辑备份</strong>，防止出现备份文件的数据与预期的不同。</p>\n<p>如果备份时间过长，可能会导致业务停滞</p>\n<h5 id=\"如何避免其影响业务\"><a href=\"#如何避免其影响业务\" class=\"headerlink\" title=\"如何避免其影响业务\"></a>如何避免其影响业务</h5><p>对于使用InnoDB存储引擎的可重复读隔离级别的情况，在备份数据库之前先开启事务，会创建Read View，然后整个事务执行期间都使用这个Read View去进行数据的更新操作等。</p>\n<h4 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h4><p>表锁，元数据锁，意向锁，AUTO-INC锁</p>\n<p>表锁：对整个表加锁，不仅会限制其他线程的读写，也会限制本线程的读写操作。尽量避免在InnoDB引擎的表中使用表级锁，因为表锁的颗粒度太大，会影响并发性能，可以使用颗粒度更细的行级锁。</p>\n<h4 id=\"行级锁\"><a href=\"#行级锁\" class=\"headerlink\" title=\"行级锁\"></a>行级锁</h4><p>InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。</p>\n<ol>\n<li>记录锁，仅仅把一条记录锁上</li>\n<li>间隙锁，锁定一个范围，但不包含记录本身</li>\n<li>1+2，锁定一个范围，并且锁定记录本身。</li>\n</ol>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2023/12/21/API%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://ooooddddd.github.io/2023/12/21/API%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "API开放平台学习笔记",
            "date_published": "2023-12-21T08:04:14.000Z",
            "content_html": "<h1 id=\"一、项目业务流程\"><a href=\"#一、项目业务流程\" class=\"headerlink\" title=\"一、项目业务流程\"></a>一、项目业务流程</h1><h2 id=\"体验地址：http-120-78-128-74-user-login\"><a href=\"#体验地址：http-120-78-128-74-user-login\" class=\"headerlink\" title=\"体验地址：http://120.78.128.74/user/login\"></a>体验地址：<a href=\"http://120.78.128.74/user/login\">http://120.78.128.74/user/login</a></h2><h1 id=\"二、前端项目初始化\"><a href=\"#二、前端项目初始化\" class=\"headerlink\" title=\"二、前端项目初始化\"></a>二、前端项目初始化</h1><h2 id=\"1、搭建脚手架\"><a href=\"#1、搭建脚手架\" class=\"headerlink\" title=\"1、搭建脚手架\"></a>1、搭建脚手架</h2><p>Ant Design Pro：<a href=\"https://pro.ant.design/zh-CN/\">官方文档</a></p>\n<h2 id=\"2、选择-umi-4\"><a href=\"#2、选择-umi-4\" class=\"headerlink\" title=\"2、选择 umi 4\"></a>2、选择 umi 4</h2><p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/1.png\"></p>\n<h2 id=\"3、node版本\"><a href=\"#3、node版本\" class=\"headerlink\" title=\"3、node版本\"></a>3、node版本</h2><p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/2.png\"></p>\n<h3 id=\"4、打开项目\"><a href=\"#4、打开项目\" class=\"headerlink\" title=\"4、打开项目\"></a>4、打开项目</h3><p>打开webstorm的终端，输入 yarn安装依赖</p>\n<p>然后找到package.json中的dev，运行项目，查看是否成功运行</p>\n<h2 id=\"5、项目瘦身\"><a href=\"#5、项目瘦身\" class=\"headerlink\" title=\"5、项目瘦身\"></a>5、项目瘦身</h2><h3 id=\"5-1移除国际化\"><a href=\"#5-1移除国际化\" class=\"headerlink\" title=\"5.1移除国际化\"></a>5.1移除国际化</h3><p>在package.json中找到i18n-remove，运行即可，此时遇到报错</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/3.png\"></p>\n<p>在终端执行以下命令：</p>\n<p><code>yarn add eslint-config-prettier --dev yarn add eslint-plugin-unicorn --dev</code></p>\n<p>同时，需要注释掉<code>项目目录：node_modules/@umijs/lint/dist/config/eslint/index.js</code>文件中的<code>es2022:true</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/4.png\" alt=\"image-20231207161536935\"></p>\n<p>之后再次执行<code>i18n-remove</code>即可，然后将<code>locales目录</code>手动删除</p>\n<p><strong>每次移除某些代码后都要重新start一下，防止删除有用的代码了</strong></p>\n<h1 id=\"三、后端代码初始化-orangeApi-backend\"><a href=\"#三、后端代码初始化-orangeApi-backend\" class=\"headerlink\" title=\"三、后端代码初始化(orangeApi-backend)\"></a>三、后端代码初始化(orangeApi-backend)</h1><h2 id=\"1、模板\"><a href=\"#1、模板\" class=\"headerlink\" title=\"1、模板\"></a>1、模板</h2><h3 id=\"1-1加载aven依赖\"><a href=\"#1-1加载aven依赖\" class=\"headerlink\" title=\"1.1加载aven依赖\"></a>1.1加载aven依赖</h3><p><strong>查找所有maven包的仓库：<a href=\"https://mvnrepository.com/\">地址</a></strong></p>\n<h3 id=\"1-2连接数据库\"><a href=\"#1-2连接数据库\" class=\"headerlink\" title=\"1.2连接数据库\"></a>1.2连接数据库</h3><p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/5.png\" alt=\"image-20231207162553113\"></p>\n<h3 id=\"1-3数据库表设计\"><a href=\"#1-3数据库表设计\" class=\"headerlink\" title=\"1.3数据库表设计\"></a>1.3数据库表设计</h3><p>用户表：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 用户表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> <span class=\"token keyword\">user</span>\n<span class=\"token punctuation\">(</span>\n    id           <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'id'</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n    userName     <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>                           <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户昵称'</span><span class=\"token punctuation\">,</span>\n    userAccount  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>                           <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'账号'</span><span class=\"token punctuation\">,</span>\n    userAvatar   <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>                          <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户头像'</span><span class=\"token punctuation\">,</span>\n    gender       <span class=\"token keyword\">tinyint</span>                                <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'性别'</span><span class=\"token punctuation\">,</span>\n    userRole     <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'user'</span>            <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户角色：user / admin'</span><span class=\"token punctuation\">,</span>\n    userPassword <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                           <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">,</span>\n    createTime   <span class=\"token keyword\">datetime</span>     <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n    updateTime   <span class=\"token keyword\">datetime</span>     <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n    isDelete     <span class=\"token keyword\">tinyint</span>      <span class=\"token keyword\">default</span> <span class=\"token number\">0</span>                 <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'是否删除'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">constraint</span> uni_userAccount\n        <span class=\"token keyword\">unique</span> <span class=\"token punctuation\">(</span>userAccount<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'用户'</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<p>接口表：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 接口管理表</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> orange_api<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>interface_info<span class=\"token punctuation\">`</span></span>\n<span class=\"token punctuation\">(</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'主键'</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'名称'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'描述'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>url<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'接口地址'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>requestHeader<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'请求头'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>responseHeader<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'响应头'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'接口状态（0-关闭，1-开启）'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>method<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'请求类型'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>userId<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'创建用户'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>isDeleted<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">tinyint</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'是否删除(0-未删, 1-已删)'</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'接口管理表'</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"1-4利用redis存储-Session\"><a href=\"#1-4利用redis存储-Session\" class=\"headerlink\" title=\"1.4利用redis存储 Session\"></a>1.4利用redis存储 Session</h3><pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">session</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">86400</span>\n  <span class=\"token key atrule\">store-type</span><span class=\"token punctuation\">:</span> redis</code></pre>\n\n<h3 id=\"1-5后端项目启动\"><a href=\"#1-5后端项目启动\" class=\"headerlink\" title=\"1.5后端项目启动\"></a>1.5后端项目启动</h3><p>直接访问：<a href=\"http://localhost:7529/api/doc.html#/home%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E7%8E%B0%E6%88%90%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%EF%BC%8C%E5%90%8C%E6%97%B6%E5%8F%AF%E4%BB%A5%E5%9C%A8%E8%BF%99%E9%87%8C%E7%9B%B4%E6%8E%A5%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95\">http://localhost:7529/api/doc.html#/home，即可看到现成的接口文档，同时可以在这里直接对接口进行调试</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/6.png\" alt=\"image-20231207200919971\"></p>\n<h2 id=\"2、使用MyBatisX插件生成代码\"><a href=\"#2、使用MyBatisX插件生成代码\" class=\"headerlink\" title=\"2、使用MyBatisX插件生成代码\"></a>2、使用MyBatisX插件生成代码</h2><h3 id=\"2-1MyBatisX的使用\"><a href=\"#2-1MyBatisX的使用\" class=\"headerlink\" title=\"2.1MyBatisX的使用\"></a>2.1MyBatisX的使用</h3><p>右键 <code>interface_info</code> 表，选择<code>MyBatisX-Generator</code>。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/7.png\" alt=\"image-20231207201451332\"></p>\n<p>点击<code>next</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/8.png\" alt=\"image-20231207201550431\"></p>\n<p>选择相关配置，之后点击<code>Finish</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/9.png\" alt=\"image-20231207201731884\"></p>\n<p>将generator文件中相关文件复制到project目录下，然后再修改mapper.xml文件</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/10.png\" alt=\"image-20231207202234533\"></p>\n<h3 id=\"2-2controller层编写\"><a href=\"#2-2controller层编写\" class=\"headerlink\" title=\"2.2controller层编写\"></a>2.2controller层编写</h3><h4 id=\"2-2-1复制-粘贴\"><a href=\"#2-2-1复制-粘贴\" class=\"headerlink\" title=\"2.2.1复制 粘贴\"></a>2.2.1复制 粘贴</h4><p>现在 <code>mapper</code>、<code>service</code>层有了，还缺少一个 <code>controller</code>层</p>\n<p>复制一个 <code>PostController</code>层过来，改名为 <code>InterfaceInfoController</code></p>\n<p>然后 <code>ctrl+R</code> 将<code>post</code>全部替换成 <code>interfaceInfo</code>，将<code>Post</code>全部替换为<code>InterfaceInfo</code>，记得区分大小写</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/11.png\" alt=\"image-20231207203640747\"></p>\n<p>然后需要将<code>InterfaceInfoMapping</code> 替换成 <code>PostMapping</code></p>\n<h4 id=\"2-2-2编写需要前端传递的DTO对象\"><a href=\"#2-2-2编写需要前端传递的DTO对象\" class=\"headerlink\" title=\"2.2.2编写需要前端传递的DTO对象\"></a>2.2.2编写需要前端传递的DTO对象</h4><p>添加接口需要传递的对象<code>InterfaceInfoAddRequest</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/12.png\" alt=\"image-20231207203854025\"></p>\n<p>同理，还有<code>InterfaceInfoQueryRequest</code>、<code>InterfaceInfoUpdateRequest</code></p>\n<p>这些对象类中填写不同的字段，需要前端传递哪些字段就写哪些字段即可。</p>\n<h4 id=\"2-2-3为什么写多个对象\"><a href=\"#2-2-3为什么写多个对象\" class=\"headerlink\" title=\"2.2.3为什么写多个对象\"></a>2.2.3为什么写多个对象</h4><p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/13.png\" alt=\"image-20231207204058013\"></p>\n<p><strong>在 <code>isDelete</code> 字段上添加 <code>@TableLogic</code>注解，进行逻辑删除</strong></p>\n<h4 id=\"2-2-4在用户第一次创建接口对象时，需要校验几个字段不为空\"><a href=\"#2-2-4在用户第一次创建接口对象时，需要校验几个字段不为空\" class=\"headerlink\" title=\"2.2.4在用户第一次创建接口对象时，需要校验几个字段不为空\"></a>2.2.4在用户第一次创建接口对象时，需要校验几个字段不为空</h4><p>传入的<strong>第二个参数 add，</strong>可以实现校验创建时校验哪几个字段，校验更新时又校验其他不同的字段，这个方法的第二个参数设计的很好</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validInterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterfaceInfo</span> interfaceInfo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interfaceInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> description <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> requestHeader <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> responseHeader <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">// 创建时，所有参数必须非空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnyBlank</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> requestHeader<span class=\"token punctuation\">,</span> responseHeader<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyNull</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"内容过长\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h1 id=\"三、前端开发\"><a href=\"#三、前端开发\" class=\"headerlink\" title=\"三、前端开发\"></a>三、前端开发</h1><h2 id=\"1、前端模板优化\"><a href=\"#1、前端模板优化\" class=\"headerlink\" title=\"1、前端模板优化\"></a>1、前端模板优化</h2><h2 id=\"1-1部分前端目录介绍\"><a href=\"#1-1部分前端目录介绍\" class=\"headerlink\" title=\"1.1部分前端目录介绍\"></a>1.1部分前端目录介绍</h2><p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/15.png\" alt=\"image-20231207204923849\"></p>\n<h2 id=\"2、前端代码自动生成\"><a href=\"#2、前端代码自动生成\" class=\"headerlink\" title=\"2、前端代码自动生成\"></a>2、前端代码自动生成</h2><p>使用框架自带的openapi插件，可以帮助我们实现接口的自动生成，在<code>config.ts</code>中找到<code>openapi</code>板块</p>\n<p>修改json文档的地址，以及项目名称即可</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/16.png\" alt=\"image-20231208090956506\"></p>\n<p>然后打开<code>package.json</code>，找到<code>openapi</code>运行</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/17.png\" alt=\"image-20231208091149239\"></p>\n<p>然后在<code>service目录</code>下就会生成一个<code>orangeApi-backend目录</code>，里面自动生成了调用后端指定接口的方法的代码</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/18.png\" alt=\"image-20231208091356952\"></p>\n<p>并且在<code>typings.d.s文件</code>中可以查看接口具体的请求参数类型</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/19.png\" alt=\"image-20231208091545145\"></p>\n<h3 id=\"2-1修改请求配置文件\"><a href=\"#2-1修改请求配置文件\" class=\"headerlink\" title=\"2.1修改请求配置文件\"></a>2.1修改请求配置文件</h3><p>将<code>requestErrorConfig.ts</code>重命名为<code>requestConfig.ts</code>文件，同时进入该文件，将<code>errorConfig</code>修改为<code>requestConfig</code>，然后加上请求地址与<code>cookie</code>验证</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/20.png\" alt=\"image-20231208092113252\"></p>\n<h3 id=\"2-2前后端对接\"><a href=\"#2-2前后端对接\" class=\"headerlink\" title=\"2.2前后端对接\"></a>2.2前后端对接</h3><p>启动<code>dev模式</code>，然后访问(<a href=\"http://localhost:8000/user/login)%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%82%B9%E5%87%BB%E7%99%BB%E5%BD%95%E8%AF%B7%E6%B1%82%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%9C%B0%E5%9D%80%E4%B8%8D%E6%AD%A3%E7%A1%AE%EF%BC%8C%E9%9C%80%E8%A6%81%E5%8E%BB%E4%BF%AE%E6%94%B9%60handleSubmit%60%E6%96%B9%E6%B3%95\">http://localhost:8000/user/login)，此时点击登录请求的接口地址不正确，需要去修改`handleSubmit`方法</a></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>UserLoginRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 登录</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">userLoginUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">...</span>values<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//检查返回的 res 对象中是否包含 data 属性，如果包含则表示登陆成功</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> defaultLoginSuccessMessage <span class=\"token operator\">=</span> <span class=\"token string\">'登录成功！'</span><span class=\"token punctuation\">;</span>\n      message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>defaultLoginSuccessMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//创建一个新的 URL 对象，并获取当前 windows.location.href 的查询参数</span>\n      <span class=\"token keyword\">const</span> urlParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//设置一个延迟100毫秒的定时器作用：在调用 setInitialState 后，状态可能并没有立即更新，</span>\n      <span class=\"token comment\">// 而执行 history.push，将导航到一个依赖新状态的页面。所以加一个延迟确保 setInitialState</span>\n      <span class=\"token comment\">// 在 history.push 之前完成</span>\n      <span class=\"token comment\">//定时器触发后，导航到重定向URL，如果不存在重定向的URL，则导航到根路径</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//将用户重定向到 ‘redirect’ 参数指定的 URL，如果该 redirect 参数不存在，则重定向到首页</span>\n        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>urlParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redirect'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        loginUser<span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>data\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>然后再将该页面生成的一些类型修改为我们自己的 <code>LoginParams</code> &#x3D;&gt; <code>UserLoginRequest</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/21.png\" alt=\"image-20231208095727147\"></p>\n<p>通常前端从后台加载用户信息后，会将数据保存到全局状态中。先找到<code>typings.d.ts</code>，定义全局状态类型（<code>InitialState</code>）</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/22.png\" alt=\"image-20231208100247021\"></p>\n<p>然后找到全局入口文件（<code>app.tsx</code>），修改 <code>getInitialState</code>方法</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>InitialState<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//当页面首次加载时，获取全局保存的信息，比如用户登录信息</span>\n    <span class=\"token keyword\">const</span> state<span class=\"token operator\">:</span> InitialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//初始化</span>\n      loginUser<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//调用 getLoginUserUsingGet() 函数，尝试获取已经登陆的用户信息</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getLoginUserUsingGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//如果后端获取的用户信息不为空，就将获取到的用户数据赋值给 state.loginUser</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        state<span class=\"token punctuation\">.</span>loginUser <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 如果获取用户信息的过程发生错误， 就把页面重定向到登录页面</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>loginPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//返回修改后的状态</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>然后需要将该页面的 <code>currentUser</code> 改为 <code>loginUser</code>，把 <code>name</code> 改为 <code>userName</code>，<code>avatar</code> 改为 <code>userAvatar</code></p>\n<h3 id=\"2-3接口管理\"><a href=\"#2-3接口管理\" class=\"headerlink\" title=\"2.3接口管理\"></a>2.3接口管理</h3><p>前端权限管理，找到 <code>access.ts</code>，修改一下，取全局初始化状态(InitialState)的loginUser，根据当前登录用户判断它是否有 管理员权限 or 用户权限。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/23.png\" alt=\"image-20231208103128894\"></p>\n<h3 id=\"2-4-改造新页面\"><a href=\"#2-4-改造新页面\" class=\"headerlink\" title=\"2.4 改造新页面\"></a>2.4 改造新页面</h3><p><strong>使用了 ProTable 表格，定义了表格应该有的列，然后编写了请求方法并修改了请求后台的接口。这些接口并不是我们手动编写的，而是自动生成的。</strong></p>\n<h4 id=\"2-4-1显示所有接口列表\"><a href=\"#2-4-1显示所有接口列表\" class=\"headerlink\" title=\"2.4.1显示所有接口列表\"></a>2.4.1显示所有接口列表</h4><p>首先，我们使用 <code>ProColumns</code> 定义所有我们需要展示的字段</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> columns<span class=\"token operator\">:</span> ProColumns<span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'接口名称'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n    formItemProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'描述'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'textarea'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'请求方法'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'method'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span>  <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span>  <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'请求头'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'requestHeader'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'textarea'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'响应头'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'responseHeader'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'textarea'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'状态'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span>\n    hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    valueEnum<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'关闭'</span><span class=\"token punctuation\">,</span>\n        status<span class=\"token operator\">:</span> <span class=\"token string\">'Default'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'开启'</span><span class=\"token punctuation\">,</span>\n        status<span class=\"token operator\">:</span> <span class=\"token string\">'Processing'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'create_time'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'dateTime'</span><span class=\"token punctuation\">,</span>\n    hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'update_time'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'dateTime'</span><span class=\"token punctuation\">,</span>\n    hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'操作'</span><span class=\"token punctuation\">,</span>\n    dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'option'</span><span class=\"token punctuation\">,</span>\n    valueType<span class=\"token operator\">:</span> <span class=\"token string\">'option'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n        <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>config<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">handleUpdateModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setCurrentRow</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        修改\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n        <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>config<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">handleRemove</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        删除\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>这些id、接口名称、描述、请求方法等等与前端展示保持一致</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/24.png\" alt=\"image-20231208200405277\"></p>\n<p>此时前端已经能够接受到后端传来的数据了，只是没有展示出来，然后我们去到<code>request</code>里面查看它接收什么参数。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/25.png\" alt=\"image-20231208200712371\"></p>\n<p>将其复制过来</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">request<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> <span class=\"token constant\">U</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span>\n    pageSize<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    current<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    keyword<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> sort<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> SortOrder<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> filter<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre>\n\n<p>继续追进去看它的响应对象是什么，同样复制过来</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/26.png\" alt=\"image-20231208200937122\"></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\nsuccess<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\ntotal<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/27.png\" alt=\"image-20231208201113657\"></p>\n<p>最后调用自动生成的后端接口即可<code>listInterfaceInfoUsingGet</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">listInterfaceInfoUsingGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span>params\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></code></pre>\n\n<h4 id=\"2-4-2实现新建功能\"><a href=\"#2-4-2实现新建功能\" class=\"headerlink\" title=\"2.4.2实现新建功能\"></a>2.4.2实现新建功能</h4><p>先来优化页面，比如管理业、欢迎页，没用到的都删掉</p>\n<p><code>routes.ts</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n    layout<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'登录'</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/user/login'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token string\">'./User/Login'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// &#123; path: '/welcome', name: '欢迎', icon: 'smile', component: './Welcome' &#125;,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'管理页'</span><span class=\"token punctuation\">,</span>\n    icon<span class=\"token operator\">:</span> <span class=\"token string\">'crown'</span><span class=\"token punctuation\">,</span>\n    access<span class=\"token operator\">:</span> <span class=\"token string\">'canAdmin'</span><span class=\"token punctuation\">,</span>\n    routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'接口管理'</span><span class=\"token punctuation\">,</span> icon<span class=\"token operator\">:</span> <span class=\"token string\">'table'</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin/interface_info'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token string\">'./InterfaceInfo'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// &#123; path: '/', redirect: '/welcome' &#125;,</span>\n  <span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> layout<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token string\">'./404'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p><strong>第一步：：</strong>创建<code>CreateModal.tsx</code>模态框，可以复用<code>columns</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ProColumns<span class=\"token punctuation\">,</span> ProTable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ant-design/pro-components'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@umijs/max'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Modal <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//将之前定义的属性直接引用过来，方便复用</span>\n  columns<span class=\"token operator\">:</span> ProColumns<span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 用户点击取消按钮时触发</span>\n  <span class=\"token function-variable function\">onCancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 当用户提交表单时，将用户输入的数据作为参数传递给后台</span>\n  <span class=\"token function-variable function\">onSubmit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 模态框是否可见</span>\n  visible<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CreateModal<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 使用解构赋值获取 props 中的属性</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> visible<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">,</span> onCancel<span class=\"token punctuation\">,</span> onSubmit <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 创建一个Modal组件,通过visible属性控制其显示或隐藏,footer设置为null把表单项的'取消'和'确认'按钮去掉</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span> <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>visible<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">footer</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> onCancel<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个ProTable组件,设定它为表单类型,通过columns属性设置表格的列，提交表单时调用onSubmit函数 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProTable</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>columns<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          onSubmit<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> CreateModal<span class=\"token punctuation\">;</span></code></pre>\n\n<p><strong>第二步：：</strong>现在我们把 <code>CreateModal.tsx</code> 引入到接口管理页，找到 <code>InterfaceInfo</code> 目录下的 <code>index.tsx</code>。</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个 CreateModal 组件，用于在点击新增按钮时弹出 */</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CreateModal</span></span>\n  <span class=\"token attr-name\">columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span> columns<span class=\"token punctuation\">&#125;</span></span>\n  <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//点击取消按钮,将 handleModalOpen 设为 false 隐藏新增模态窗口</span>\n    <span class=\"token function\">handleModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n  <span class=\"token comment\">// 当用户点击提交按钮之后，调用handleAdd函数处理提交的数据，</span>\n  <span class=\"token comment\">// 去请求后端添加数据(这里的报错不用管,可能里面组件的属性和外层的不一致)</span>\n  <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleAdd</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n  <span class=\"token comment\">// 根据更新窗口的值决定模态窗口是否显示</span>\n  <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>createModalOpen<span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre>\n\n<p>然后创建、修改时间两个字段不允许用户进行修改，使用<code>hindeInForm:true</code>将其隐藏起来。</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span>\n  dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'create_time'</span><span class=\"token punctuation\">,</span>\n  valueType<span class=\"token operator\">:</span> <span class=\"token string\">'dateTime'</span><span class=\"token punctuation\">,</span>\n  hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span>\n  dataIndex<span class=\"token operator\">:</span> <span class=\"token string\">'update_time'</span><span class=\"token punctuation\">,</span>\n  valueType<span class=\"token operator\">:</span> <span class=\"token string\">'dateTime'</span><span class=\"token punctuation\">,</span>\n  hideInForm<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></code></pre>\n\n<p><strong>第三步：：</strong>修改接口调用方法</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * @en-US Add node\n * @zh-CN 添加节点\n * @param fields\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleAdd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>fields<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfoAddRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在添加'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">addInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">...</span>fields<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建成功！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">handleModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建失败，请重试！'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p><strong>第四步：：</strong>构造我们自己的响应拦截器</p>\n<p>找到 <code>requestConfig.ts</code>，加一下校验，修改完成的如下</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> RequestOptions <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@@/plugin-request/request'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> RequestConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@umijs/max'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 与后端约定的响应数据格式</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseStructure</span> <span class=\"token punctuation\">&#123;</span>\n  success<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  errorCode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  errorMessage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * @name 错误处理\n * pro 自带的错误处理， 可以在这里做自己的改动\n * @doc https://umijs.org/docs/max/request#配置\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> requestConfig<span class=\"token operator\">:</span> RequestConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:7529/'</span><span class=\"token punctuation\">,</span>\n  withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 请求拦截器</span>\n  requestInterceptors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> RequestOptions<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 拦截请求配置，进行个性化处理。</span>\n      <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> config<span class=\"token operator\">?.</span>url<span class=\"token operator\">?.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?token = 123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> url <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 响应拦截器</span>\n  responseInterceptors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 拦截响应数据，进行个性化处理</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> response <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">as</span> ResponseStructure<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 当响应的状态码不为0，抛出错误</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 如果一切正常，返回原始的响应数据</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n\n\n<h4 id=\"2-4-2实现修改功能\"><a href=\"#2-4-2实现修改功能\" class=\"headerlink\" title=\"2.4.2实现修改功能\"></a>2.4.2实现修改功能</h4><p><strong>第一步：：</strong>创建<code>UpdateModal.tsx</code>模态框，可以复用<code>columns</code></p>\n<p>相对于<code>CreateModal</code>多一个参数<code>values</code>，修改的时候需要把当前接口信息给带上</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ProColumns<span class=\"token punctuation\">,</span> ProFormInstance<span class=\"token punctuation\">,</span> ProTable<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ant-design/pro-components'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@umijs/max'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Modal <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  values<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">;</span>\n  columns<span class=\"token operator\">:</span> ProColumns<span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onCancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onSubmit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  visible<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> UpdateModal<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> values<span class=\"token punctuation\">,</span> visible<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">,</span> onCancel<span class=\"token punctuation\">,</span> onSubmit <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//定义一个引用变量，用于记录 values 的变化</span>\n  <span class=\"token keyword\">const</span> formRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ProFormInstance<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//一旦点击别条数据，values发生变化，调用该方法修改 values 的值</span>\n  <span class=\"token comment\">//useEffect: 监听某个变量的变化</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>formRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      formRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">setFieldsValue</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 创建一个Modal组件,通过visible属性控制其显示或隐藏,footer设置为null把表单项的'取消'和'确认'按钮去掉</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span> <span class=\"token attr-name\">visible</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>visible<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">footer</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">onCancel</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> onCancel<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个ProTable组件,设定它为表单类型,通过columns属性设置表格的列，提交表单时调用onSubmit函数 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProTable</span></span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">formRef</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>formRef<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>columns<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">form</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n          initialValues<span class=\"token operator\">:</span> values\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          onSubmit<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> UpdateModal<span class=\"token punctuation\">;</span></code></pre>\n\n<p><strong>第二步：：</strong>现在我们把 <code>UpdateModal.tsx</code> 引入到接口管理页，找到 <code>InterfaceInfo</code> 目录下的 <code>index.tsx</code>。</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token operator\">&lt;</span>UpdateModal\n  <span class=\"token comment\">// 要将 columns 传递过来，不然修改模态框里面没有表单项</span>\n  columns<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>columns<span class=\"token punctuation\">&#125;</span>\n  onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> success <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">handleUpdate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">handleUpdateModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setCurrentRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>actionRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        actionRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n  onCancel<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleUpdateModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showDetail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setCurrentRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n  visible<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>updateModalOpen<span class=\"token punctuation\">&#125;</span>\n  values<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>currentRow <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n\n<p><strong>第三步：：</strong>然后调用修改接口的方法</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * @en-US Update node\n * @zh-CN 更新节点\n *\n * @param fields\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleUpdate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>fields<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfoUpdateRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//如果没有选择的行，则直接返回</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentRow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'修改中...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">updateInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      id<span class=\"token operator\">:</span> currentRow<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>fields\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'修改成功!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'操作失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>这里需要注意的是，因为 id 这个字段是作为 index 在前端显示的，在 columns 中，我们把 id 列的属性定义为了index。这样定义的结果是，id 列不会出现在表单项里，也就不会被填入表单。</p>\n<p>因此需要单独去取出这个id，在最上面定义了一个<code>currentRow</code>，利用它可以取到 <code>id</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentRow<span class=\"token punctuation\">,</span> setCurrentRow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h4 id=\"2-4-2实现删除功能\"><a href=\"#2-4-2实现删除功能\" class=\"headerlink\" title=\"2.4.2实现删除功能\"></a>2.4.2实现删除功能</h4><p>因为删除只需要 <code>id</code> 字段即可，因此无需再去构建 <code>deleteModal</code> 表单</p>\n<p><strong>第一步：：</strong>定义删除按钮</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n  <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>config<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleRemove</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  删除\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span></code></pre>\n\n<p><strong>第二步：：</strong>编写删除节点接口</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n *  Delete node\n * @zh-CN 删除节点\n *\n * @param selectedRows\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRemove</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在删除'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">deleteInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//使用 id 进行删除</span>\n      id<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 删除成功自动更新数据</span>\n    actionRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h1 id=\"四、后端项目开发-orangeApi-interface\"><a href=\"#四、后端项目开发-orangeApi-interface\" class=\"headerlink\" title=\"四、后端项目开发(orangeApi-interface)\"></a>四、后端项目开发(orangeApi-interface)</h1><h2 id=\"1、开发模拟接口\"><a href=\"#1、开发模拟接口\" class=\"headerlink\" title=\"1、开发模拟接口\"></a>1、开发模拟接口</h2><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 名称 API\n *\n * @author 张驰\n */</span>\n<span class=\"token annotation punctuation\">@RestController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/name\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameByGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"GET 你的名字是\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"POST 你的名字是\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> nonce <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> timestamp <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// todo 实际情况应该是去数据库中查询是否已经分配给用户</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accessKey<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//校验时间戳，时间戳和当前时间不能超过 5 分钟</span>\n        <span class=\"token keyword\">long</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> oldTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">></span> oldTime <span class=\"token operator\">+</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// todo 实际情况是去数据库中查询 secretKey</span>\n        <span class=\"token class-name\">String</span> serverSign <span class=\"token operator\">=</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>serverSign<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"POST UserName 你的名字是\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>启动项目，设置端口号</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8123</span>\n  <span class=\"token key atrule\">servlet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">context-path</span><span class=\"token punctuation\">:</span> /api</code></pre>\n\n<p>浏览器去调用接口： <a href=\"http://localhost:8123/api/name/?name=yupi\">http://localhost:8123/api/name</a></p>\n<h2 id=\"2、开发调用接口\"><a href=\"#2、开发调用接口\" class=\"headerlink\" title=\"2、开发调用接口\"></a>2、开发调用接口</h2><h3 id=\"2-1、使用Hutool工具类\"><a href=\"#2-1、使用Hutool工具类\" class=\"headerlink\" title=\"2.1、使用Hutool工具类\"></a>2.1、使用<code>Hutool</code>工具类</h3><p>官方文档如下：</p>\n<p>1、<a href=\"https://hutool.cn/docs/#/\">Hutool</a><br>2、<a href=\"https://hutool.cn/docs/#/http/Http%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7%E7%B1%BB-HttpUtil\">Http 客户端工具类</a></p>\n<p>在<code>pom.xml</code>中添加依赖</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.hutool<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hutool-all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.8.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p>三个接口对应三个调用方法：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 调用第三方接口的客户端\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrangeApiClient</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrangeApiClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accessKey <span class=\"token operator\">=</span> accessKey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>secretKey <span class=\"token operator\">=</span> secretKey<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 使用GET方法从服务器获取名称信息</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameByGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> paramMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8123/api/name/\"</span><span class=\"token punctuation\">,</span> paramMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n\t<span class=\"token comment\">// 使用POST方法从服务器获取名称信息</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> paramMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8123/api/name/\"</span><span class=\"token punctuation\">,</span> paramMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 添加请求头的方法\n     * @param body\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">,</span> accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这个参数一定不能直接发送给前端</span>\n<span class=\"token comment\">//        hashMap.put(\"secretKey\", secretKey);</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//\t使用POST方法向服务器发送User对象，并获取服务器返回的结果</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJsonStr</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HttpResponse</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8123/api/name/user/\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addHeaders</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>写一个测试类在<code>Mai.java</code>中，编写测试方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">OrangeApiClient</span> orangeApiClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrangeApiClient</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result1 <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getNameByGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result2 <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result3 <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n<h2 id=\"3、API签名认证\"><a href=\"#3、API签名认证\" class=\"headerlink\" title=\"3、API签名认证\"></a>3、API签名认证</h2><h3 id=\"3-1、说明\"><a href=\"#3-1、说明\" class=\"headerlink\" title=\"3.1、说明\"></a>3.1、说明</h3><p>本质：</p>\n<p>1、后端签发签名</p>\n<p>2、调用接口时使用签名</p>\n<p>3、适用于无需保存登录态的场景。只认签名，不关注用户登录态。</p>\n<p>模拟签名认证的过程：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 添加请求头的方法\n     * @param body\n     * @return\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">,</span> accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这个参数一定不能直接发送给前端</span>\n<span class=\"token comment\">//        hashMap.put(\"secretKey\", secretKey);</span>\n        <span class=\"token comment\">//随机数</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//请求体</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//时间戳</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//使用 请求体 + secretKey 共同加密</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><code>SignUtils.getSign</code>如下：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SignUtils</span> <span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token comment\">/**\n     * 生成签名\n     *\n     * @param body\n     * @param secretKey\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Digester</span> md5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Digester</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DigestAlgorithm</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SHA256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> secretKey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> md5<span class=\"token punctuation\">.</span><span class=\"token function\">digestHex</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>在<code>orangeApi-backend</code>项目的<code>user</code>表中加入两个字段<code>accessKey</code>、<code>secretKey</code></p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\">accessKey  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                            <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'accessKey'</span><span class=\"token punctuation\">,</span>\nsecretKey  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span>                            <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">comment</span> <span class=\"token string\">'secretKey'</span><span class=\"token punctuation\">,</span></code></pre>\n\n<p>模拟校验的过程：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> nonce <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> timestamp <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// todo 实际情况应该是去数据库中查询是否已经分配给用户</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accessKey<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//校验时间戳，时间戳和当前时间不能超过 5 分钟</span>\n    <span class=\"token keyword\">long</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> oldTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">></span> oldTime <span class=\"token operator\">+</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// todo 实际情况是去数据库中查询 secretKey</span>\n    <span class=\"token class-name\">String</span> serverSign <span class=\"token operator\">=</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>serverSign<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"POST UserName 你的名字是\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"4、开发一个SDK，类似于Starter\"><a href=\"#4、开发一个SDK，类似于Starter\" class=\"headerlink\" title=\"4、开发一个SDK，类似于Starter\"></a>4、开发一个SDK，类似于Starter</h2><h4 id=\"4-1、为什么需要-Starter？\"><a href=\"#4-1、为什么需要-Starter？\" class=\"headerlink\" title=\"4.1、为什么需要 Starter？\"></a>4.1、为什么需要 Starter？</h4><p>理想情况：开发者只需要关心调用哪些接口、传递哪些参数，就跟调用自己写的代码一样简单。<br>开发 starter 的好处：开发者引入之后，可以直接在 application.yml 中写配置，自动创建客户端。</p>\n<h4 id=\"4-2、开发一个Starter\"><a href=\"#4-2、开发一个Starter\" class=\"headerlink\" title=\"4.2、开发一个Starter\"></a>4.2、开发一个Starter</h4><p>新建项目，引入这两个依赖</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/28.png\" alt=\"image-20231210143200586\"></p>\n<p>修改 <code>pom.xml</code> 文件这里面的版本号</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/29.png\" alt=\"image-20231210143245951\"></p>\n<p>同时，下面这个东西要删掉，不然会报错(一定要删掉)；这个是 maven 构建项目的方式，我们现在是要构建依赖包，而不是直接运行 jar 包的项目。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/30.png\" alt=\"image.png\"></p>\n<p>删除默认生成的 Spring Boot 的主类，新建一个 <code>OrangeApiClientConfig</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author 张驰 2023/12/9\n */</span>\n\n<span class=\"token comment\">// 通过 @Configuration 注解,将该类标记为一个配置类,告诉 Spring 这是一个用于配置的类</span>\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token comment\">// 能够读取application.yml的配置,读取到配置之后,把这个读到的配置设置到我们这里的属性中,</span>\n<span class=\"token comment\">// 这里给所有的配置加上前缀为\"yuapi.client\"</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orangeapi.client\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// @Data 注解是一个 Lombok 注解,自动生成了类的getter、setter方法</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token comment\">// @ComponentScan 注解用于自动扫描组件，使得 Spring 能够自动注册相应的 Bean</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrangeApiClientConfig</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//创建一个名为 \"OrangeApiClient\" 的 Bean</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrangeApiClient</span> <span class=\"token function\">orangeApiClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrangeApiClient</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>然后将之前写的项目中的 client包、model包、utils包复制过来</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/31.png\" alt=\"image-20231210143657594\"></p>\n<p>同时将 hutool 包引用过来，然后删除多余的注解，@RequestParam 和 @RequestBody</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">,</span> accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//这个参数一定不能直接发送给前端</span>\n<span class=\"token comment\">//        hashMap.put(\"secretKey\", secretKey);</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> hashMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJsonStr</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HttpResponse</span> httpResponse <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8123/api/name/user/\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addHeaders</span><span class=\"token punctuation\">(</span><span class=\"token function\">getHeaderMap</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>在 <code>resources</code> 目录下创建一个目录<code>META-INF</code>(注意要大写），在META-INF目录创建一个文件<code>spring.factories</code>。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"># spring boot starter\n<span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span>EnableAutoConfiguration</span><span class=\"token operator\">=</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span></span>OrangeApiClientConfig</span></code></pre>\n\n<p>最后，使用 Maven 工具进行 <code>install</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/32.png\" alt=\"image-20231210144310417\"></p>\n<h4 id=\"4-3、如何在其他项目使用这个Starter\"><a href=\"#4-3、如何在其他项目使用这个Starter\" class=\"headerlink\" title=\"4.3、如何在其他项目使用这个Starter\"></a>4.3、如何在其他项目使用这个Starter</h4><p>首先在 pom.xml 文件中引入依赖</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>orangeApi-client-sdk<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p>然后点击 application.yml 进行配置，</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">orangeapi</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">access-key</span><span class=\"token punctuation\">:</span> orange\n    <span class=\"token key atrule\">secret-key</span><span class=\"token punctuation\">:</span> abcdefgh</code></pre>\n\n<p>进行测试</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiinterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OrangeApiClient</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrangeApiInterfaceApplicationTests</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 注入一个名为yuApiClient的Bean</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrangeApiClient</span> orangeApiClient<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 表示这是一个测试方法</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 调用orangeApiClient的getNameByGet方法，并传入参数\"yupi\"，将返回的结果赋值给result变量</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getNameByGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建一个User对象</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置User对象的username属性为\"orange3\"</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用orangeApiClient的getUserNameByPost方法，并传入user对象作为参数，将返回的结果赋值给usernameByPost变量</span>\n        <span class=\"token class-name\">String</span> usernameByPost <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印result变量的值</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印usernameByPost变量的值</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>usernameByPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>这两个有一个对不上就无法调用成功，和<code>application.yml</code>中的配置进行对比</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/33.png\" alt=\"image-20231210144818702\"></p>\n<h1 id=\"五、前端开发接口发布与下线功能\"><a href=\"#五、前端开发接口发布与下线功能\" class=\"headerlink\" title=\"五、前端开发接口发布与下线功能\"></a>五、前端开发接口发布与下线功能</h1><p>本质上来说，就是改变每条接口数据的状态。在设计接口信息表时，之前已经预留了一个状态字段<code>status</code>。</p>\n<p>其中，关闭和开启分别对应接口的下线和上线。只有状态为 1 的接口才可以被用户调用，否则将无法调用。</p>\n<h2 id=\"1、功能设计\"><a href=\"#1、功能设计\" class=\"headerlink\" title=\"1、功能设计\"></a>1、功能设计</h2><p>发布接口：这个接口需要执行哪些任务呢？首先需要验证接口是否存在，然后判断接口是否可调用，否则访问接口都是 404，影响用户体验。接着，如果接口可以调用，我们需要修改数据库中该接口的状态为 1，表示接口已经被发布，状态默认为 0(关闭)。</p>\n<p>下线接口：你可以为其新增一个状态字段。例如，使用 1 表示开启，使用 2 表示下线。通过这个新字段，可以清晰地区分接口状态。当状态为 0 时，表示该接口还没有进行任何处理，看大家自己的考虑。我们这里就直接使用 0 和 1 来表示状态，不再添加额外的状态字段，大家可以按照自己的需求进行设计。对于下线接口，校验接口是否存在也是和发布接口类似的，但是下线接口无需判断接口是否可调用。</p>\n<p>另外，还需注意的一点是仅管理员可操作这两个接口，这点需要特别注意，防止用户越权操作。以上就是这两个接口的基本设计。</p>\n<h3 id=\"1-1总结\"><a href=\"#1-1总结\" class=\"headerlink\" title=\"1.1总结\"></a>1.1总结</h3><p><strong>发布接口(仅管理员可操作)</strong></p>\n<ol>\n<li>校验该接口是否存在</li>\n<li>判断该接口是否可以调用</li>\n<li>修改接口数据库中的状态字段为 1</li>\n</ol>\n<p><strong>下线接口(仅管理员可操作)</strong></p>\n<ol>\n<li>校验该接口是否存在</li>\n<li>修改接口数据库中的状态字段为 0</li>\n</ol>\n<h2 id=\"2、后端项目开发\"><a href=\"#2、后端项目开发\" class=\"headerlink\" title=\"2、后端项目开发\"></a>2、后端项目开发</h2><p>发布或者下线接口，后端需要给前端传递什么？应该是传递接口 <code>id</code>即可。封装一个请求，用于向前端接收请求参数。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 发布或上线接口\n *\n * @author yupi\n */</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IdRequest</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * id\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>这两个接口都是只有管理员可以调用，因此加上<code>@AuthCheck</code>注解</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 发布接口\n *\n * @param idRequest\n * @param request\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/online\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//  权限校验切面注解</span>\n<span class=\"token annotation punctuation\">@AuthCheck</span><span class=\"token punctuation\">(</span>mustRole <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">onlineInterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">IdRequest</span> idRequest<span class=\"token punctuation\">,</span>\n                                                 <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//判断 id 为 null 或者 id 小于等于 0，直接抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idRequest <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> idRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//1、校验接口是否存在</span>\n    <span class=\"token comment\">// 获取idRequest对象的id属性值</span>\n    <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> idRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 根据id查询接口信息数据</span>\n    <span class=\"token class-name\">InterfaceInfo</span> oldInterfaceInfo <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果查询结果为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldInterfaceInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//2、判断接口是否可以调用</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    user<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> userNameByPost <span class=\"token operator\">=</span> orangeApiClient<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>userNameByPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SYSTEM_ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"接口验证失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 仅本人或管理员可修改</span>\n    <span class=\"token class-name\">InterfaceInfo</span> interfaceInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterfaceInfoStatusEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ONLINE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>interfaceInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResultUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>定义一个接口状态的枚举类型，方便切换状态，对应上面代码的 <code>InterfaceInfoStatusEnum</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 接口状态枚举\n *\n * @author yupi\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">InterfaceInfoStatusEnum</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token function\">ONLINE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上线\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">OFFLINE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下线\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">InterfaceInfoStatusEnum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 获取值列表\n     *\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> item<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>下线功能：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 下线接口\n *\n * @param idRequest\n * @param request\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/offline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@AuthCheck</span><span class=\"token punctuation\">(</span>mustRole <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">offlineInterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">IdRequest</span> idRequest<span class=\"token punctuation\">,</span>\n                                                 <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//判断 id 为 null 或者 id 小于等于 0，直接抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idRequest <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> idRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//1、校验接口是否存在</span>\n    <span class=\"token comment\">// 获取idRequest对象的id属性值</span>\n    <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> idRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 根据id查询接口信息数据</span>\n    <span class=\"token class-name\">InterfaceInfo</span> oldInterfaceInfo <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果查询结果为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldInterfaceInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 仅本人或管理员可修改</span>\n    <span class=\"token class-name\">InterfaceInfo</span> interfaceInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    interfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterfaceInfoStatusEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OFFLINE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>interfaceInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResultUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"3、前端项目开发\"><a href=\"#3、前端项目开发\" class=\"headerlink\" title=\"3、前端项目开发\"></a>3、前端项目开发</h2><h3 id=\"3-1增加发布与下线按钮\"><a href=\"#3-1增加发布与下线按钮\" class=\"headerlink\" title=\"3.1增加发布与下线按钮\"></a>3.1增加发布与下线按钮</h3><p>先将 InterfaceInfo管理页面加入到管理员才可以访问的页面</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/34.png\" alt=\"image-20231211183309560\"></p>\n<p>然后到 <code>route.ts</code> 文件修改组件路径</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">&#123;</span>\n  path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'管理页'</span><span class=\"token punctuation\">,</span>\n  icon<span class=\"token operator\">:</span> <span class=\"token string\">'crown'</span><span class=\"token punctuation\">,</span>\n  access<span class=\"token operator\">:</span> <span class=\"token string\">'canAdmin'</span><span class=\"token punctuation\">,</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'接口管理'</span><span class=\"token punctuation\">,</span> icon<span class=\"token operator\">:</span> <span class=\"token string\">'table'</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin/interface_info'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token string\">'./Admin/InterfaceInfo'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></code></pre>\n\n<p>增加两个按钮，根据当前状态选择展示哪个按钮，当前状态为0（下线），展示发布。</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\nrecord<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n  <span class=\"token comment\">//通过给发布按钮和下线按钮设置不同的 key 值来解决按钮重复渲染的问题，确保 React 能够正确地进行虚拟 DOM 的对比和更新。</span>\n  <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>online<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">handleOnline</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  发布\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\nrecord<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">&#125;</span></span>\n    <span class=\"token attr-name\">danger</span>\n    <span class=\"token comment\">//通过给发布按钮和下线按钮设置不同的 key 值来解决按钮重复渲染的问题，确保 React 能够正确地进行虚拟 DOM 的对比和更新。</span>\n    <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>offline<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">handleOffline</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  下线\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></code></pre>\n\n<p>增加完按钮后，应该调用响应函数，同时在响应函数中调用后端接口，该方法对应上面代码中的<code>handleOnline</code>，同时调用 <code>onlineInterfaceInfoUsingPost</code>，发起与后端接口的响应，传入后端需要的参数 <code>id</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n *  Delete node\n * @zh-CN 发布接口\n *\n * @param selectedRows\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleOnline</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>IdRequest<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发布中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">onlineInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//使用 id 进行删除</span>\n      id<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发布成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 发布成功自动更新数据</span>\n    actionRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发布失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>然后复制这个发布接口，去修改成下线接口，只需要修改调用后端接口的方法即可 <code>offlineInterfaceInfoUsingPost</code></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n *  Delete node\n * @zh-CN 下线接口\n *\n * @param selectedRows\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleOffline</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>record<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>IdRequest<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> hide <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下线中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">offlineInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//使用 id 进行删除</span>\n      id<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>id\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下线成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 删除成功自动更新数据</span>\n    actionRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 请求失败时提示错误信息</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下线失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>通过给发布按钮和下线按钮设置不同的 key 值来解决按钮重复渲染的问题，确保 React 能够正确地进行虚拟 DOM 的对比和更新。</p>\n<h1 id=\"六、前端开发用户浏览接口页面\"><a href=\"#六、前端开发用户浏览接口页面\" class=\"headerlink\" title=\"六、前端开发用户浏览接口页面\"></a>六、前端开发用户浏览接口页面</h1><h2 id=\"1、创建浏览接口页\"><a href=\"#1、创建浏览接口页\" class=\"headerlink\" title=\"1、创建浏览接口页\"></a>1、创建浏览接口页</h2><p>在 pages 目录下新建<code>Index</code>目录。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/35.png\" alt=\"image-20231211184403657\"></p>\n<p>将 Welcome.tsx 拖到 Index 目录下，并修改名为<code>index.tsx</code>。</p>\n<p>然后去route.ts修改路由，将这个首页放到最上面</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/36.png\" alt=\"image-20231211184529496\"></p>\n<h2 id=\"2、-修改浏览接口页\"><a href=\"#2、-修改浏览接口页\" class=\"headerlink\" title=\"2、 修改浏览接口页\"></a>2、 修改浏览接口页</h2><p>回到主页，删除多余的内容，留下 PageContainer。</p>\n<ul>\n<li>PageContainer：是 Ant Design Pro 中提供的一个组件，用于快速构建页面的容器。它提供了一些常用的布局和功能，例如面包屑导航、页面标题、操作区域等，可以帮助我们快速搭建页面的基本结构。</li>\n</ul>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/37.png\" alt=\"image.png\"></p>\n<p>首先，需要在<code>PageContainer</code>中添加展示数据的组件，选择了 List 组件，去官网复制它的代码：<a href=\"https://ant.design/components/list-cn#list-demo-loadmore\">地址</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/38.png\" alt=\"image.png\"></p>\n<p>然后这里需要页面的加载状态等数据，也是去官网复制：点击加载更多，就可以看到详细代码：<a href=\"https://ant.design/components/list-cn#list-demo-loadmore\">地址</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/39.png\" alt=\"image-20231211191240618\"></p>\n<p>然后进行一定修改：</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 使用 useState 和泛型来定义组件内的状态</span>\n<span class=\"token comment\">// 加载状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 列表数据</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 总数</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> setTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 每页显示条数</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PAGE_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>完整的<code>/pages/InterfaceInfo/index.tsx</code>代码：</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * 接口显示的主页\n * @constructor\n */</span>\n<span class=\"token keyword\">const</span> Index<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 使用 useState 和泛型来定义组件内的状态</span>\n  <span class=\"token comment\">// 加载状态</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 列表数据</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">,</span> setList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 总数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> setTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 每页显示条数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">PAGE_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 定义异步加载数据的函数</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadData</span> <span class=\"token operator\">=</span>  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pageSize <span class=\"token operator\">=</span> <span class=\"token constant\">PAGE_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 开始加载数据，设置 loading 状态为 true</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 调用接口获取数据</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">listInterfaceInfoByPageUsingGet</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">&#123;</span>\n          current<span class=\"token punctuation\">,</span>\n          pageSize<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 将请求返回的数据设置到列表数据状态中</span>\n      <span class=\"token function\">setList</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>records <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 将请求返回的总数设置到总数状态中</span>\n      <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>total <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 请求失败时提示错误信息</span>\n      message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 数据加载成功或失败后，设置 loading 状态为 false</span>\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 页面加载完成后调用加载数据的函数</span>\n    <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PageContainer</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>在线接口开放平台<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      &lt;List\n          className=\"my-list\"\n          // 设置 loading 属性，表示数据是否正在加载中\n          loading=</span><span class=\"token punctuation\">&#123;</span>loading<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          itemLayout=\"horizontal\"\n          // 将列表数据作为数据源传递给 List 组件\n          dataSource=</span><span class=\"token punctuation\">&#123;</span>list<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          // 渲染每个列表项\n          renderItem=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">// 构建链接地址</span>\n              <span class=\"token keyword\">const</span> apiLink <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/interface_info/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n              <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List.Item</span></span> <span class=\"token attr-name\">actions</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>apiLink<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">查看</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List.Item.Meta</span></span>\n                          <span class=\"token comment\">// href等会要改成接口文档的链接</span>\n                          <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>apiLink<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#125;</span></span>\n                          <span class=\"token attr-name\">description</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">&#125;</span></span>\n                      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n                  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">List.Item</span></span><span class=\"token punctuation\">></span></span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n          // 分页配置\n          pagination=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 自定义显示总数</span>\n            <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-shadow</span>\n            <span class=\"token function\">showTotal</span><span class=\"token punctuation\">(</span>total<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">'总数：'</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 每页显示条数</span>\n            pageSize<span class=\"token operator\">:</span> <span class=\"token constant\">PAGE_SIZE</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 总数，从状态中获取</span>\n            total<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// 切换页面触发的回调函数</span>\n            <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> pageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">// 加载对应页面的数据</span>\n              <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      />\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PageContainer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Index<span class=\"token punctuation\">;</span></code></pre>\n\n<h1 id=\"七、前端开发查看具体接口详细信息页面\"><a href=\"#七、前端开发查看具体接口详细信息页面\" class=\"headerlink\" title=\"七、前端开发查看具体接口详细信息页面\"></a>七、前端开发查看具体接口详细信息页面</h1><h2 id=\"1、创建浏览接口文档页\"><a href=\"#1、创建浏览接口文档页\" class=\"headerlink\" title=\"1、创建浏览接口文档页\"></a>1、创建浏览接口文档页</h2><p>复制 Index 目录，粘贴到 page 目录下，并重命名为<code>InterfaceInfo</code>。</p>\n<p>然后到route.ts中注册一下</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/40.png\" alt=\"image-20231211192257622\"></p>\n<p>现在需要在点击查看命令后跳转到 <code>/interface_info/:id</code>这个路径，因此需要去修改查看按钮的<code>action</code>动作</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 构建链接地址</span>\n<span class=\"token keyword\">const</span> apiLink <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/interface_info/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List.Item</span></span> <span class=\"token attr-name\">actions</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>apiLink<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">查看</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List.Item.Meta</span></span>\n            <span class=\"token comment\">// href等会要改成接口文档的链接</span>\n            <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>apiLink<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#125;</span></span>\n            <span class=\"token attr-name\">description</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">List.Item</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"2、修改浏览接口文档页\"><a href=\"#2、修改浏览接口文档页\" class=\"headerlink\" title=\"2、修改浏览接口文档页\"></a>2、修改浏览接口文档页</h2><p><strong>如何拿到动态路由的参数 id？</strong></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 使用 useParams 钩子函数获取动态路由参数</span>\n<span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>继续修改页面</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 定义状态和钩子函数</span>\n<span class=\"token comment\">// 加载状态</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 列表数据</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>InterfaceInfo<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用 useParams 钩子函数获取动态路由参数</span>\n<span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token function\">useParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义异步加载数据的函数</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadData</span> <span class=\"token operator\">=</span>  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数不存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 开始加载数据，设置 loading 状态为 true</span>\n  <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调用接口获取数据，发起请求获取接口信息，接受一个包含 id 参数的对象作为参数</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getInterfaceInfoByIdUsingGet</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">&#123;</span>\n        id<span class=\"token operator\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将请求返回的数据设置到列表数据状态中</span>\n    <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 请求失败时提示错误信息</span>\n    message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 数据加载成功或失败后，设置 loading 状态为 false</span>\n  <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 页面加载完成后调用加载数据的函数</span>\n  <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>此时，前端已经可以取到接口具体信息了，还需要继续优化一下展示页面即可</p>\n<h2 id=\"3、美化展示页面\"><a href=\"#3、美化展示页面\" class=\"headerlink\" title=\"3、美化展示页面\"></a>3、美化展示页面</h2><p>去官网站一下描述列表的组件：<a href=\"https://ant.design/components/descriptions-cn\">地址</a></p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">&#123;</span>data <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">column</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>接口状态<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>status <span class=\"token operator\">?</span> <span class=\"token string\">'正常'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'关闭'</span><span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>描述<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求地址<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求参数<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>requestParams<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求方法<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求头<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>requestHeader<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>响应头<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>responseHeader<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>创建时间<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>create_time<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Descriptions.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>更新时间<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>data<span class=\"token punctuation\">.</span>update_time<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Descriptions</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">接口不存在</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span></code></pre>\n\n<h1 id=\"八、后端开发申请签名\"><a href=\"#八、后端开发申请签名\" class=\"headerlink\" title=\"八、后端开发申请签名\"></a>八、后端开发申请签名</h1><h2 id=\"1、开发申请签名\"><a href=\"#1、开发申请签名\" class=\"headerlink\" title=\"1、开发申请签名\"></a>1、开发申请签名</h2><p>可以在用户注册时给用户自动分配一个签名和秘钥</p>\n<p>在 user 表中新增两个字段 accessKey 和 secretKey</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 签名\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 秘钥\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span></code></pre>\n\n<p>改造 Mapper.xml</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/41.png\" alt=\"image-20231212082934896\"></p>\n<p>在用户注册时，为其设置这两个值</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//使用DDigestUtil.md5Hex加密签名与秘钥</span>\n<span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">md5Hex</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SALT</span> <span class=\"token operator\">+</span> userAccount <span class=\"token operator\">+</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">md5Hex</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SALT</span> <span class=\"token operator\">+</span> userAccount <span class=\"token operator\">+</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessKey</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">setSecretKey</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h1 id=\"九、开发前端调用接口按钮\"><a href=\"#九、开发前端调用接口按钮\" class=\"headerlink\" title=\"九、开发前端调用接口按钮\"></a>九、开发前端调用接口按钮</h1><p>去官方文档找一个现成的表单项：<a href=\"https://ant.design/components/form-cn\">地址</a>，修改后的代码如下：</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"在线测试\"</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个表单,表单名称为\"invoke\",布局方式为垂直布局,当表单提交时调用onFinish方法 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>invoke<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onFinish</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>onFinish<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个表单项,用于输入请求参数,表单项名称为\"userRequestParams\" */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form.Item</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请求参数<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userRequestParams<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input.TextArea</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建一个包裹项,设置其宽度占据 16 个栅格列 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form.Item</span></span> <span class=\"token attr-name\">wrapperCol</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> span<span class=\"token operator\">:</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 创建调用按钮*/</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">htmlType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                调用\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form.Item</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Card</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"返回结果\"</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">loading</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>invokeLoading<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">&#123;</span>invokeRes<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Card</span></span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p>如何去调用这个接口，有两种思路：</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/42.png\" alt=\"image.png\"></p>\n<p>实际上，在企业项目中，选择第二种方式是不太可能的。原因在于，如果模拟接口可以直接被调用，那么存在安全风险。通常情况下，前端虽然可以直接调用模拟接口，但我们不会将模拟接口暴露给外部，而是将其隐藏起来。用户或开发者在调用时可能根本不知道模拟接口的地址。假设，模拟接口的地址是 aaa.com&#x2F;api，后端地址是 bbb.com&#x2F;api，而 aaa.com&#x2F;api 并不对用户开放，用户根本不知道它的存在。</p>\n<p>实际上，在企业项目中，选择第二种方式是不太可能的。原因在于，如果模拟接口可以直接被调用，那么存在安全风险。通常情况下，前端虽然可以直接调用模拟接口，但我们不会将模拟接口暴露给外部，而是将其隐藏起来。用户或开发者在调用时可能根本不知道模拟接口的地址。假设，模拟接口的地址是 aaa.com&#x2F;api，后端地址是 bbb.com&#x2F;api，而 aaa.com&#x2F;api 并不对用户开放，用户根本不知道它的存在。</p>\n<p><strong>前端要做的事情，就是把所有它要调用的接口 id 、请求参数传给后端，后端负责调用。</strong></p>\n<p><code>onFinish</code>方法：</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onFinish</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口不存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">setInvokeLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">invokeInterfaceInfoUsingPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            id<span class=\"token operator\">:</span> params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>values<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//将接口调用结果 (res.data) 更新到 invokeRes 状态变量中</span>\n        <span class=\"token function\">setInvokeRes</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'操作失败'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">setInvokeLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>后端在线调用接口：先构造一个用于接收前端请求参数的返回值<code>InterfaceInfoInvokeRequest</code></p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterfaceInfoInvokeRequest</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/**\n     * 主键\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 用户请求参数\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userRequestParams<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>然后去也后端调用模拟接口平台的业务</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 接口调用\n *\n * @param interfaceInfoInvokeRequest\n * @param request\n * @return\n */</span>\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/invoke\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">invokeInterfaceInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">InterfaceInfoInvokeRequest</span> interfaceInfoInvokeRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//判断 id 为 null 或者 id 小于等于 0，直接抛出异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interfaceInfoInvokeRequest <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> interfaceInfoInvokeRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">long</span> id <span class=\"token operator\">=</span> interfaceInfoInvokeRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断请求参数为空或者空值，则直接抛出异常</span>\n    <span class=\"token class-name\">String</span> userRequestParams <span class=\"token operator\">=</span> interfaceInfoInvokeRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getUserRequestParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userRequestParams <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>userRequestParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//1、校验接口是否存在</span>\n    <span class=\"token comment\">// 根据id查询接口信息数据</span>\n    <span class=\"token class-name\">InterfaceInfo</span> oldInterfaceInfo <span class=\"token operator\">=</span> interfaceInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果查询结果为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldInterfaceInfo <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 检查接口状态是否为下线状态</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldInterfaceInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">InterfaceInfoStatusEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OFFLINE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMS_ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"接口已关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">User</span> loginUser <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getLoginUser</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">getAccessKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">getSecretKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">OrangeApiClient</span> tempClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrangeApiClient</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 我们只需要进行测试调用，所以我们需要解析传递过来的参数。</span>\n    <span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将用户请求参数转换为com.yupi.yuapiclientsdk.model.User对象</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span> user <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>userRequestParams<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zc<span class=\"token punctuation\">.</span>orangeapiclientsdk<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span></span>User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 调用YuApiClient的getUsernameByPost方法，传入用户对象，获取用户名</span>\n    <span class=\"token class-name\">String</span> usernameByPost <span class=\"token operator\">=</span> tempClient<span class=\"token punctuation\">.</span><span class=\"token function\">getUserNameByPost</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResultUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>usernameByPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h1 id=\"十、网关项目\"><a href=\"#十、网关项目\" class=\"headerlink\" title=\"十、网关项目\"></a>十、网关项目</h1><p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/43.png\" alt=\"image.png\"></p>\n<p>核心<code>pom.xml</code>文件为：</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/44.png\" alt=\"image-20231213201041338\"></p>\n<p>配置<code>application.yml</code>文件</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 设置服务器的端口号为8090</span>\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8090</span>\n\n<span class=\"token comment\"># 配置Spring Cloud Gateway</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">default-filters</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> AddResponseHeader=source<span class=\"token punctuation\">,</span> yupi  <span class=\"token comment\"># 添加响应头，指定来源为yupi</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> api_route  <span class=\"token comment\"># 定义路由ID为api_route</span>\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8123</span>  <span class=\"token comment\"># 请求转发地址为http://localhost:8123</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/api/<span class=\"token important\">**</span>  <span class=\"token comment\"># 匹配以/api/开头的路径</span></code></pre>\n\n<p>转发到 <a href=\"http://localhost:8123/\">http://localhost:8123</a> 这个地址，是我们<code>Interface</code>后端项目的地址，也就是起到一个中转的作用。将本来应该向接口的提供地址直接发送的请求经由网关项目进行中转。起到不暴露接口地址的作用，对接口是一种保护作用。</p>\n<h2 id=\"1、编写业务逻辑\"><a href=\"#1、编写业务逻辑\" class=\"headerlink\" title=\"1、编写业务逻辑\"></a>1、编写业务逻辑</h2><h3 id=\"1-1、请求日志\"><a href=\"#1-1、请求日志\" class=\"headerlink\" title=\"1.1、请求日志\"></a>1.1、请求日志</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">2</span>、 请求日志\n    <span class=\"token class-name\">ServerHttpRequest</span> request <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求唯一标识\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求路径\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求方法\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求参数\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> sourceAddress <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHostString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求来源地址\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求来源地址\"</span> <span class=\"token operator\">+</span> sourceAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"1-2、黑白名单\"><a href=\"#1-2、黑白名单\" class=\"headerlink\" title=\"1.2、黑白名单\"></a>1.2、黑白名单</h3><p>通常情况下可以使用封禁IP的方法，这里我们使用白名单的方法，设置一个规则，如果请求的来源地址不是 127.0.0.1，就拒绝它的访问。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token constant\">IP_WHITE_LIST</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//拿到响应对象</span>\n        <span class=\"token class-name\">ServerHttpResponse</span> response <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        3 黑白名单</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">IP_WHITE_LIST</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>sourceAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerHttpResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//设置响应状态码为 403 禁止访问</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FORBIDDEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//返回处理完成的响应</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">setComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"1-3、用户鉴权\"><a href=\"#1-3、用户鉴权\" class=\"headerlink\" title=\"1.3、用户鉴权\"></a>1.3、用户鉴权</h3><p>这里用到了 package com.zc.orangeapiclientsdk.utils 包里面的SignUtils方法，需要去pom.xml中引入</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>orangeApi-client-sdk<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token number\">4</span> 用户鉴权（判断 ak、sk 是否合法）\n        <span class=\"token class-name\">HttpHeaders</span> headers <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> nonce <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nonce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> timestamp <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// todo 实际情况应该是去数据库中查询是否已经分配给用户</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accessKey<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//校验时间戳，时间戳和当前时间不能超过 5 分钟</span>\n        <span class=\"token comment\">// 首先,获取当前时间的时间戳,以秒为单位</span>\n        <span class=\"token comment\">// System.currentTimeMillis()返回当前时间的毫秒数，除以1000后得到当前时间的秒数。</span>\n        <span class=\"token class-name\">Long</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 定义一个常量FIVE_MINUTES,表示五分钟的时间间隔(乘以60,将分钟转换为秒,得到五分钟的时间间隔)</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">FIVE_MINUTES</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">5L</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 判断当前时间与传入的时间戳是否相差五分钟或以上</span>\n        <span class=\"token comment\">// Long.parseLong(timestamp)将传入的时间戳转换成长整型</span>\n        <span class=\"token comment\">// 然后计算当前时间与传入时间戳之间的差值(以秒为单位),如果差值大于等于五分钟,则返回true,否则返回false</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">-</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token constant\">FIVE_MINUTES</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果时间戳与当前时间相差五分钟或以上，调用handleNoAuth(response)方法进行处理</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// todo 实际情况是去数据库中查询 secretKey</span>\n        <span class=\"token class-name\">String</span> serverSign <span class=\"token operator\">=</span> <span class=\"token class-name\">SignUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>serverSign<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">handleNoAuth</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"1-4、判断请求接口是否存在\"><a href=\"#1-4、判断请求接口是否存在\" class=\"headerlink\" title=\"1.4、判断请求接口是否存在\"></a>1.4、判断请求接口是否存在</h3><p>这个模拟接口的地址信息是存储在 yuapi-backend 项目的数据库内，因此我们需要从数据库中查询是否有符合要求的接口。我们可以判断严谨一点，比如验证 method 是否匹配，地址是否相等来判断。如果需要更严格的校验，还可以再验证请求参数。建议像这种业务层面的请求参数最好不要放到全局网关中处理，而是在业务层面自己处理。</p>\n<p>为什么这样建议呢？因为在我们的项目中，并没有引入操作数据库的依赖，如 MyBatis 等。我们之前在 yuapi-backend 项目中引入了这些依赖，因此在网关中再引入的话，可能会造成重复。个人建议是，如果我们已经有现成的访问数据库的方法，或者有可以操作数据库的现成接口，如果那个方法比较复杂，建议使用远程调用的方式调用那个可以操作数据库的项目提供的接口，这样会更方便。</p>\n<p>那怎么调用呢？有好几种方法，其中包括 HTTP 请求和 RPC。对于 HTTP 请求，可以自己编写客户端，使用一些常见的库比如 HTTPClient、RestTemplate 或者 Feign。而对于 RPC，也有多种实现方式，例如 Java 中可以使用 Dubbo 框架</p>\n<h3 id=\"1-5、剩余的业务逻辑\"><a href=\"#1-5、剩余的业务逻辑\" class=\"headerlink\" title=\"1.5、剩余的业务逻辑\"></a>1.5、剩余的业务逻辑</h3><p>接下来写请求转发，调用模拟接口，那就是 chain.filter 执行这个操作。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/45.png\" alt=\"image-20231213202745332\"></p>\n<h3 id=\"1-6、启动前端调用模拟接口\"><a href=\"#1-6、启动前端调用模拟接口\" class=\"headerlink\" title=\"1.6、启动前端调用模拟接口\"></a>1.6、启动前端调用模拟接口</h3><p>然后还需要去修改client-sdk项目，将接口的请求地址改为网关项目的地址8090</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/46.png\" alt=\"img\"></p>\n<p>然后重新打包，在其他引入sdk项目中，利用maven重新加载一下即可发现修改成功</p>\n<h3 id=\"1-7、自定义响应处理\"><a href=\"#1-7、自定义响应处理\" class=\"headerlink\" title=\"1.7、自定义响应处理\"></a>1.7、自定义响应处理</h3><p>预期是等模拟接口调用完成，才记录响应日志、统计调用次数。<br>但现实是 chain.filter 方法立刻返回了，直到 filter 过滤器 return 后才调用了模拟接口。<br>原因是：chain.filter 是个异步操作</p>\n<p>然而，我们期望的是按照以下步骤执行：</p>\n<p>首先执行第五步请求转发，调用模拟接口，然后再执行第六步打印响应日志，这样我们才能知道是否调用成功。但实际情况是，在调用第五步时，并没有真正触发调用模拟接口，而是直接继续往下执行。直到我们返回这个 filter，它才去调用模拟接口。因此，我们不能这样编写代码。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/47.png\" alt=\"image.png\"></p>\n<p>从这个模型图中可以观察到，Spring Cloud Gateway 的处理逻辑是等待所有过滤器都执行完毕后，才会继续向下走，直到最终调用被代理的服务，也就是我们的模拟接口。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/48.png\" alt=\"image-20231213203318315\"></p>\n<p>我们现在面临一个问题，就是我们希望在调用完远程接口后，再输出响应日志，但由于异步操作的原因，当前的方法等待返回时，远程接口还没有被调用，导致顺序冲突。为了解决这个问题，Spring Cloud Gateway 提供了一个自定义响应处理的装饰器，我们可以查阅相关资料来了解如何使用它。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * 处理响应\n     *\n     * @param exchange\n     * @param chain\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 获取原始的响应对象</span>\n            <span class=\"token class-name\">ServerHttpResponse</span> originalResponse <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取数据缓冲工厂</span>\n            <span class=\"token class-name\">DataBufferFactory</span> bufferFactory <span class=\"token operator\">=</span> originalResponse<span class=\"token punctuation\">.</span><span class=\"token function\">bufferFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 获取响应的状态码</span>\n            <span class=\"token class-name\">HttpStatus</span> statusCode <span class=\"token operator\">=</span> originalResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 判断状态码是否为200 OK(按道理来说,现在没有调用,是拿不到响应码的,对这个保持怀疑 沉思.jpg)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>statusCode <span class=\"token operator\">==</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 创建一个装饰后的响应对象(开始穿装备，增强能力)</span>\n                <span class=\"token class-name\">ServerHttpResponseDecorator</span> decoratedResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerHttpResponseDecorator</span><span class=\"token punctuation\">(</span>originalResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n                    <span class=\"token comment\">// 重写writeWith方法，用于处理响应体的数据</span>\n                    <span class=\"token comment\">// 这段方法就是只要当我们的模拟接口调用完成之后,等它返回结果，</span>\n                    <span class=\"token comment\">// 就会调用writeWith方法,我们就能根据响应结果做一些自己的处理</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">writeWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Publisher</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBuffer</span><span class=\"token punctuation\">></span></span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body instanceof Flux: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 判断响应体是否是Flux类型</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token class-name\">Flux</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBuffer</span><span class=\"token punctuation\">></span></span> fluxBody <span class=\"token operator\">=</span> <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\">// 返回一个处理后的响应体</span>\n                            <span class=\"token comment\">// (这里就理解为它在拼接字符串,它把缓冲区的数据取出来，一点一点拼接好)</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeWith</span><span class=\"token punctuation\">(</span>fluxBody<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>dataBuffer <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n\n                                <span class=\"token comment\">//8 todo 调用成功，接口调用次数 + 1 invokeCount</span>\n\n<span class=\"token comment\">//                                if (response.getStatusCode() != HttpStatus.OK) &#123;</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//                                &#125; else &#123;</span>\n<span class=\"token comment\">//                                    // 9 调用失败，返回一个规范的错误码</span>\n<span class=\"token comment\">//                                    return handleInvokeError(response);</span>\n<span class=\"token comment\">//                                &#125;</span>\n                                <span class=\"token comment\">// 读取响应体的内容并转换为字节数组</span>\n                                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>dataBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">readableByteCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                                dataBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token class-name\">DataBufferUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>dataBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放掉内存</span>\n                                <span class=\"token comment\">// 构建日志</span>\n                                <span class=\"token class-name\">StringBuilder</span> sb2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                sb2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;--- &#123;&#125; &#123;&#125; \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> rspArgs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                rspArgs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>originalResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token comment\">//rspArgs.add(requestUrl);</span>\n                                <span class=\"token class-name\">String</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//data</span>\n                                sb2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>sb2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rspArgs<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//log.info(\"&lt;-- &#123;&#125; &#123;&#125;\\n\", originalResponse.getStatusCode(), data);</span>\n                                <span class=\"token comment\">// 将处理后的内容重新包装成DataBuffer并返回</span>\n                                <span class=\"token keyword\">return</span> bufferFactory<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;--- &#123;&#125; 响应code异常\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeWith</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 对于200 OK的请求,将装饰后的响应对象传递给下一个过滤器链,并继续处理(设置repsonse对象为装饰过的)</span>\n                <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span>decoratedResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 对于非200 OK的请求，直接返回，进行降级处理</span>\n            <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 处理异常情况，记录错误日志</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gateway log exception.\\n\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h1 id=\"十一、补充完整网关的业务逻辑\"><a href=\"#十一、补充完整网关的业务逻辑\" class=\"headerlink\" title=\"十一、补充完整网关的业务逻辑\"></a>十一、补充完整网关的业务逻辑</h1><p>RPC讲解</p>\n<p>简单讲一下这个 RPC 是什么，假设你之前没有听说过 RPC，那么想象一下情景：<br>你在项目 A 中编写了一个非常有用的函数，现在你在项目 B 中也想要使用这个函数。但问题是，项目 A 和项目 B 是独立运行的，它们不共享同一片内存，也不在同一个进程中。那么，你怎么做才能调用项目 A 中的那个函数呢？</p>\n<p><strong>1. 怎么调用其他项目的方法？</strong></p>\n<ol>\n<li>复制代码和依赖、环境</li>\n<li>HTTP 请求（提供一个接口，供其他项目调用）</li>\n<li>RPC</li>\n<li>把公共的代码打个 jar 包，其他项目去引用（客户端 SDK）</li>\n</ol>\n<p><strong>PRC调用模型</strong></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/49.png\" alt=\"image.png\"></p>\n<p><strong>进一步说明：</strong>为了实现 RPC，我们需要涉及几个关键角色。</p>\n<ol>\n<li><strong>提供者（Producer&#x2F;Provider）</strong>： 首先，我们需要一个项目来提供方法，这个项目被称为提供者。它的主要任务是为其他人提供已经写好的代码，让其他人可以使用。举例来说，我们可以提供一个名为 invokeCount 的方法。</li>\n<li><strong>调用方（Invoker&#x2F;Consumer）</strong>： 一旦服务提供者提供了服务，调用方需要能够找到这个服务的位置。这就需要一个存储，用于存储已提供的方法，调用方需要知道提供者的地址和 invokeCount 方法，这里需要一个公共的存储。</li>\n<li><strong>存储</strong>： 这是一个公共存储，用于存储提供者提供的方法信息。调用方可以从这个存储中获取提供者的地址和方法信息，例如，提供者的地址可能是 123.123.123.1，而方法是 invokeCount，这些信息会存储在这个存储器中。</li>\n</ol>\n<h2 id=\"1、Dubbo-框架\"><a href=\"#1、Dubbo-框架\" class=\"headerlink\" title=\"1、Dubbo 框架\"></a>1、Dubbo 框架</h2><p><a href=\"https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/quick-start/spring-boot/\"><strong>Dubbo 框架官方文档</strong></a></p>\n<p><strong>两种使用方式：</strong></p>\n<ol>\n<li>Spring Boot 代码（注解 + 编程式）：写 Java 接口，服务提供者和消费者都去引用这个接口。</li>\n<li>IDL（接口调用语言）：创建一个公共的接口定义文件，服务提供者和消费者读取这个文件。优点是跨语言，所有的框架都认识。</li>\n</ol>\n<p>Dubbo底层用的是 Triple 协议：<a href=\"https://dubbo.incubator.apache.org/zh/docs3-v2/java-sdk/concepts-and-architecture/triple/\">Triple 协议</a>。</p>\n<h2 id=\"2、Nacos整合Dubbo\"><a href=\"#2、Nacos整合Dubbo\" class=\"headerlink\" title=\"2、Nacos整合Dubbo\"></a>2、Nacos整合Dubbo</h2><p><strong><a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">Nacos 官方文档</a></strong></p>\n<p>下载链接：<a href=\"https://github.com/alibaba/nacos/releases/download/2.1.1/nacos-server-2.1.1.zip\">https://github.com/alibaba/nacos/releases/download/2.1.1/nacos-server-2.1.1.zip</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/50.png\" alt=\"image-20231214101746634\"></p>\n<p>如何启动：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Linux/Unix/Mac</span>\n\n<span class=\"token function\">sh</span> startup.sh <span class=\"token parameter variable\">-m</span> standalone\n\n<span class=\"token comment\"># ubuntu</span>\n\n<span class=\"token function\">bash</span> startup.sh <span class=\"token parameter variable\">-m</span> standalone\n\n<span class=\"token comment\"># Windows</span>\n\nstartup.cmd <span class=\"token parameter variable\">-m</span> standalone</code></pre>\n\n<p>引入依赖</p>\n<pre class=\"language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.dubbo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>dubbo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.nacos<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>nacos-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n\n<p>然后配置&#96;application.yml# 配置Dubbo服务</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 配置Dubbo服务</span>\n<span class=\"token key atrule\">dubbo</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dubbo<span class=\"token punctuation\">-</span>springboot<span class=\"token punctuation\">-</span>demo<span class=\"token punctuation\">-</span>provider  <span class=\"token comment\"># 设置应用名称为dubbo-springboot-demo-provider</span>\n  <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dubbo  <span class=\"token comment\"># 使用Dubbo协议</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22223</span>  <span class=\"token comment\"># 设置Dubbo服务的端口号为22223</span>\n  <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>registry  <span class=\"token comment\"># 注册中心ID为nacos-registry</span>\n    <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span>  <span class=\"token comment\"># 注册中心地址为nacos://localhost:8848</span></code></pre>\n\n<p>在gate-way与backend两个项目需要一样的配置：</p>\n<p>启动完nacos后，启动服务提供方，然后再启动服务消费者</p>\n<p>服务提供者：在springboot启动类上添加<code>@EnableDubbo</code>注解</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/52.png\" alt=\"image-20231214102806744\"></p>\n<p>然后创建<code>DemoService</code>与<code>DemoServiceImpl</code>类，在实现类上添加 <code>@DubboService</code>注解</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sayHelloAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">completedFuture</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DubboService</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", request from consumer: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">RpcContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"zc\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>然后将这两个文件复制到服务消费者项目中</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/53.png\" alt=\"image-20231214103215563\"></p>\n<p>启动服务提供方，然后再启动服务消费者项目即可在nacos上注册，访问：<a href=\"http://localhost:8848/nacos/index.html\">http://localhost:8848/nacos/index.html</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/51.png\" alt=\"image-20231214102417970\"></p>\n<h1 id=\"错误：模拟接口的url一直有问题\"><a href=\"#错误：模拟接口的url一直有问题\" class=\"headerlink\" title=\"错误：模拟接口的url一直有问题\"></a>错误：模拟接口的url一直有问题</h1><p>捋一下流程</p>\n<p>首先前端发送调用接口的请求，先来到 backend 项目，经过一系列验证后，获取发起调用的用户的ak，sk，以及用户传来的参数，将用户传来的参数通过 Gson 转化为一个 User 对象，然后将这个对象传递到 sdk 项目的<code>getUserNameByPost</code>方法，通过这个方法将对象参数和要调用的接口地址（这里的地址是我们的网关项目的地址）组合，然后返回一个 body对象，并且在请求头添加accessKey，nonce，body，timestamp，sign等参数，用于后续的网关处进行鉴权</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/55.png\" alt=\"image-20231214170212659\"></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/56.png\" alt=\"image-20231214171259385\"></p>\n<p>然后请求来到网关项目的后端，进入全局过滤器。将accessKey，nonce，body，timestamp，sign一系列参数取出来，进行校验，相关的校验操作需要去操作数据库，通过<code>@DubboReference</code>去调用提供者提供的相关方法去操作数据库，也就是提取的公共类的Dubbo服务方法</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/58.png\" alt=\"image-20231214172128917\"></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/57.png\" alt=\"image-20231214170838476\"></p>\n<p>校验通过之后，去通过<code>Mono&lt;Void&gt; filter = chain.filter(exchange);</code>调用模拟接口</p>\n<p>预期是等模拟接口调用完成，才记录响应日志、统计调用次数。<br>但现实是 chain.filter 方法立刻返回了，直到 filter 过滤器 return 后才调用了模拟接口。<br>原因是：chain.filter 是个异步操作，理解为前端的 promise</p>\n<p>因此需要自定义响应处理方法，在接口调用成功之后去invokeCount，记录调用次数加一的操作</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/59.png\" alt=\"image-20231214172426236\"></p>\n<p>这里记得用Dubbo的注解，而不是spring的Resource注解</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/54.png\" alt=\"image-20231214155116419\"></p>\n<h1 id=\"十二、统计分析功能\"><a href=\"#十二、统计分析功能\" class=\"headerlink\" title=\"十二、统计分析功能\"></a>十二、统计分析功能</h1><p>查询数据：</p>\n<pre class=\"language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> interfaceInfoId<span class=\"token punctuation\">,</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>totalNum<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> totalNum\n<span class=\"token keyword\">from</span> user_interface_info\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> interfaceInfoId\n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> totalNum <span class=\"token keyword\">desc</span>\n<span class=\"token keyword\">limit</span> <span class=\"token number\">3</span></code></pre>\n\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/60.png\" alt=\"image-20231214191652900\"></p>\n<h1 id=\"十三、部署上线\"><a href=\"#十三、部署上线\" class=\"headerlink\" title=\"十三、部署上线\"></a>十三、部署上线</h1><h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><h3 id=\"修改后端服务地址\"><a href=\"#修改后端服务地址\" class=\"headerlink\" title=\"修改后端服务地址\"></a>修改后端服务地址</h3><p>修改前端代码，修改<code>src/requestConfig.ts</code>文件中的baseURL地址为真实的后端服务地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/61.png\" alt=\"image-20231219135810022\"></p>\n<p>静态化设置</p>\n<p>在 <code>config/config.ts</code> 文件（最后一行）中添加</p>\n<pre class=\"language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\">requestRecord<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></code></pre>\n\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/62.png\" alt=\"image-20231219135930681\"></p>\n<h3 id=\"打包前端项目，利用-build-命令\"><a href=\"#打包前端项目，利用-build-命令\" class=\"headerlink\" title=\"打包前端项目，利用 build 命令\"></a>打包前端项目，利用 build 命令</h3><p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/63.png\" alt=\"image-20231219140214787\"></p>\n<p>打包完成后，会在项目根目录下生成 dist 文件夹，这些就是需要放到服务器进行部署的文件。</p>\n<ul>\n<li>在前端开发中，我们通常会使用构建工具（如 Webpack、Parcel 等）将源代码转换为可在浏览器中运行的静态文件。这个过程包括了代码的打包、压缩、转译等操作，最终生成的静态文件就是放置在 <code>dist</code> 文件夹中。</li>\n</ul>\n<p>然后我们可以通过 serve 工具在本地运行这个项目，安装：<code>npm i -g serve</code></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/64.png\" alt=\"image-20231219140658231\"></p>\n<h3 id=\"服务器部署-docker\"><a href=\"#服务器部署-docker\" class=\"headerlink\" title=\"服务器部署(docker)\"></a>服务器部署(docker)</h3><p>采用<code>docker</code>直接将整个项目打包成镜像的方式，然后启动一个容器去运行前端项目</p>\n<p><strong>dockerfile文件：</strong></p>\n<pre class=\"language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nginx</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /root/nginx/html/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">USER</span> root</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./docker/nginx.conf /etc/nginx/conf.d/default.conf</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./dist  /usr/share/nginx/html/</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 80</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"nginx\"</span>, <span class=\"token string\">\"-g\"</span>, <span class=\"token string\">\"daemon off;\"</span>]</span></code></pre>\n\n<p><strong>nginx.conf文件：</strong></p>\n<pre class=\"language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># gzip config</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_min_length</span> <span class=\"token number\">1k</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_comp_level</span> <span class=\"token number\">9</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_types</span> text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_vary</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">gzip_disable</span> <span class=\"token string\">\"MSIE [1-6]\\.\"</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">root</span> /usr/share/nginx/html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">include</span> /etc/nginx/mime.types</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> /index.html</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<p>制作镜像文件命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> orangeapi-front:v0.0.1 <span class=\"token builtin class-name\">.</span></code></pre>\n\n<p>运行该镜像命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 <span class=\"token parameter variable\">-d</span> orangeapi-front:v0.0.1</code></pre>\n\n<p>至此，前端项目部署完毕：访问地址：<strong>服务器公网IP:80</strong></p>\n<p>前端部署需要服务器开放 80 端口，否则无法访问</p>\n<h3 id=\"服务器部署-宝塔界面\"><a href=\"#服务器部署-宝塔界面\" class=\"headerlink\" title=\"服务器部署(宝塔界面)\"></a>服务器部署(宝塔界面)</h3><p>宝塔面板官网：<a href=\"https://www.bt.cn/new/download.html\">地址</a>，安装要求安装即可，点击添加站点，填写域名，没有域名直接填写服务器公网IP即可</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/65.png\" alt=\"image-20231219141624141\"></p>\n<p>然后在文件根目录下会多一个文件夹，先把里面生成的几个文件删除【<code>.user.ini</code>删除不了不影响】，然后将<code>dist</code>文件夹里的所有文件上传到这里即可。</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/66.png\" alt=\"image-20231219142223180\"></p>\n<h4 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h4><p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/67.png\" alt=\"image-20231219142658018\"></p>\n<p>nginx配置文件：</p>\n<pre class=\"language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token comment\">#访问api后端相关配置</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 用于配合 browserHistory使用</span>\n    <span class=\"token directive\"><span class=\"token keyword\">try_files</span> <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/index.html /index.html</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">location</span> /api</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">rewrite</span> ^/api/(.*) /<span class=\"token variable\">$1</span> break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\"># 后台服务地址</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://公网IP/api</span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>   X-Forwarded-Proto  <span class=\"token variable\">$scheme</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>   Host               <span class=\"token variable\">$http_host</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span>   X-Real-IP          <span class=\"token variable\">$remote_addr</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>同样需要开放 80 端口（第一步添加站点时的默认选型）</p>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p><a href=\"https://blog.csdn.net/qq_58141314/article/details/131020932\">地址</a></p>\n<p>1、卸载系统之前可能安装的 docker（防止冲突</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span>\n    docker-client <span class=\"token punctuation\">\\</span>\n    docker-client-latest <span class=\"token punctuation\">\\</span>\n    docker-common <span class=\"token punctuation\">\\</span>\n    docker-latest <span class=\"token punctuation\">\\</span>\n    docker-latest-logrotate <span class=\"token punctuation\">\\</span>\n    docker-logrotate <span class=\"token punctuation\">\\</span>\n    docker-engine</code></pre>\n\n<p>2、安装Docker-CE基本环境</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> yum-utils device-mapper-persistent-data lvm2</code></pre>\n\n<p>设置 docker repo 的 yum 位置</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo </code></pre>\n\n<p>安装 docker 以及 docker-cli</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io</code></pre>\n\n<p>3、启动docker</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#启动docker</span>\n<span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span>\n<span class=\"token comment\">#查看docker服务状态 running 就是启动成功</span>\n<span class=\"token function\">sudo</span> systemctl status <span class=\"token function\">docker</span></code></pre>\n\n<p>4、设置开机自启</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span></code></pre>\n\n\n\n<h3 id=\"安装docker-nacos\"><a href=\"#安装docker-nacos\" class=\"headerlink\" title=\"安装docker nacos\"></a>安装docker nacos</h3><p>同样使用<code>docker</code>安装，先拉取nacos镜像，版本根据自己项目需要自行选择即可。需要注意的是，nacos2.x版本以上，需要使用三个端口。具体信息查看：<a href=\"https://nacos.io/en-us/docs/v2/upgrading/2.0.0-compatibility.html\">官方文档</a></p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/68.png\" alt=\"image-20231219143357821\"></p>\n<p><code>docker pull nacos/nacos-server:v2.1.0</code></p>\n<p>然后使用容器运行该镜像即可，然后开放8848,9848,9849三个端口</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8848</span>:8848 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9848</span>:9848 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9849</span>:9849 <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MODE</span><span class=\"token operator\">=</span>standalone <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PREFER_HOST_MODE</span><span class=\"token operator\">=</span>hostname <span class=\"token parameter variable\">-v</span> /root/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties <span class=\"token parameter variable\">-v</span> /root/nacos/logs:/home/nacos/logs <span class=\"token parameter variable\">--restart</span> always <span class=\"token parameter variable\">--name</span> nacos nacos/nacos-server:v2.1.0</code></pre>\n\n<p>此时，可以访问服务器IP地址:8848&#x2F;nacos&#x2F;index.html,查看nacos是否安装成功，用户名与密码都是nacos</p>\n<p><strong>安装mysql</strong>：<a href=\"https://blog.csdn.net/boywcx/article/details/117782448#comments_30440071\">地址</a></p>\n<p>可以会报错，启动不起来，就加上这个命令，放开整个<code>/mydata/mysql/</code>目录</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> <span class=\"token number\">777</span> /mydata/mysql/</code></pre>\n\n\n\n<p><strong>安装redis</strong></p>\n<p><code>mkdir -p /root/docker/redis/conf</code></p>\n<p><code>mkdir -p /root/docker/redis/data</code></p>\n<p>然后将redis.conf放入<code>/root/docker/redis/conf</code>这里即可</p>\n<p><code>docker run --restart=always -p 6379:6379 --name redis -v /root/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v /root/docker/redis/data:/data -d redis:7.0.12 redis-server /etc/redis/redis.conf</code></p>\n<p>然后开放 3306,6379端口，可以设置仅允许自己后端及自己电脑可访问，安全性更高</p>\n<h3 id=\"移植数据库\"><a href=\"#移植数据库\" class=\"headerlink\" title=\"移植数据库\"></a>移植数据库</h3><p>可以通过IDEA的数据库工具导出一个表的建表语句</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/69.png\" alt=\"image-20231219152034076\"></p>\n<p>在云服务器安装的mysql服务上，复制一份本地的数据库表结构</p>\n<h3 id=\"部署backend项目\"><a href=\"#部署backend项目\" class=\"headerlink\" title=\"部署backend项目\"></a>部署backend项目</h3><p>1、首先需要去修改sdk项目的网关地址：本来是运行在本地的，现在需要改为服务器地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/71.png\" alt=\"image-20231219153008133\"></p>\n<p>修改完成后，利用maven工具重新 install 打包</p>\n<p>2、<code>backend</code>项目，也刷新一下 maven 依赖，然后复制 <code>application.yml</code> 改为<code>application-prod.yml</code>文件</p>\n<p>将里面的mysql，redis，nacos地址都由 <code>localhost</code> 改为服务器 <code>公网 IP</code></p>\n<p>3、利用maven package 打包出jar包</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/72.png\" alt=\"image-20231219153328060\"></p>\n<h4 id=\"上线\"><a href=\"#上线\" class=\"headerlink\" title=\"上线\"></a>上线</h4><p>1、将 jar 包上传到服务器，用于制作镜像</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/73.png\" alt=\"image-20231219153531106\">2、dockerfile文件内容：</p>\n<pre class=\"language-docker\" data-language=\"docker\"><code class=\"language-docker\"><span class=\"token comment\"># Docker 镜像构建</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> maven:3.5-jdk-8-alpine <span class=\"token keyword\">as</span> builder</span>\n\n<span class=\"token comment\"># Copy local code to the container image.</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token comment\"># Build a release artifact.</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./orangeApi-backend-0.0.1-SNAPSHOT.jar /app/target/orangeApi-backend-0.0.1-SNAPSHOT.jar</span>\n<span class=\"token comment\">#RUN mvn package -DskipTests</span>\n\n<span class=\"token comment\"># Run the web service on container startup.</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"java\"</span>,<span class=\"token string\">\"-jar\"</span>,<span class=\"token string\">\"/app/target/orangeApi-backend-0.0.1-SNAPSHOT.jar\"</span>,<span class=\"token string\">\"--spring.profiles.active=prod\"</span>]</span></code></pre>\n\n<p>3、制作镜像命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> orangeapi-backend:v0.0.1 <span class=\"token builtin class-name\">.</span></code></pre>\n\n<p>4、运行容器的命令：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">7529</span>:7529 <span class=\"token parameter variable\">-d</span> orangeapi-backend:v0.0.1</code></pre>\n\n<h3 id=\"部署gateway项目\"><a href=\"#部署gateway项目\" class=\"headerlink\" title=\"部署gateway项目\"></a>部署gateway项目</h3><p>1、配置 <code>application-prod.yml</code></p>\n<p>跟 backend 项目一样，复制一个 <code>application.yml</code> 文件改名为 <code>application-prod.yml</code>，将nacos地址改为云服务器地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/75.png\" alt=\"image-20231220185434982\"></p>\n<p>2、修改 <code>CustomGlobalFilter</code> 文件的模拟接口地址为服务器提供模拟接口的 <code>ip</code> 地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/74.png\" alt=\"image-20231219154133498\"></p>\n<p>3、同样需要上传到服务器，利用 dockfile 制作镜像</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Docker 镜像构建</span>\n\nFROM maven:3.5-jdk-8-alpine as builder\n\n<span class=\"token comment\"># Copy local code to the container image.</span>\n\nWORKDIR /app\n\n<span class=\"token comment\"># Build a release artifact.</span>\nCOPY ./orangeApi-gateway-0.0.1-SNAPSHOT.jar /app/target/orangeApi-gateway-0.0.1-SNAPSHOT.jar\n<span class=\"token comment\">#RUN mvn package -DskipTests</span>\n\n<span class=\"token comment\"># Run the web service on container startup.</span>\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"java\"</span>,<span class=\"token string\">\"-jar\"</span>,<span class=\"token string\">\"/app/target/orangeApi-gateway-0.0.1-SNAPSHOT.jar\"</span>,<span class=\"token string\">\"--spring.profiles.active=prod\"</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>4、制作镜像命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> orangeapi-gateway:v0.0.1 <span class=\"token builtin class-name\">.</span></code></pre>\n\n<p>5、运行命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8090</span>:8090 <span class=\"token parameter variable\">-d</span> orangeapi-gateway:v0.0.1</code></pre>\n\n<h3 id=\"部署模拟调用接口interface项目\"><a href=\"#部署模拟调用接口interface项目\" class=\"headerlink\" title=\"部署模拟调用接口interface项目\"></a>部署模拟调用接口interface项目</h3><p>1、dockerfile文件：</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Docker 镜像构建</span>\n\nFROM maven:3.5-jdk-8-alpine as builder\n\n<span class=\"token comment\"># Copy local code to the container image.</span>\n\nWORKDIR /app\n\n<span class=\"token comment\"># Build a release artifact.</span>\n\nCOPY ./orangeApi-interface-0.0.1-SNAPSHOT.jar /app/target/orangeApi-interface-0.0.1-SNAPSHOT.jar\n<span class=\"token comment\">#RUN mvn package -DskipTests</span>\n\n<span class=\"token comment\"># Run the web service on container startup.</span>\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"java\"</span>,<span class=\"token string\">\"-jar\"</span>,<span class=\"token string\">\"/app/target/orangeApi-interface-0.0.1-SNAPSHOT.jar\"</span>,<span class=\"token string\">\"--spring.profiles.active=prod\"</span><span class=\"token punctuation\">]</span></code></pre>\n\n<p>2、制作镜像命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> orangeapi-interface:v0.0.1 <span class=\"token builtin class-name\">.</span></code></pre>\n\n<p>3、运行命令</p>\n<pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8123</span>:8123 <span class=\"token parameter variable\">-d</span> orangeapi-interface:v0.0.1</code></pre>\n\n<h2 id=\"采坑\"><a href=\"#采坑\" class=\"headerlink\" title=\"采坑\"></a>采坑</h2><h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>nacos2.x版本之后，需额外开发两个端口</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>总共需要开放的端口号:</p>\n<p>80(前端),7529(backend),3306(mysql),6379(redis),8090(gateway),8123(interface),8848,9848,9849(三个nacos的)</p>\n<h3 id=\"问题三、\"><a href=\"#问题三、\" class=\"headerlink\" title=\"问题三、\"></a>问题三、</h3><p>网关一直无法发送请求到真实提供接口的项目，最后发现是网关项目的路由转发地址没有改为服务器地址</p>\n<p><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/76.png\" alt=\"image-20231220190006785\"></p>\n<p>仍然存在的问题</p>\n<ol>\n<li>前后端不在一台服务器上，跨域问题一直未得到解决，换到一台服务器上才好。</li>\n<li>新用户注册之后，需要管理员在<code>userInterfaceInfo</code>表中为其添加调用次数，否则无法调用接口。<ul>\n<li>改进：添加用户申请某个接口调用次数的功能</li>\n</ul>\n</li>\n<li>最好是把url拆分成地址+请求路径，因为之后再次开发的接口项目的地址可能不再是现在用的这个<ul>\n<li><img src=\"https://img.miccai.top/api%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%94%E8%AE%B0/70.png\" alt=\"image-20231219152358222\"></li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "项目"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2023/10/16/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E6%96%87%E6%A1%A3/",
            "url": "https://ooooddddd.github.io/2023/10/16/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E6%96%87%E6%A1%A3/",
            "title": "博客建设文档",
            "date_published": "2023-10-16T06:21:48.000Z",
            "content_html": "<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"https://butterfly.js.org/\">Buutterfly 文档</a></li>\n</ol>\n<h1 id=\"主要讲讲踩坑的地方\"><a href=\"#主要讲讲踩坑的地方\" class=\"headerlink\" title=\"主要讲讲踩坑的地方\"></a>主要讲讲踩坑的地方</h1>",
            "tags": [
                "blog"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2023/10/16/%E6%9C%AC%E5%9C%B0ChatGPT/",
            "url": "https://ooooddddd.github.io/2023/10/16/%E6%9C%AC%E5%9C%B0ChatGPT/",
            "title": "本地ChatGPT",
            "date_published": "2023-10-16T02:31:51.000Z",
            "content_html": "<h1 id=\"2023-12-21实测，该教程已经寄了\"><a href=\"#2023-12-21实测，该教程已经寄了\" class=\"headerlink\" title=\"2023.12.21实测，该教程已经寄了\"></a>2023.12.21实测，该教程已经寄了</h1><h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><p>部署好之后不再依赖科学上网</p>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><p>仍然需要你有正常的openAI账号，token登录方式</p>\n<h1 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h1><ol>\n<li>搭载了Centos7的本地虚拟机</li>\n<li>在虚拟机上安装了Docker，网上很多安装教程，这里不再展开赘述</li>\n</ol>\n<h1 id=\"拉取镜像，启动容器\"><a href=\"#拉取镜像，启动容器\" class=\"headerlink\" title=\"拉取镜像，启动容器\"></a>拉取镜像，启动容器</h1><ul>\n<li><p>拉取 pengzhile&#x2F;pandora 镜像(如果拉取失败，使用科学上网重试)</p>\n <pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull pengzhile/pandora</code></pre></li>\n<li><p>启动容器</p>\n <pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PANDORA_CLOUD</span><span class=\"token operator\">=</span>cloud <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PANDORA_SERVER</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:9527 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9527</span>:9527 <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always pengzhile/pandora</code></pre>\n<p> -p 9527:9527：可以更换，确保没有被占用即可<br> –restart&#x3D;always：自启动</p>\n</li>\n<li><p>查看虚拟机ip地址</p>\n <pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ifconfig</span></code></pre>\n</li>\n<li><p>访问：ip:9527，进入到登录页面，如图<br> <img src=\"https://img.miccai.top//imgs/2023-10-16-chatgpt/1.png\"></p>\n</li>\n<li><p>token获取，请访问：<a href=\"https://chat.openai.com/api/auth/session\">获取toked</a></p>\n</li>\n</ul>\n",
            "tags": [
                "chatGPT"
            ]
        },
        {
            "id": "https://ooooddddd.github.io/2023/10/12/RabbitMQ%E5%AD%A6%E4%B9%A0/",
            "url": "https://ooooddddd.github.io/2023/10/12/RabbitMQ%E5%AD%A6%E4%B9%A0/",
            "title": "RabbitMQ学习",
            "date_published": "2023-10-12T15:45:10.000Z",
            "content_html": "<h1 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>如图所示，运行docker镜像安装rabbitmq<img src=\"/self/imgs/RabbitMQ/1.png\"></p>\n</li>\n<li><p>报错提示：网络未找到<br><img src=\"/self/imgs/RabbitMQ/2.png\"></p>\n</li>\n<li><p>网络需要输入自己有的,之后运行命令，记得将用户名和密码设置为自己的</p>\n <pre class=\"language-Docker\" data-language=\"Docker\"><code class=\"language-Docker\">docker run -e RABBITMQ_DEFAULT_USER&#x3D;xxx -e RABBITMQ_DEFAULT_PASS&#x3D;xxxxx -v mq-plugins:&#x2F;plugins --name mq --hostname mq -p 15672:15672 -p 5672:5672 --network bridge -d rabbitmq:3.8-management&gt;</code></pre>\n\n</li>\n<li><p>如何访问<br><a href=\"http://192.168.110.92:15672/\">http://192.168.110.92:15672/</a></p>\n</li>\n<li><p>访问成功页面<img src=\"/self/imgs/RabbitMQ/3.png\"></p>\n</li>\n</ol>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><ol>\n<li>添加消息队列<img src=\"/self/imgs/RabbitMQ/4.png\"></li>\n<li>发送消息到交换机（exchanges），然后交换机需要binding消息队列，否则消息无法发送。<img src=\"/self/imgs/RabbitMQ/5.png\"></li>\n<li>总结：交换机没有存储消息的能力，只能转发消息</li>\n</ol>\n<h2 id=\"数据隔离\"><a href=\"#数据隔离\" class=\"headerlink\" title=\"数据隔离\"></a>数据隔离</h2><ol>\n<li>用户管理<img src=\"/self/imgs/RabbitMQ/6.png\"></li>\n<li>虚拟主机可以完成数据隔离，如何新建虚拟主机<img src=\"/self/imgs/RabbitMQ/7.png\"></li>\n<li>理论上讲，一个项目一个用户，一个虚拟主机</li>\n</ol>\n<h2 id=\"SpringAMQP-Java客户端\"><a href=\"#SpringAMQP-Java客户端\" class=\"headerlink\" title=\"SpringAMQP Java客户端\"></a>SpringAMQP Java客户端</h2><h3 id=\"如何收发消息\"><a href=\"#如何收发消息\" class=\"headerlink\" title=\"如何收发消息\"></a>如何收发消息</h3><ol>\n<li>引入 spring-boot-starter-amqp 依赖<img src=\"/self/imgs/RabbitMQ/8.png\"></li>\n<li>相关配置<img src=\"/self/imgs/RabbitMQ/9.png\"></li>\n<li>发消息，注入RabbitTemplate<img src=\"/self/imgs/RabbitMQ/10.png\"></li>\n<li>接收消息<img src=\"/self/imgs/RabbitMQ/11.png\"></li>\n</ol>\n<h3 id=\"WorkQueues模型\"><a href=\"#WorkQueues模型\" class=\"headerlink\" title=\"WorkQueues模型\"></a>WorkQueues模型</h3><ol>\n<li>让多个消费者绑定一个队列，共同消费一个队列中的消息<img src=\"/self/imgs/RabbitMQ/12.png\"></li>\n<li>循环发送消息<img src=\"/self/imgs/RabbitMQ/13.png\"></li>\n<li>同时接收消息，并模拟不同的处理速度<img src=\"/self/imgs/RabbitMQ/14.png\"></li>\n<li>设置prefetch，控制消费者预取的消息数量<img src=\"/self/imgs/RabbitMQ/15.png\"></li>\n<li>总结<img src=\"/self/imgs/RabbitMQ/16.png\"></li>\n</ol>\n<h3 id=\"Fanout交换机\"><a href=\"#Fanout交换机\" class=\"headerlink\" title=\"Fanout交换机\"></a>Fanout交换机</h3><ol>\n<li>Fanout 交换机会将接收到的消息广播到每一个跟其绑定的队列，所以也叫做广播模式。<blockquote>\n<p>1、一个交换机可以绑定多个队列 生产者发送的消息<br>2、只能发送到交换机<br>3、交换机把消息发送给绑定过的所有队列<br>4、订阅队列的消费者都能拿到消息</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Direct交换机\"><a href=\"#Direct交换机\" class=\"headerlink\" title=\"Direct交换机\"></a>Direct交换机</h3><ol>\n<li><p>Direct Exchange 会将接收到的消息根据规则路由到指定的Queue，因此称为定向路由</p>\n<blockquote>\n<p> 1、每一个队列在bind交换机时都设置一个BindingKey<br> 2、发布者发送消息时，指定消息的RoutingKey<br> 3、exchange将消息路由到BindingKey与RoutingKey一致的队列<br> 4、如图所示<img src=\"/self/imgs/RabbitMQ/17.png\"></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Topic交换机\"><a href=\"#Topic交换机\" class=\"headerlink\" title=\"Topic交换机\"></a>Topic交换机</h3><ol>\n<li>Topic与Direct功能类似，但Topic在bindingkey时更加灵活，可以使用通配符。</li>\n<li>BindingKey一般是由一个或多个单词组成，以 . 分割。</li>\n<li>通配符规则：<blockquote>\n<p>#：匹配一个或多个单词<br>*：只匹配一个单词</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"声明队列和交换机\"><a href=\"#声明队列和交换机\" class=\"headerlink\" title=\"声明队列和交换机\"></a>声明队列和交换机</h3><ol>\n<li>基于注解的声明方式<br> <img src=\"/self/imgs/RabbitMQ/18.png\"></li>\n</ol>\n<h3 id=\"消息转化器\"><a href=\"#消息转化器\" class=\"headerlink\" title=\"消息转化器\"></a>消息转化器</h3><ol>\n<li>配置JSON转换器<br> a. 先引入依赖<br> <img src=\"/self/imgs/RabbitMQ/19.png\"><br>b. 配置消息转换器，在启动类添加Bean<br> <img src=\"/self/imgs/RabbitMQ/20.png\"><br> <img src=\"/self/imgs/RabbitMQ/21.png\"></li>\n<li>发送消息与接收消息时，消息类型必须一致<img src=\"/self/imgs/RabbitMQ/22.png\"><br><img src=\"/self/imgs/RabbitMQ/23.png\"></li>\n</ol>\n",
            "tags": [
                "RabbitMQ"
            ]
        }
    ]
}